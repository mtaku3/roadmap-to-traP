/* tslint:disable */
/* eslint-disable */
/**
 * traP knoQ
 * This is a sample knoQ server.
 *
 * The version of the OpenAPI document: 2.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { IcalSecret } from "../model";
/**
 * ICalApi - axios parameter creator
 * @export
 */
export const ICalApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Icalを取得
     * @param {string} icalToken
     * @param {string} [q] Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIcal: async (
      icalToken: string,
      q?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'icalToken' is not null or undefined
      assertParamExists("getIcal", "icalToken", icalToken);
      const localVarPath = `/ical/v1/{icalToken}`.replace(
        `{${"icalToken"}}`,
        encodeURIComponent(String(icalToken)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (q !== undefined) {
        localVarQueryParameter["q"] = q;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * /ical で使う`secret`を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIcalSecret: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/ical`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * /ical で使う`secret`を再生成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetIcalSecret: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/ical`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ICalApi - functional programming interface
 * @export
 */
export const ICalApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ICalApiAxiosParamCreator(configuration);
  return {
    /**
     * Icalを取得
     * @param {string} icalToken
     * @param {string} [q] Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getIcal(
      icalToken: string,
      q?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getIcal(
        icalToken,
        q,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ICalApi.getIcal"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * /ical で使う`secret`を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getIcalSecret(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IcalSecret>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getIcalSecret(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ICalApi.getIcalSecret"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * /ical で使う`secret`を再生成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetIcalSecret(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IcalSecret>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.resetIcalSecret(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ICalApi.resetIcalSecret"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ICalApi - factory interface
 * @export
 */
export const ICalApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ICalApiFp(configuration);
  return {
    /**
     * Icalを取得
     * @param {string} icalToken
     * @param {string} [q] Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIcal(
      icalToken: string,
      q?: string,
      options?: any,
    ): AxiosPromise<string> {
      return localVarFp
        .getIcal(icalToken, q, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * /ical で使う`secret`を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIcalSecret(options?: any): AxiosPromise<IcalSecret> {
      return localVarFp
        .getIcalSecret(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * /ical で使う`secret`を再生成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetIcalSecret(options?: any): AxiosPromise<IcalSecret> {
      return localVarFp
        .resetIcalSecret(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ICalApi - object-oriented interface
 * @export
 * @class ICalApi
 * @extends {BaseAPI}
 */
export class ICalApi extends BaseAPI {
  /**
   * Icalを取得
   * @param {string} icalToken
   * @param {string} [q] Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ICalApi
   */
  public getIcal(
    icalToken: string,
    q?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ICalApiFp(this.configuration)
      .getIcal(icalToken, q, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * /ical で使う`secret`を取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ICalApi
   */
  public getIcalSecret(options?: RawAxiosRequestConfig) {
    return ICalApiFp(this.configuration)
      .getIcalSecret(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * /ical で使う`secret`を再生成
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ICalApi
   */
  public resetIcalSecret(options?: RawAxiosRequestConfig) {
    return ICalApiFp(this.configuration)
      .resetIcalSecret(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
