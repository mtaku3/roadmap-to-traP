/* tslint:disable */
/* eslint-disable */
/**
 * traP knoQ
 * This is a sample knoQ server.
 *
 * The version of the OpenAPI document: 2.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { RequestEvent } from "../model";
// @ts-ignore
import { RequestSchedule } from "../model";
// @ts-ignore
import { RequestTag } from "../model";
// @ts-ignore
import { ResponseEvent } from "../model";
// @ts-ignore
import { ResponseEventDetail } from "../model";
/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * タグを追加
     * @summary タグを追加
     * @param {string} eventID
     * @param {RequestTag} requestTag イベントにタグを追加
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEventTag: async (
      eventID: string,
      requestTag: RequestTag,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'eventID' is not null or undefined
      assertParamExists("addEventTag", "eventID", eventID);
      // verify required parameter 'requestTag' is not null or undefined
      assertParamExists("addEventTag", "requestTag", requestTag);
      const localVarPath = `/events/{eventID}/tags`.replace(
        `{${"eventID"}}`,
        encodeURIComponent(String(eventID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestTag,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 部屋の使用宣言を行う
     * @summary 部屋の使用宣言を行う
     * @param {RequestEvent} requestEvent 予約の編集
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEvents: async (
      requestEvent: RequestEvent,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestEvent' is not null or undefined
      assertParamExists("addEvents", "requestEvent", requestEvent);
      const localVarPath = `/events`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestEvent,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * adminsのみ
     * @summary 使用宣言を削除
     * @param {string} eventID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEvent: async (
      eventID: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'eventID' is not null or undefined
      assertParamExists("deleteEvent", "eventID", eventID);
      const localVarPath = `/events/{eventID}`.replace(
        `{${"eventID"}}`,
        encodeURIComponent(String(eventID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * locked=falseだけ
     * @summary タグを削除
     * @param {string} eventID
     * @param {string} tagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEventTag: async (
      eventID: string,
      tagName: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'eventID' is not null or undefined
      assertParamExists("deleteEventTag", "eventID", eventID);
      // verify required parameter 'tagName' is not null or undefined
      assertParamExists("deleteEventTag", "tagName", tagName);
      const localVarPath = `/events/{eventID}/tags/{tagName}`
        .replace(`{${"eventID"}}`, encodeURIComponent(String(eventID)))
        .replace(`{${"tagName"}}`, encodeURIComponent(String(tagName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getEventActivities: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/activity/events`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 一件取得
     * @summary 一件取得
     * @param {string} eventID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventDetail: async (
      eventID: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'eventID' is not null or undefined
      assertParamExists("getEventDetail", "eventID", eventID);
      const localVarPath = `/events/{eventID}`.replace(
        `{${"eventID"}}`,
        encodeURIComponent(String(eventID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 使用宣言の情報を取得
     * @summary 使用宣言の情報を取得
     * @param {string} [dateBegin] 特定の日時から。
     * @param {string} [dateEnd] 特定の日時まで。
     * @param {string} [q] Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvents: async (
      dateBegin?: string,
      dateEnd?: string,
      q?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/events`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (dateBegin !== undefined) {
        localVarQueryParameter["dateBegin"] = dateBegin;
      }

      if (dateEnd !== undefined) {
        localVarQueryParameter["dateEnd"] = dateEnd;
      }

      if (q !== undefined) {
        localVarQueryParameter["q"] = q;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * groupIdのeventsを取得
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventsOfGroup: async (
      groupID: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupID' is not null or undefined
      assertParamExists("getEventsOfGroup", "groupID", groupID);
      const localVarPath = `/groups/{groupID}/events`.replace(
        `{${"groupID"}}`,
        encodeURIComponent(String(groupID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定した部屋で行われるイベントを返す
     * @param {string} roomID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventsOfRoom: async (
      roomID: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'roomID' is not null or undefined
      assertParamExists("getEventsOfRoom", "roomID", roomID);
      const localVarPath = `/rooms/{roomID}/events`.replace(
        `{${"roomID"}}`,
        encodeURIComponent(String(roomID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 所属しているイベントを返す
     * @param {GetMyEventsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyEvents: async (
      relation?: GetMyEventsRelationEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/events`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (relation !== undefined) {
        localVarQueryParameter["relation"] = relation;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 所属しているイベントを返す
     * @param {string} userID
     * @param {GetUserEventsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserEvents: async (
      userID: string,
      relation?: GetUserEventsRelationEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userID' is not null or undefined
      assertParamExists("getUserEvents", "userID", userID);
      const localVarPath = `/users/{userID}/events`.replace(
        `{${"userID"}}`,
        encodeURIComponent(String(userID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (relation !== undefined) {
        localVarQueryParameter["relation"] = relation;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * adminsのみ
     * @summary 部屋の使用宣言を更新
     * @param {string} eventID
     * @param {RequestEvent} requestEvent 予約の編集
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEvent: async (
      eventID: string,
      requestEvent: RequestEvent,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'eventID' is not null or undefined
      assertParamExists("updateEvent", "eventID", eventID);
      // verify required parameter 'requestEvent' is not null or undefined
      assertParamExists("updateEvent", "requestEvent", requestEvent);
      const localVarPath = `/events/{eventID}`.replace(
        `{${"eventID"}}`,
        encodeURIComponent(String(eventID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestEvent,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 自分の参加予定を編集
     * @param {string} eventID
     * @param {RequestSchedule} requestSchedule イベントの参加予定を更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSchedule: async (
      eventID: string,
      requestSchedule: RequestSchedule,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'eventID' is not null or undefined
      assertParamExists("updateSchedule", "eventID", eventID);
      // verify required parameter 'requestSchedule' is not null or undefined
      assertParamExists("updateSchedule", "requestSchedule", requestSchedule);
      const localVarPath = `/events/{eventID}/attendees/me`.replace(
        `{${"eventID"}}`,
        encodeURIComponent(String(eventID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestSchedule,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration);
  return {
    /**
     * タグを追加
     * @summary タグを追加
     * @param {string} eventID
     * @param {RequestTag} requestTag イベントにタグを追加
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addEventTag(
      eventID: string,
      requestTag: RequestTag,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addEventTag(
        eventID,
        requestTag,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EventsApi.addEventTag"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 部屋の使用宣言を行う
     * @summary 部屋の使用宣言を行う
     * @param {RequestEvent} requestEvent 予約の編集
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addEvents(
      requestEvent: RequestEvent,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseEventDetail>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addEvents(
        requestEvent,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EventsApi.addEvents"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * adminsのみ
     * @summary 使用宣言を削除
     * @param {string} eventID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteEvent(
      eventID: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEvent(
        eventID,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EventsApi.deleteEvent"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * locked=falseだけ
     * @summary タグを削除
     * @param {string} eventID
     * @param {string} tagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteEventTag(
      eventID: string,
      tagName: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEventTag(
        eventID,
        tagName,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EventsApi.deleteEventTag"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getEventActivities(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ResponseEvent>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEventActivities(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EventsApi.getEventActivities"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 一件取得
     * @summary 一件取得
     * @param {string} eventID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEventDetail(
      eventID: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseEventDetail>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEventDetail(
        eventID,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EventsApi.getEventDetail"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 使用宣言の情報を取得
     * @summary 使用宣言の情報を取得
     * @param {string} [dateBegin] 特定の日時から。
     * @param {string} [dateEnd] 特定の日時まで。
     * @param {string} [q] Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEvents(
      dateBegin?: string,
      dateEnd?: string,
      q?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ResponseEvent>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEvents(
        dateBegin,
        dateEnd,
        q,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EventsApi.getEvents"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * groupIdのeventsを取得
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEventsOfGroup(
      groupID: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ResponseEvent>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEventsOfGroup(groupID, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EventsApi.getEventsOfGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定した部屋で行われるイベントを返す
     * @param {string} roomID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEventsOfRoom(
      roomID: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ResponseEvent>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsOfRoom(
        roomID,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EventsApi.getEventsOfRoom"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 所属しているイベントを返す
     * @param {GetMyEventsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyEvents(
      relation?: GetMyEventsRelationEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ResponseEvent>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMyEvents(
        relation,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EventsApi.getMyEvents"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 所属しているイベントを返す
     * @param {string} userID
     * @param {GetUserEventsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserEvents(
      userID: string,
      relation?: GetUserEventsRelationEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ResponseEvent>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserEvents(
        userID,
        relation,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EventsApi.getUserEvents"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * adminsのみ
     * @summary 部屋の使用宣言を更新
     * @param {string} eventID
     * @param {RequestEvent} requestEvent 予約の編集
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateEvent(
      eventID: string,
      requestEvent: RequestEvent,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseEventDetail>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateEvent(
        eventID,
        requestEvent,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EventsApi.updateEvent"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary 自分の参加予定を編集
     * @param {string} eventID
     * @param {RequestSchedule} requestSchedule イベントの参加予定を更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSchedule(
      eventID: string,
      requestSchedule: RequestSchedule,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateSchedule(
        eventID,
        requestSchedule,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["EventsApi.updateSchedule"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = EventsApiFp(configuration);
  return {
    /**
     * タグを追加
     * @summary タグを追加
     * @param {string} eventID
     * @param {RequestTag} requestTag イベントにタグを追加
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEventTag(
      eventID: string,
      requestTag: RequestTag,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .addEventTag(eventID, requestTag, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 部屋の使用宣言を行う
     * @summary 部屋の使用宣言を行う
     * @param {RequestEvent} requestEvent 予約の編集
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEvents(
      requestEvent: RequestEvent,
      options?: any,
    ): AxiosPromise<ResponseEventDetail> {
      return localVarFp
        .addEvents(requestEvent, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * adminsのみ
     * @summary 使用宣言を削除
     * @param {string} eventID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEvent(eventID: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteEvent(eventID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * locked=falseだけ
     * @summary タグを削除
     * @param {string} eventID
     * @param {string} tagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEventTag(
      eventID: string,
      tagName: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteEventTag(eventID, tagName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getEventActivities(options?: any): AxiosPromise<Array<ResponseEvent>> {
      return localVarFp
        .getEventActivities(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 一件取得
     * @summary 一件取得
     * @param {string} eventID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventDetail(
      eventID: string,
      options?: any,
    ): AxiosPromise<ResponseEventDetail> {
      return localVarFp
        .getEventDetail(eventID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 使用宣言の情報を取得
     * @summary 使用宣言の情報を取得
     * @param {string} [dateBegin] 特定の日時から。
     * @param {string} [dateEnd] 特定の日時まで。
     * @param {string} [q] Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvents(
      dateBegin?: string,
      dateEnd?: string,
      q?: string,
      options?: any,
    ): AxiosPromise<Array<ResponseEvent>> {
      return localVarFp
        .getEvents(dateBegin, dateEnd, q, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * groupIdのeventsを取得
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventsOfGroup(
      groupID: string,
      options?: any,
    ): AxiosPromise<Array<ResponseEvent>> {
      return localVarFp
        .getEventsOfGroup(groupID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定した部屋で行われるイベントを返す
     * @param {string} roomID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventsOfRoom(
      roomID: string,
      options?: any,
    ): AxiosPromise<Array<ResponseEvent>> {
      return localVarFp
        .getEventsOfRoom(roomID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 所属しているイベントを返す
     * @param {GetMyEventsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyEvents(
      relation?: GetMyEventsRelationEnum,
      options?: any,
    ): AxiosPromise<Array<ResponseEvent>> {
      return localVarFp
        .getMyEvents(relation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 所属しているイベントを返す
     * @param {string} userID
     * @param {GetUserEventsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserEvents(
      userID: string,
      relation?: GetUserEventsRelationEnum,
      options?: any,
    ): AxiosPromise<Array<ResponseEvent>> {
      return localVarFp
        .getUserEvents(userID, relation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * adminsのみ
     * @summary 部屋の使用宣言を更新
     * @param {string} eventID
     * @param {RequestEvent} requestEvent 予約の編集
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEvent(
      eventID: string,
      requestEvent: RequestEvent,
      options?: any,
    ): AxiosPromise<ResponseEventDetail> {
      return localVarFp
        .updateEvent(eventID, requestEvent, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 自分の参加予定を編集
     * @param {string} eventID
     * @param {RequestSchedule} requestSchedule イベントの参加予定を更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSchedule(
      eventID: string,
      requestSchedule: RequestSchedule,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateSchedule(eventID, requestSchedule, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
  /**
   * タグを追加
   * @summary タグを追加
   * @param {string} eventID
   * @param {RequestTag} requestTag イベントにタグを追加
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public addEventTag(
    eventID: string,
    requestTag: RequestTag,
    options?: RawAxiosRequestConfig,
  ) {
    return EventsApiFp(this.configuration)
      .addEventTag(eventID, requestTag, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 部屋の使用宣言を行う
   * @summary 部屋の使用宣言を行う
   * @param {RequestEvent} requestEvent 予約の編集
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public addEvents(
    requestEvent: RequestEvent,
    options?: RawAxiosRequestConfig,
  ) {
    return EventsApiFp(this.configuration)
      .addEvents(requestEvent, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * adminsのみ
   * @summary 使用宣言を削除
   * @param {string} eventID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public deleteEvent(eventID: string, options?: RawAxiosRequestConfig) {
    return EventsApiFp(this.configuration)
      .deleteEvent(eventID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * locked=falseだけ
   * @summary タグを削除
   * @param {string} eventID
   * @param {string} tagName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public deleteEventTag(
    eventID: string,
    tagName: string,
    options?: RawAxiosRequestConfig,
  ) {
    return EventsApiFp(this.configuration)
      .deleteEventTag(eventID, tagName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 最近7日間に作成変更削除があったイベントを取得。 削除されたものを含んで返す。
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public getEventActivities(options?: RawAxiosRequestConfig) {
    return EventsApiFp(this.configuration)
      .getEventActivities(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 一件取得
   * @summary 一件取得
   * @param {string} eventID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public getEventDetail(eventID: string, options?: RawAxiosRequestConfig) {
    return EventsApiFp(this.configuration)
      .getEventDetail(eventID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 使用宣言の情報を取得
   * @summary 使用宣言の情報を取得
   * @param {string} [dateBegin] 特定の日時から。
   * @param {string} [dateEnd] 特定の日時まで。
   * @param {string} [q] Syntax: &lt;br&gt; top  : ε | expr, expr : term ( ( \&quot;||\&quot; | \&quot;&amp;&amp;\&quot; ) term)*&lt;br&gt; term : cmp | \&quot;(\&quot; expr \&quot;)\&quot;&lt;br&gt; cmp  : Attr ( \&quot;&#x3D;&#x3D;\&quot; | \&quot;!&#x3D;\&quot; ) UUID&lt;br&gt; Attr : \&quot;event\&quot; | \&quot;user\&quot; | \&quot;group\&quot; | \&quot;tag\&quot;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public getEvents(
    dateBegin?: string,
    dateEnd?: string,
    q?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return EventsApiFp(this.configuration)
      .getEvents(dateBegin, dateEnd, q, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * groupIdのeventsを取得
   * @param {string} groupID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public getEventsOfGroup(groupID: string, options?: RawAxiosRequestConfig) {
    return EventsApiFp(this.configuration)
      .getEventsOfGroup(groupID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定した部屋で行われるイベントを返す
   * @param {string} roomID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public getEventsOfRoom(roomID: string, options?: RawAxiosRequestConfig) {
    return EventsApiFp(this.configuration)
      .getEventsOfRoom(roomID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 所属しているイベントを返す
   * @param {GetMyEventsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public getMyEvents(
    relation?: GetMyEventsRelationEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return EventsApiFp(this.configuration)
      .getMyEvents(relation, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 所属しているイベントを返す
   * @param {string} userID
   * @param {GetUserEventsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public getUserEvents(
    userID: string,
    relation?: GetUserEventsRelationEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return EventsApiFp(this.configuration)
      .getUserEvents(userID, relation, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * adminsのみ
   * @summary 部屋の使用宣言を更新
   * @param {string} eventID
   * @param {RequestEvent} requestEvent 予約の編集
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public updateEvent(
    eventID: string,
    requestEvent: RequestEvent,
    options?: RawAxiosRequestConfig,
  ) {
    return EventsApiFp(this.configuration)
      .updateEvent(eventID, requestEvent, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 自分の参加予定を編集
   * @param {string} eventID
   * @param {RequestSchedule} requestSchedule イベントの参加予定を更新
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public updateSchedule(
    eventID: string,
    requestSchedule: RequestSchedule,
    options?: RawAxiosRequestConfig,
  ) {
    return EventsApiFp(this.configuration)
      .updateSchedule(eventID, requestSchedule, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const GetMyEventsRelationEnum = {
  Admins: "admins",
  Belongs: "belongs",
  BelongsOrAdmins: "belongs-or-admins",
  Attendees: "attendees",
} as const;
export type GetMyEventsRelationEnum =
  (typeof GetMyEventsRelationEnum)[keyof typeof GetMyEventsRelationEnum];
/**
 * @export
 */
export const GetUserEventsRelationEnum = {
  Admins: "admins",
  Belongs: "belongs",
  BelongsOrAdmins: "belongs-or-admins",
  Attendees: "attendees",
} as const;
export type GetUserEventsRelationEnum =
  (typeof GetUserEventsRelationEnum)[keyof typeof GetUserEventsRelationEnum];
