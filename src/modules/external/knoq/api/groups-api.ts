/* tslint:disable */
/* eslint-disable */
/**
 * traP knoQ
 * This is a sample knoQ server.
 *
 * The version of the OpenAPI document: 2.1.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { RequestGroup } from "../model";
// @ts-ignore
import { ResponseGroup } from "../model";
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 自分をメンバーに追加する
     * @summary 自分を追加。open=true
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMeToGroup: async (
      groupID: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupID' is not null or undefined
      assertParamExists("addMeToGroup", "groupID", groupID);
      const localVarPath = `/groups/{groupID}/members/me`.replace(
        `{${"groupID"}}`,
        encodeURIComponent(String(groupID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * グループを作成します。traQのグループとは無関係です。
     * @summary グループ作成
     * @param {RequestGroup} requestGroup グループの追加
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup: async (
      requestGroup: RequestGroup,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestGroup' is not null or undefined
      assertParamExists("createGroup", "requestGroup", requestGroup);
      const localVarPath = `/groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestGroup,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * グループの削除
     * @summary Delete group
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup: async (
      groupID: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupID' is not null or undefined
      assertParamExists("deleteGroup", "groupID", groupID);
      const localVarPath = `/groups/{groupID}`.replace(
        `{${"groupID"}}`,
        encodeURIComponent(String(groupID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分しか削除出来ない。open=true
     * @summary 自分しか削除出来ない。open=true
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeFromGroup: async (
      groupID: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupID' is not null or undefined
      assertParamExists("deleteMeFromGroup", "groupID", groupID);
      const localVarPath = `/groups/{groupID}/members/me`.replace(
        `{${"groupID"}}`,
        encodeURIComponent(String(groupID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 一件取得
     * @summary 一件取得
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup: async (
      groupID: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupID' is not null or undefined
      assertParamExists("getGroup", "groupID", groupID);
      const localVarPath = `/groups/{groupID}`.replace(
        `{${"groupID"}}`,
        encodeURIComponent(String(groupID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * すべてのグループを取得する
     * @summary グループを全て取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分の所属しているグループのIDを返す
     * @param {GetMyGroupsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyGroups: async (
      relation?: GetMyGroupsRelationEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (relation !== undefined) {
        localVarQueryParameter["relation"] = relation;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ユーザーが所属しているグループのIDを返す
     * @param {string} userID
     * @param {GetUserGroupsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroups: async (
      userID: string,
      relation?: GetUserGroupsRelationEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userID' is not null or undefined
      assertParamExists("getUserGroups", "userID", userID);
      const localVarPath = `/users/{userID}/groups`.replace(
        `{${"userID"}}`,
        encodeURIComponent(String(userID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (relation !== undefined) {
        localVarQueryParameter["relation"] = relation;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * adminsのみ変更可能
     * @param {string} groupID
     * @param {RequestGroup} requestGroup グループの追加
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup: async (
      groupID: string,
      requestGroup: RequestGroup,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupID' is not null or undefined
      assertParamExists("updateGroup", "groupID", groupID);
      // verify required parameter 'requestGroup' is not null or undefined
      assertParamExists("updateGroup", "requestGroup", requestGroup);
      const localVarPath = `/groups/{groupID}`.replace(
        `{${"groupID"}}`,
        encodeURIComponent(String(groupID)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestGroup,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration);
  return {
    /**
     * 自分をメンバーに追加する
     * @summary 自分を追加。open=true
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addMeToGroup(
      groupID: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addMeToGroup(
        groupID,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupsApi.addMeToGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * グループを作成します。traQのグループとは無関係です。
     * @summary グループ作成
     * @param {RequestGroup} requestGroup グループの追加
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createGroup(
      requestGroup: RequestGroup,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGroup>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createGroup(
        requestGroup,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupsApi.createGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * グループの削除
     * @summary Delete group
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteGroup(
      groupID: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(
        groupID,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupsApi.deleteGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分しか削除出来ない。open=true
     * @summary 自分しか削除出来ない。open=true
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMeFromGroup(
      groupID: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteMeFromGroup(groupID, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupsApi.deleteMeFromGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 一件取得
     * @summary 一件取得
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGroup(
      groupID: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGroup>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGroup(
        groupID,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupsApi.getGroup"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * すべてのグループを取得する
     * @summary グループを全て取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGroups(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ResponseGroup>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getGroups(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupsApi.getGroups"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分の所属しているグループのIDを返す
     * @param {GetMyGroupsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyGroups(
      relation?: GetMyGroupsRelationEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMyGroups(
        relation,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupsApi.getMyGroups"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * ユーザーが所属しているグループのIDを返す
     * @param {string} userID
     * @param {GetUserGroupsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserGroups(
      userID: string,
      relation?: GetUserGroupsRelationEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGroups(
        userID,
        relation,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupsApi.getUserGroups"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * adminsのみ変更可能
     * @param {string} groupID
     * @param {RequestGroup} requestGroup グループの追加
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateGroup(
      groupID: string,
      requestGroup: RequestGroup,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGroup>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(
        groupID,
        requestGroup,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupsApi.updateGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = GroupsApiFp(configuration);
  return {
    /**
     * 自分をメンバーに追加する
     * @summary 自分を追加。open=true
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMeToGroup(groupID: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .addMeToGroup(groupID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * グループを作成します。traQのグループとは無関係です。
     * @summary グループ作成
     * @param {RequestGroup} requestGroup グループの追加
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(
      requestGroup: RequestGroup,
      options?: any,
    ): AxiosPromise<ResponseGroup> {
      return localVarFp
        .createGroup(requestGroup, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * グループの削除
     * @summary Delete group
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(groupID: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteGroup(groupID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分しか削除出来ない。open=true
     * @summary 自分しか削除出来ない。open=true
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeFromGroup(groupID: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteMeFromGroup(groupID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 一件取得
     * @summary 一件取得
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(groupID: string, options?: any): AxiosPromise<ResponseGroup> {
      return localVarFp
        .getGroup(groupID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * すべてのグループを取得する
     * @summary グループを全て取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(options?: any): AxiosPromise<Array<ResponseGroup>> {
      return localVarFp
        .getGroups(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分の所属しているグループのIDを返す
     * @param {GetMyGroupsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyGroups(
      relation?: GetMyGroupsRelationEnum,
      options?: any,
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .getMyGroups(relation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ユーザーが所属しているグループのIDを返す
     * @param {string} userID
     * @param {GetUserGroupsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroups(
      userID: string,
      relation?: GetUserGroupsRelationEnum,
      options?: any,
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .getUserGroups(userID, relation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * adminsのみ変更可能
     * @param {string} groupID
     * @param {RequestGroup} requestGroup グループの追加
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup(
      groupID: string,
      requestGroup: RequestGroup,
      options?: any,
    ): AxiosPromise<ResponseGroup> {
      return localVarFp
        .updateGroup(groupID, requestGroup, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
  /**
   * 自分をメンバーに追加する
   * @summary 自分を追加。open=true
   * @param {string} groupID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public addMeToGroup(groupID: string, options?: RawAxiosRequestConfig) {
    return GroupsApiFp(this.configuration)
      .addMeToGroup(groupID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * グループを作成します。traQのグループとは無関係です。
   * @summary グループ作成
   * @param {RequestGroup} requestGroup グループの追加
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public createGroup(
    requestGroup: RequestGroup,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupsApiFp(this.configuration)
      .createGroup(requestGroup, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * グループの削除
   * @summary Delete group
   * @param {string} groupID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public deleteGroup(groupID: string, options?: RawAxiosRequestConfig) {
    return GroupsApiFp(this.configuration)
      .deleteGroup(groupID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分しか削除出来ない。open=true
   * @summary 自分しか削除出来ない。open=true
   * @param {string} groupID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public deleteMeFromGroup(groupID: string, options?: RawAxiosRequestConfig) {
    return GroupsApiFp(this.configuration)
      .deleteMeFromGroup(groupID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 一件取得
   * @summary 一件取得
   * @param {string} groupID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public getGroup(groupID: string, options?: RawAxiosRequestConfig) {
    return GroupsApiFp(this.configuration)
      .getGroup(groupID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * すべてのグループを取得する
   * @summary グループを全て取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public getGroups(options?: RawAxiosRequestConfig) {
    return GroupsApiFp(this.configuration)
      .getGroups(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分の所属しているグループのIDを返す
   * @param {GetMyGroupsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public getMyGroups(
    relation?: GetMyGroupsRelationEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupsApiFp(this.configuration)
      .getMyGroups(relation, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ユーザーが所属しているグループのIDを返す
   * @param {string} userID
   * @param {GetUserGroupsRelationEnum} [relation] どのような関係性でユーザーと結びつけるか。 取り得る値は、 admins(ユーザーが管理者), belongs(ユーザーが所属している),  belongs-or-admins(ユーザーが管理者または所属している)  イベントはさらに、attendees(not absent) 値がない場合は、belongs として振る舞う
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public getUserGroups(
    userID: string,
    relation?: GetUserGroupsRelationEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupsApiFp(this.configuration)
      .getUserGroups(userID, relation, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * adminsのみ変更可能
   * @param {string} groupID
   * @param {RequestGroup} requestGroup グループの追加
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupsApi
   */
  public updateGroup(
    groupID: string,
    requestGroup: RequestGroup,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupsApiFp(this.configuration)
      .updateGroup(groupID, requestGroup, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const GetMyGroupsRelationEnum = {
  Admins: "admins",
  Belongs: "belongs",
  BelongsOrAdmins: "belongs-or-admins",
  Attendees: "attendees",
} as const;
export type GetMyGroupsRelationEnum =
  (typeof GetMyGroupsRelationEnum)[keyof typeof GetMyGroupsRelationEnum];
/**
 * @export
 */
export const GetUserGroupsRelationEnum = {
  Admins: "admins",
  Belongs: "belongs",
  BelongsOrAdmins: "belongs-or-admins",
  Attendees: "attendees",
} as const;
export type GetUserGroupsRelationEnum =
  (typeof GetUserGroupsRelationEnum)[keyof typeof GetUserGroupsRelationEnum];
