/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { Ogp } from "../model";
/**
 * OgpApi - axios parameter creator
 * @export
 */
export const OgpApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 指定されたURLのOGP情報のキャッシュを削除します。
     * @summary OGP情報のキャッシュを削除
     * @param {string} url OGPのキャッシュを削除したいURL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOgpCache: async (
      url: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'url' is not null or undefined
      assertParamExists("deleteOgpCache", "url", url);
      const localVarPath = `/ogp/cache`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (url !== undefined) {
        localVarQueryParameter["url"] = url;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定されたURLのOGP情報を取得します。 指定されたURLに対するOGP情報が見つからなかった場合、typeがemptyに設定された空のOGP情報を返します。
     * @summary OGP情報を取得
     * @param {string} url OGPを取得したいURL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOgp: async (
      url: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'url' is not null or undefined
      assertParamExists("getOgp", "url", url);
      const localVarPath = `/ogp`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (url !== undefined) {
        localVarQueryParameter["url"] = url;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OgpApi - functional programming interface
 * @export
 */
export const OgpApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OgpApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定されたURLのOGP情報のキャッシュを削除します。
     * @summary OGP情報のキャッシュを削除
     * @param {string} url OGPのキャッシュを削除したいURL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOgpCache(
      url: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOgpCache(
        url,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OgpApi.deleteOgpCache"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定されたURLのOGP情報を取得します。 指定されたURLに対するOGP情報が見つからなかった場合、typeがemptyに設定された空のOGP情報を返します。
     * @summary OGP情報を取得
     * @param {string} url OGPを取得したいURL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOgp(
      url: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ogp>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOgp(
        url,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OgpApi.getOgp"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * OgpApi - factory interface
 * @export
 */
export const OgpApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OgpApiFp(configuration);
  return {
    /**
     * 指定されたURLのOGP情報のキャッシュを削除します。
     * @summary OGP情報のキャッシュを削除
     * @param {string} url OGPのキャッシュを削除したいURL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOgpCache(url: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteOgpCache(url, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定されたURLのOGP情報を取得します。 指定されたURLに対するOGP情報が見つからなかった場合、typeがemptyに設定された空のOGP情報を返します。
     * @summary OGP情報を取得
     * @param {string} url OGPを取得したいURL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOgp(url: string, options?: any): AxiosPromise<Ogp> {
      return localVarFp
        .getOgp(url, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OgpApi - object-oriented interface
 * @export
 * @class OgpApi
 * @extends {BaseAPI}
 */
export class OgpApi extends BaseAPI {
  /**
   * 指定されたURLのOGP情報のキャッシュを削除します。
   * @summary OGP情報のキャッシュを削除
   * @param {string} url OGPのキャッシュを削除したいURL
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OgpApi
   */
  public deleteOgpCache(url: string, options?: RawAxiosRequestConfig) {
    return OgpApiFp(this.configuration)
      .deleteOgpCache(url, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定されたURLのOGP情報を取得します。 指定されたURLに対するOGP情報が見つからなかった場合、typeがemptyに設定された空のOGP情報を返します。
   * @summary OGP情報を取得
   * @param {string} url OGPを取得したいURL
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OgpApi
   */
  public getOgp(url: string, options?: RawAxiosRequestConfig) {
    return OgpApiFp(this.configuration)
      .getOgp(url, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
