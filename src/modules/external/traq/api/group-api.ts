/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { PatchGroupMemberRequest } from "../model";
// @ts-ignore
import { PatchUserGroupRequest } from "../model";
// @ts-ignore
import { PostUserGroupAdminRequest } from "../model";
// @ts-ignore
import { PostUserGroupRequest } from "../model";
// @ts-ignore
import { UserGroup } from "../model";
// @ts-ignore
import { UserGroupMember } from "../model";
/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループ管理者を追加
     * @param {string} groupId ユーザーグループUUID
     * @param {PostUserGroupAdminRequest} [postUserGroupAdminRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserGroupAdmin: async (
      groupId: string,
      postUserGroupAdminRequest?: PostUserGroupAdminRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("addUserGroupAdmin", "groupId", groupId);
      const localVarPath = `/groups/{groupId}/admins`.replace(
        `{${"groupId"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postUserGroupAdminRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを追加
     * @param {string} groupId ユーザーグループUUID
     * @param {UserGroupMember} [userGroupMember]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserGroupMember: async (
      groupId: string,
      userGroupMember?: UserGroupMember,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("addUserGroupMember", "groupId", groupId);
      const localVarPath = `/groups/{groupId}/members`.replace(
        `{${"groupId"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userGroupMember,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループのアイコンを変更
     * @param {string} groupId ユーザーグループUUID
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserGroupIcon: async (
      groupId: string,
      file: File,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("changeUserGroupIcon", "groupId", groupId);
      // verify required parameter 'file' is not null or undefined
      assertParamExists("changeUserGroupIcon", "file", file);
      const localVarPath = `/groups/{groupId}/icon`.replace(
        `{${"groupId"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
     * @summary ユーザーグループを作成
     * @param {PostUserGroupRequest} [postUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserGroup: async (
      postUserGroupRequest?: PostUserGroupRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postUserGroupRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを削除
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserGroup: async (
      groupId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("deleteUserGroup", "groupId", groupId);
      const localVarPath = `/groups/{groupId}`.replace(
        `{${"groupId"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {PatchUserGroupRequest} [patchUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserGroup: async (
      groupId: string,
      patchUserGroupRequest?: PatchUserGroupRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("editUserGroup", "groupId", groupId);
      const localVarPath = `/groups/{groupId}`.replace(
        `{${"groupId"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchUserGroupRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {PatchGroupMemberRequest} [patchGroupMemberRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserGroupMember: async (
      groupId: string,
      userId: string,
      patchGroupMemberRequest?: PatchGroupMemberRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("editUserGroupMember", "groupId", groupId);
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("editUserGroupMember", "userId", userId);
      const localVarPath = `/groups/{groupId}/members/{userId}`
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
        .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchGroupMemberRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーグループの情報を取得します。
     * @summary ユーザーグループを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroup: async (
      groupId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("getUserGroup", "groupId", groupId);
      const localVarPath = `/groups/{groupId}`.replace(
        `{${"groupId"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したグループの管理者のリストを取得します。
     * @summary グループ管理者を取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupAdmins: async (
      groupId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("getUserGroupAdmins", "groupId", groupId);
      const localVarPath = `/groups/{groupId}/admins`.replace(
        `{${"groupId"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したグループのメンバーのリストを取得します。
     * @summary グループメンバーを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupMembers: async (
      groupId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("getUserGroupMembers", "groupId", groupId);
      const localVarPath = `/groups/{groupId}/members`.replace(
        `{${"groupId"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ユーザーグループのリストを取得します。
     * @summary ユーザーグループのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroups: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
     * @summary グループ管理者を削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserGroupAdmin: async (
      groupId: string,
      userId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("removeUserGroupAdmin", "groupId", groupId);
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("removeUserGroupAdmin", "userId", userId);
      const localVarPath = `/groups/{groupId}/admins/{userId}`
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
        .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserGroupMember: async (
      groupId: string,
      userId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("removeUserGroupMember", "groupId", groupId);
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("removeUserGroupMember", "userId", userId);
      const localVarPath = `/groups/{groupId}/members/{userId}`
        .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
        .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GroupApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループ管理者を追加
     * @param {string} groupId ユーザーグループUUID
     * @param {PostUserGroupAdminRequest} [postUserGroupAdminRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addUserGroupAdmin(
      groupId: string,
      postUserGroupAdminRequest?: PostUserGroupAdminRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addUserGroupAdmin(
          groupId,
          postUserGroupAdminRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.addUserGroupAdmin"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを追加
     * @param {string} groupId ユーザーグループUUID
     * @param {UserGroupMember} [userGroupMember]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addUserGroupMember(
      groupId: string,
      userGroupMember?: UserGroupMember,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addUserGroupMember(
          groupId,
          userGroupMember,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.addUserGroupMember"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループのアイコンを変更
     * @param {string} groupId ユーザーグループUUID
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeUserGroupIcon(
      groupId: string,
      file: File,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.changeUserGroupIcon(
          groupId,
          file,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.changeUserGroupIcon"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
     * @summary ユーザーグループを作成
     * @param {PostUserGroupRequest} [postUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUserGroup(
      postUserGroupRequest?: PostUserGroupRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroup>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUserGroup(
        postUserGroupRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.createUserGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを削除
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserGroup(
      groupId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserGroup(
        groupId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.deleteUserGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {PatchUserGroupRequest} [patchUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editUserGroup(
      groupId: string,
      patchUserGroupRequest?: PatchUserGroupRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editUserGroup(
        groupId,
        patchUserGroupRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.editUserGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {PatchGroupMemberRequest} [patchGroupMemberRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editUserGroupMember(
      groupId: string,
      userId: string,
      patchGroupMemberRequest?: PatchGroupMemberRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.editUserGroupMember(
          groupId,
          userId,
          patchGroupMemberRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.editUserGroupMember"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーグループの情報を取得します。
     * @summary ユーザーグループを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserGroup(
      groupId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroup>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGroup(
        groupId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.getUserGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したグループの管理者のリストを取得します。
     * @summary グループ管理者を取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserGroupAdmins(
      groupId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserGroupAdmins(groupId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.getUserGroupAdmins"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したグループのメンバーのリストを取得します。
     * @summary グループメンバーを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserGroupMembers(
      groupId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<UserGroupMember>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserGroupMembers(groupId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.getUserGroupMembers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * ユーザーグループのリストを取得します。
     * @summary ユーザーグループのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserGroups(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<UserGroup>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserGroups(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.getUserGroups"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
     * @summary グループ管理者を削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserGroupAdmin(
      groupId: string,
      userId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.removeUserGroupAdmin(
          groupId,
          userId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.removeUserGroupAdmin"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserGroupMember(
      groupId: string,
      userId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.removeUserGroupMember(
          groupId,
          userId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.removeUserGroupMember"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = GroupApiFp(configuration);
  return {
    /**
     * 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループ管理者を追加
     * @param {string} groupId ユーザーグループUUID
     * @param {PostUserGroupAdminRequest} [postUserGroupAdminRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserGroupAdmin(
      groupId: string,
      postUserGroupAdminRequest?: PostUserGroupAdminRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .addUserGroupAdmin(groupId, postUserGroupAdminRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを追加
     * @param {string} groupId ユーザーグループUUID
     * @param {UserGroupMember} [userGroupMember]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserGroupMember(
      groupId: string,
      userGroupMember?: UserGroupMember,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .addUserGroupMember(groupId, userGroupMember, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループのアイコンを変更
     * @param {string} groupId ユーザーグループUUID
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserGroupIcon(
      groupId: string,
      file: File,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .changeUserGroupIcon(groupId, file, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
     * @summary ユーザーグループを作成
     * @param {PostUserGroupRequest} [postUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserGroup(
      postUserGroupRequest?: PostUserGroupRequest,
      options?: any,
    ): AxiosPromise<UserGroup> {
      return localVarFp
        .createUserGroup(postUserGroupRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを削除
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserGroup(groupId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteUserGroup(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {PatchUserGroupRequest} [patchUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserGroup(
      groupId: string,
      patchUserGroupRequest?: PatchUserGroupRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editUserGroup(groupId, patchUserGroupRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {PatchGroupMemberRequest} [patchGroupMemberRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserGroupMember(
      groupId: string,
      userId: string,
      patchGroupMemberRequest?: PatchGroupMemberRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editUserGroupMember(groupId, userId, patchGroupMemberRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーグループの情報を取得します。
     * @summary ユーザーグループを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroup(groupId: string, options?: any): AxiosPromise<UserGroup> {
      return localVarFp
        .getUserGroup(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したグループの管理者のリストを取得します。
     * @summary グループ管理者を取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupAdmins(
      groupId: string,
      options?: any,
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .getUserGroupAdmins(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したグループのメンバーのリストを取得します。
     * @summary グループメンバーを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupMembers(
      groupId: string,
      options?: any,
    ): AxiosPromise<Array<UserGroupMember>> {
      return localVarFp
        .getUserGroupMembers(groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ユーザーグループのリストを取得します。
     * @summary ユーザーグループのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroups(options?: any): AxiosPromise<Array<UserGroup>> {
      return localVarFp
        .getUserGroups(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
     * @summary グループ管理者を削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserGroupAdmin(
      groupId: string,
      userId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .removeUserGroupAdmin(groupId, userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserGroupMember(
      groupId: string,
      userId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .removeUserGroupMember(groupId, userId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI {
  /**
   * 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
   * @summary グループ管理者を追加
   * @param {string} groupId ユーザーグループUUID
   * @param {PostUserGroupAdminRequest} [postUserGroupAdminRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public addUserGroupAdmin(
    groupId: string,
    postUserGroupAdminRequest?: PostUserGroupAdminRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .addUserGroupAdmin(groupId, postUserGroupAdminRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
   * @summary グループメンバーを追加
   * @param {string} groupId ユーザーグループUUID
   * @param {UserGroupMember} [userGroupMember]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public addUserGroupMember(
    groupId: string,
    userGroupMember?: UserGroupMember,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .addUserGroupMember(groupId, userGroupMember, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
   * @summary ユーザーグループのアイコンを変更
   * @param {string} groupId ユーザーグループUUID
   * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public changeUserGroupIcon(
    groupId: string,
    file: File,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .changeUserGroupIcon(groupId, file, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
   * @summary ユーザーグループを作成
   * @param {PostUserGroupRequest} [postUserGroupRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public createUserGroup(
    postUserGroupRequest?: PostUserGroupRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .createUserGroup(postUserGroupRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
   * @summary ユーザーグループを削除
   * @param {string} groupId ユーザーグループUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public deleteUserGroup(groupId: string, options?: RawAxiosRequestConfig) {
    return GroupApiFp(this.configuration)
      .deleteUserGroup(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
   * @summary ユーザーグループを編集
   * @param {string} groupId ユーザーグループUUID
   * @param {PatchUserGroupRequest} [patchUserGroupRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public editUserGroup(
    groupId: string,
    patchUserGroupRequest?: PatchUserGroupRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .editUserGroup(groupId, patchUserGroupRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
   * @summary グループメンバーを編集
   * @param {string} groupId ユーザーグループUUID
   * @param {string} userId ユーザーUUID
   * @param {PatchGroupMemberRequest} [patchGroupMemberRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public editUserGroupMember(
    groupId: string,
    userId: string,
    patchGroupMemberRequest?: PatchGroupMemberRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .editUserGroupMember(groupId, userId, patchGroupMemberRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーグループの情報を取得します。
   * @summary ユーザーグループを取得
   * @param {string} groupId ユーザーグループUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public getUserGroup(groupId: string, options?: RawAxiosRequestConfig) {
    return GroupApiFp(this.configuration)
      .getUserGroup(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したグループの管理者のリストを取得します。
   * @summary グループ管理者を取得
   * @param {string} groupId ユーザーグループUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public getUserGroupAdmins(groupId: string, options?: RawAxiosRequestConfig) {
    return GroupApiFp(this.configuration)
      .getUserGroupAdmins(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したグループのメンバーのリストを取得します。
   * @summary グループメンバーを取得
   * @param {string} groupId ユーザーグループUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public getUserGroupMembers(groupId: string, options?: RawAxiosRequestConfig) {
    return GroupApiFp(this.configuration)
      .getUserGroupMembers(groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ユーザーグループのリストを取得します。
   * @summary ユーザーグループのリストを取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public getUserGroups(options?: RawAxiosRequestConfig) {
    return GroupApiFp(this.configuration)
      .getUserGroups(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
   * @summary グループ管理者を削除
   * @param {string} groupId ユーザーグループUUID
   * @param {string} userId ユーザーUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public removeUserGroupAdmin(
    groupId: string,
    userId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .removeUserGroupAdmin(groupId, userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
   * @summary グループメンバーを削除
   * @param {string} groupId ユーザーグループUUID
   * @param {string} userId ユーザーUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public removeUserGroupMember(
    groupId: string,
    userId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .removeUserGroupMember(groupId, userId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
