/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { ExternalProviderUser } from "../model";
// @ts-ignore
import { LoginSession } from "../model";
// @ts-ignore
import { PostLinkExternalAccount } from "../model";
// @ts-ignore
import { PostLoginRequest } from "../model";
// @ts-ignore
import { PostUnlinkExternalAccount } from "../model";
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 自分に紐付けられている外部ログインアカウント一覧を取得します。
     * @summary 外部ログインアカウント一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyExternalAccounts: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/ex-accounts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分のログインセッションのリストを取得します。
     * @summary 自分のログインセッションリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMySessions: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/sessions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分に外部ログインアカウントを紐付けます。 指定した`providerName`がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
     * @summary 外部ログインアカウントを紐付ける
     * @param {PostLinkExternalAccount} [postLinkExternalAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkExternalAccount: async (
      postLinkExternalAccount?: PostLinkExternalAccount,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/ex-accounts/link`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postLinkExternalAccount,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ログインします。
     * @summary ログイン
     * @param {string} [redirect] リダイレクト先
     * @param {PostLoginRequest} [postLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (
      redirect?: string,
      postLoginRequest?: PostLoginRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (redirect !== undefined) {
        localVarQueryParameter["redirect"] = redirect;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postLoginRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ログアウトします。
     * @summary ログアウト
     * @param {string} [redirect] リダイレクト先
     * @param {boolean} [all] 全てのセッションでログアウトするかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: async (
      redirect?: string,
      all?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (redirect !== undefined) {
        localVarQueryParameter["redirect"] = redirect;
      }

      if (all !== undefined) {
        localVarQueryParameter["all"] = all;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も`204`を返します。
     * @summary セッションを無効化
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMySession: async (
      sessionId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists("revokeMySession", "sessionId", sessionId);
      const localVarPath = `/users/me/sessions/{sessionId}`.replace(
        `{${"sessionId"}}`,
        encodeURIComponent(String(sessionId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
     * @summary 外部ログインアカウントの紐付けを解除
     * @param {PostUnlinkExternalAccount} [postUnlinkExternalAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkExternalAccount: async (
      postUnlinkExternalAccount?: PostUnlinkExternalAccount,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/ex-accounts/unlink`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postUnlinkExternalAccount,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AuthenticationApiAxiosParamCreator(configuration);
  return {
    /**
     * 自分に紐付けられている外部ログインアカウント一覧を取得します。
     * @summary 外部ログインアカウント一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyExternalAccounts(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ExternalProviderUser>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyExternalAccounts(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.getMyExternalAccounts"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分のログインセッションのリストを取得します。
     * @summary 自分のログインセッションリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMySessions(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<LoginSession>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMySessions(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.getMySessions"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分に外部ログインアカウントを紐付けます。 指定した`providerName`がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
     * @summary 外部ログインアカウントを紐付ける
     * @param {PostLinkExternalAccount} [postLinkExternalAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async linkExternalAccount(
      postLinkExternalAccount?: PostLinkExternalAccount,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.linkExternalAccount(
          postLinkExternalAccount,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.linkExternalAccount"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * ログインします。
     * @summary ログイン
     * @param {string} [redirect] リダイレクト先
     * @param {PostLoginRequest} [postLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      redirect?: string,
      postLoginRequest?: PostLoginRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(
        redirect,
        postLoginRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.login"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * ログアウトします。
     * @summary ログアウト
     * @param {string} [redirect] リダイレクト先
     * @param {boolean} [all] 全てのセッションでログアウトするかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logout(
      redirect?: string,
      all?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logout(
        redirect,
        all,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.logout"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も`204`を返します。
     * @summary セッションを無効化
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async revokeMySession(
      sessionId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.revokeMySession(
        sessionId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.revokeMySession"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
     * @summary 外部ログインアカウントの紐付けを解除
     * @param {PostUnlinkExternalAccount} [postUnlinkExternalAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unlinkExternalAccount(
      postUnlinkExternalAccount?: PostUnlinkExternalAccount,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.unlinkExternalAccount(
          postUnlinkExternalAccount,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.unlinkExternalAccount"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthenticationApiFp(configuration);
  return {
    /**
     * 自分に紐付けられている外部ログインアカウント一覧を取得します。
     * @summary 外部ログインアカウント一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyExternalAccounts(
      options?: any,
    ): AxiosPromise<Array<ExternalProviderUser>> {
      return localVarFp
        .getMyExternalAccounts(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分のログインセッションのリストを取得します。
     * @summary 自分のログインセッションリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMySessions(options?: any): AxiosPromise<Array<LoginSession>> {
      return localVarFp
        .getMySessions(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分に外部ログインアカウントを紐付けます。 指定した`providerName`がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
     * @summary 外部ログインアカウントを紐付ける
     * @param {PostLinkExternalAccount} [postLinkExternalAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkExternalAccount(
      postLinkExternalAccount?: PostLinkExternalAccount,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .linkExternalAccount(postLinkExternalAccount, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ログインします。
     * @summary ログイン
     * @param {string} [redirect] リダイレクト先
     * @param {PostLoginRequest} [postLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(
      redirect?: string,
      postLoginRequest?: PostLoginRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .login(redirect, postLoginRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ログアウトします。
     * @summary ログアウト
     * @param {string} [redirect] リダイレクト先
     * @param {boolean} [all] 全てのセッションでログアウトするかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(
      redirect?: string,
      all?: boolean,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .logout(redirect, all, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も`204`を返します。
     * @summary セッションを無効化
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMySession(sessionId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .revokeMySession(sessionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
     * @summary 外部ログインアカウントの紐付けを解除
     * @param {PostUnlinkExternalAccount} [postUnlinkExternalAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkExternalAccount(
      postUnlinkExternalAccount?: PostUnlinkExternalAccount,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .unlinkExternalAccount(postUnlinkExternalAccount, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
  /**
   * 自分に紐付けられている外部ログインアカウント一覧を取得します。
   * @summary 外部ログインアカウント一覧を取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public getMyExternalAccounts(options?: RawAxiosRequestConfig) {
    return AuthenticationApiFp(this.configuration)
      .getMyExternalAccounts(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分のログインセッションのリストを取得します。
   * @summary 自分のログインセッションリストを取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public getMySessions(options?: RawAxiosRequestConfig) {
    return AuthenticationApiFp(this.configuration)
      .getMySessions(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分に外部ログインアカウントを紐付けます。 指定した`providerName`がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
   * @summary 外部ログインアカウントを紐付ける
   * @param {PostLinkExternalAccount} [postLinkExternalAccount]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public linkExternalAccount(
    postLinkExternalAccount?: PostLinkExternalAccount,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthenticationApiFp(this.configuration)
      .linkExternalAccount(postLinkExternalAccount, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ログインします。
   * @summary ログイン
   * @param {string} [redirect] リダイレクト先
   * @param {PostLoginRequest} [postLoginRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public login(
    redirect?: string,
    postLoginRequest?: PostLoginRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthenticationApiFp(this.configuration)
      .login(redirect, postLoginRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ログアウトします。
   * @summary ログアウト
   * @param {string} [redirect] リダイレクト先
   * @param {boolean} [all] 全てのセッションでログアウトするかどうか
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public logout(
    redirect?: string,
    all?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthenticationApiFp(this.configuration)
      .logout(redirect, all, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も`204`を返します。
   * @summary セッションを無効化
   * @param {string} sessionId セッションUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public revokeMySession(sessionId: string, options?: RawAxiosRequestConfig) {
    return AuthenticationApiFp(this.configuration)
      .revokeMySession(sessionId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
   * @summary 外部ログインアカウントの紐付けを解除
   * @param {PostUnlinkExternalAccount} [postUnlinkExternalAccount]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public unlinkExternalAccount(
    postUnlinkExternalAccount?: PostUnlinkExternalAccount,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthenticationApiFp(this.configuration)
      .unlinkExternalAccount(postUnlinkExternalAccount, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
