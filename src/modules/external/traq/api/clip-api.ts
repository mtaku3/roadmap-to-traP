/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { ClipFolder } from "../model";
// @ts-ignore
import { ClippedMessage } from "../model";
// @ts-ignore
import { MessageClip } from "../model";
// @ts-ignore
import { PatchClipFolderRequest } from "../model";
// @ts-ignore
import { PostClipFolderMessageRequest } from "../model";
// @ts-ignore
import { PostClipFolderRequest } from "../model";
/**
 * ClipApi - axios parameter creator
 * @export
 */
export const ClipApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 指定したメッセージを指定したクリップフォルダに追加します。
     * @summary メッセージをクリップフォルダに追加
     * @param {string} folderId クリップフォルダUUID
     * @param {PostClipFolderMessageRequest} [postClipFolderMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clipMessage: async (
      folderId: string,
      postClipFolderMessageRequest?: PostClipFolderMessageRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'folderId' is not null or undefined
      assertParamExists("clipMessage", "folderId", folderId);
      const localVarPath = `/clip-folders/{folderId}/messages`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postClipFolderMessageRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
     * @summary クリップフォルダを作成
     * @param {PostClipFolderRequest} [postClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClipFolder: async (
      postClipFolderRequest?: PostClipFolderRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/clip-folders`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postClipFolderRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したクリップフォルダを削除します。
     * @summary クリップフォルダを削除
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClipFolder: async (
      folderId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'folderId' is not null or undefined
      assertParamExists("deleteClipFolder", "folderId", folderId);
      const localVarPath = `/clip-folders/{folderId}`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したクリップフォルダの情報を編集します。
     * @summary クリップフォルダ情報を編集
     * @param {string} folderId クリップフォルダUUID
     * @param {PatchClipFolderRequest} [patchClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editClipFolder: async (
      folderId: string,
      patchClipFolderRequest?: PatchClipFolderRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'folderId' is not null or undefined
      assertParamExists("editClipFolder", "folderId", folderId);
      const localVarPath = `/clip-folders/{folderId}`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchClipFolderRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したクリップフォルダの情報を取得します。
     * @summary クリップフォルダ情報を取得
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolder: async (
      folderId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'folderId' is not null or undefined
      assertParamExists("getClipFolder", "folderId", folderId);
      const localVarPath = `/clip-folders/{folderId}`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自身が所有するクリップフォルダのリストを取得します。
     * @summary クリップフォルダのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolders: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/clip-folders`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したフォルダ内のクリップのリストを取得します。 `order`を指定しない場合、クリップした日時の新しい順で返されます。
     * @summary フォルダ内のクリップのリストを取得
     * @param {string} folderId クリップフォルダUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {GetClipsOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClips: async (
      folderId: string,
      limit?: number,
      offset?: number,
      order?: GetClipsOrderEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'folderId' is not null or undefined
      assertParamExists("getClips", "folderId", folderId);
      const localVarPath = `/clip-folders/{folderId}/messages`.replace(
        `{${"folderId"}}`,
        encodeURIComponent(String(folderId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 対象のメッセージの自分のクリップの一覧を返します。
     * @summary 自分のクリップを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageClips: async (
      messageId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("getMessageClips", "messageId", messageId);
      const localVarPath = `/messages/{messageId}/clips`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
     * @summary メッセージをクリップフォルダから除外
     * @param {string} folderId クリップフォルダUUID
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unclipMessage: async (
      folderId: string,
      messageId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'folderId' is not null or undefined
      assertParamExists("unclipMessage", "folderId", folderId);
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("unclipMessage", "messageId", messageId);
      const localVarPath = `/clip-folders/{folderId}/messages/{messageId}`
        .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)))
        .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ClipApi - functional programming interface
 * @export
 */
export const ClipApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ClipApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したメッセージを指定したクリップフォルダに追加します。
     * @summary メッセージをクリップフォルダに追加
     * @param {string} folderId クリップフォルダUUID
     * @param {PostClipFolderMessageRequest} [postClipFolderMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async clipMessage(
      folderId: string,
      postClipFolderMessageRequest?: PostClipFolderMessageRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClippedMessage>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.clipMessage(
        folderId,
        postClipFolderMessageRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ClipApi.clipMessage"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
     * @summary クリップフォルダを作成
     * @param {PostClipFolderRequest} [postClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createClipFolder(
      postClipFolderRequest?: PostClipFolderRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipFolder>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createClipFolder(
          postClipFolderRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ClipApi.createClipFolder"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したクリップフォルダを削除します。
     * @summary クリップフォルダを削除
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteClipFolder(
      folderId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteClipFolder(folderId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ClipApi.deleteClipFolder"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したクリップフォルダの情報を編集します。
     * @summary クリップフォルダ情報を編集
     * @param {string} folderId クリップフォルダUUID
     * @param {PatchClipFolderRequest} [patchClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editClipFolder(
      folderId: string,
      patchClipFolderRequest?: PatchClipFolderRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editClipFolder(
        folderId,
        patchClipFolderRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ClipApi.editClipFolder"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したクリップフォルダの情報を取得します。
     * @summary クリップフォルダ情報を取得
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getClipFolder(
      folderId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipFolder>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getClipFolder(
        folderId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ClipApi.getClipFolder"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自身が所有するクリップフォルダのリストを取得します。
     * @summary クリップフォルダのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getClipFolders(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ClipFolder>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getClipFolders(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ClipApi.getClipFolders"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したフォルダ内のクリップのリストを取得します。 `order`を指定しない場合、クリップした日時の新しい順で返されます。
     * @summary フォルダ内のクリップのリストを取得
     * @param {string} folderId クリップフォルダUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {GetClipsOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getClips(
      folderId: string,
      limit?: number,
      offset?: number,
      order?: GetClipsOrderEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ClippedMessage>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getClips(
        folderId,
        limit,
        offset,
        order,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ClipApi.getClips"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 対象のメッセージの自分のクリップの一覧を返します。
     * @summary 自分のクリップを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessageClips(
      messageId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<MessageClip>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageClips(
        messageId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ClipApi.getMessageClips"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
     * @summary メッセージをクリップフォルダから除外
     * @param {string} folderId クリップフォルダUUID
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unclipMessage(
      folderId: string,
      messageId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unclipMessage(
        folderId,
        messageId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ClipApi.unclipMessage"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ClipApi - factory interface
 * @export
 */
export const ClipApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ClipApiFp(configuration);
  return {
    /**
     * 指定したメッセージを指定したクリップフォルダに追加します。
     * @summary メッセージをクリップフォルダに追加
     * @param {string} folderId クリップフォルダUUID
     * @param {PostClipFolderMessageRequest} [postClipFolderMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clipMessage(
      folderId: string,
      postClipFolderMessageRequest?: PostClipFolderMessageRequest,
      options?: any,
    ): AxiosPromise<ClippedMessage> {
      return localVarFp
        .clipMessage(folderId, postClipFolderMessageRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
     * @summary クリップフォルダを作成
     * @param {PostClipFolderRequest} [postClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClipFolder(
      postClipFolderRequest?: PostClipFolderRequest,
      options?: any,
    ): AxiosPromise<ClipFolder> {
      return localVarFp
        .createClipFolder(postClipFolderRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したクリップフォルダを削除します。
     * @summary クリップフォルダを削除
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClipFolder(folderId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteClipFolder(folderId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したクリップフォルダの情報を編集します。
     * @summary クリップフォルダ情報を編集
     * @param {string} folderId クリップフォルダUUID
     * @param {PatchClipFolderRequest} [patchClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editClipFolder(
      folderId: string,
      patchClipFolderRequest?: PatchClipFolderRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editClipFolder(folderId, patchClipFolderRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したクリップフォルダの情報を取得します。
     * @summary クリップフォルダ情報を取得
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolder(folderId: string, options?: any): AxiosPromise<ClipFolder> {
      return localVarFp
        .getClipFolder(folderId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自身が所有するクリップフォルダのリストを取得します。
     * @summary クリップフォルダのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolders(options?: any): AxiosPromise<Array<ClipFolder>> {
      return localVarFp
        .getClipFolders(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したフォルダ内のクリップのリストを取得します。 `order`を指定しない場合、クリップした日時の新しい順で返されます。
     * @summary フォルダ内のクリップのリストを取得
     * @param {string} folderId クリップフォルダUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {GetClipsOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClips(
      folderId: string,
      limit?: number,
      offset?: number,
      order?: GetClipsOrderEnum,
      options?: any,
    ): AxiosPromise<Array<ClippedMessage>> {
      return localVarFp
        .getClips(folderId, limit, offset, order, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 対象のメッセージの自分のクリップの一覧を返します。
     * @summary 自分のクリップを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageClips(
      messageId: string,
      options?: any,
    ): AxiosPromise<Array<MessageClip>> {
      return localVarFp
        .getMessageClips(messageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
     * @summary メッセージをクリップフォルダから除外
     * @param {string} folderId クリップフォルダUUID
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unclipMessage(
      folderId: string,
      messageId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .unclipMessage(folderId, messageId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ClipApi - object-oriented interface
 * @export
 * @class ClipApi
 * @extends {BaseAPI}
 */
export class ClipApi extends BaseAPI {
  /**
   * 指定したメッセージを指定したクリップフォルダに追加します。
   * @summary メッセージをクリップフォルダに追加
   * @param {string} folderId クリップフォルダUUID
   * @param {PostClipFolderMessageRequest} [postClipFolderMessageRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClipApi
   */
  public clipMessage(
    folderId: string,
    postClipFolderMessageRequest?: PostClipFolderMessageRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ClipApiFp(this.configuration)
      .clipMessage(folderId, postClipFolderMessageRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
   * @summary クリップフォルダを作成
   * @param {PostClipFolderRequest} [postClipFolderRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClipApi
   */
  public createClipFolder(
    postClipFolderRequest?: PostClipFolderRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ClipApiFp(this.configuration)
      .createClipFolder(postClipFolderRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したクリップフォルダを削除します。
   * @summary クリップフォルダを削除
   * @param {string} folderId クリップフォルダUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClipApi
   */
  public deleteClipFolder(folderId: string, options?: RawAxiosRequestConfig) {
    return ClipApiFp(this.configuration)
      .deleteClipFolder(folderId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したクリップフォルダの情報を編集します。
   * @summary クリップフォルダ情報を編集
   * @param {string} folderId クリップフォルダUUID
   * @param {PatchClipFolderRequest} [patchClipFolderRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClipApi
   */
  public editClipFolder(
    folderId: string,
    patchClipFolderRequest?: PatchClipFolderRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ClipApiFp(this.configuration)
      .editClipFolder(folderId, patchClipFolderRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したクリップフォルダの情報を取得します。
   * @summary クリップフォルダ情報を取得
   * @param {string} folderId クリップフォルダUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClipApi
   */
  public getClipFolder(folderId: string, options?: RawAxiosRequestConfig) {
    return ClipApiFp(this.configuration)
      .getClipFolder(folderId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自身が所有するクリップフォルダのリストを取得します。
   * @summary クリップフォルダのリストを取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClipApi
   */
  public getClipFolders(options?: RawAxiosRequestConfig) {
    return ClipApiFp(this.configuration)
      .getClipFolders(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したフォルダ内のクリップのリストを取得します。 `order`を指定しない場合、クリップした日時の新しい順で返されます。
   * @summary フォルダ内のクリップのリストを取得
   * @param {string} folderId クリップフォルダUUID
   * @param {number} [limit] 取得する件数
   * @param {number} [offset] 取得するオフセット
   * @param {GetClipsOrderEnum} [order] 昇順か降順か
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClipApi
   */
  public getClips(
    folderId: string,
    limit?: number,
    offset?: number,
    order?: GetClipsOrderEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return ClipApiFp(this.configuration)
      .getClips(folderId, limit, offset, order, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 対象のメッセージの自分のクリップの一覧を返します。
   * @summary 自分のクリップを取得
   * @param {string} messageId メッセージUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClipApi
   */
  public getMessageClips(messageId: string, options?: RawAxiosRequestConfig) {
    return ClipApiFp(this.configuration)
      .getMessageClips(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
   * @summary メッセージをクリップフォルダから除外
   * @param {string} folderId クリップフォルダUUID
   * @param {string} messageId メッセージUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClipApi
   */
  public unclipMessage(
    folderId: string,
    messageId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ClipApiFp(this.configuration)
      .unclipMessage(folderId, messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const GetClipsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type GetClipsOrderEnum =
  (typeof GetClipsOrderEnum)[keyof typeof GetClipsOrderEnum];
