/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { DMChannel } from "../model";
// @ts-ignore
import { Message } from "../model";
// @ts-ignore
import { PatchUserRequest } from "../model";
// @ts-ignore
import { PatchUserTagRequest } from "../model";
// @ts-ignore
import { PostMessageRequest } from "../model";
// @ts-ignore
import { PostUserRequest } from "../model";
// @ts-ignore
import { PostUserTagRequest } from "../model";
// @ts-ignore
import { PutUserPasswordRequest } from "../model";
// @ts-ignore
import { User } from "../model";
// @ts-ignore
import { UserDetail } from "../model";
// @ts-ignore
import { UserStats } from "../model";
// @ts-ignore
import { UserTag } from "../model";
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserTag: async (
      userId: string,
      postUserTagRequest?: PostUserTagRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("addUserTag", "userId", userId);
      const localVarPath = `/users/{userId}/tags`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postUserTagRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
     * @summary ユーザーのアイコン画像を変更します
     * @param {string} userId ユーザーUUID
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserIcon: async (
      userId: string,
      file: File,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("changeUserIcon", "userId", userId);
      // verify required parameter 'file' is not null or undefined
      assertParamExists("changeUserIcon", "file", file);
      const localVarPath = `/users/{userId}/icon`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
     * @summary ユーザーのパスワードを変更
     * @param {string} userId ユーザーUUID
     * @param {PutUserPasswordRequest} [putUserPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserPassword: async (
      userId: string,
      putUserPasswordRequest?: PutUserPasswordRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("changeUserPassword", "userId", userId);
      const localVarPath = `/users/{userId}/password`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        putUserPasswordRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ユーザーを登録します。 管理者権限が必要です。
     * @summary ユーザーを登録
     * @param {PostUserRequest} [postUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: async (
      postUserRequest?: PostUserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postUserRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーの情報を変更します。 管理者権限が必要です。
     * @summary ユーザー情報を変更
     * @param {string} userId ユーザーUUID
     * @param {PatchUserRequest} [patchUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUser: async (
      userId: string,
      patchUserRequest?: PatchUserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("editUser", "userId", userId);
      const localVarPath = `/users/{userId}`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchUserRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
     * @summary ユーザーのタグを編集
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserTag: async (
      userId: string,
      tagId: string,
      patchUserTagRequest?: PatchUserTagRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("editUserTag", "userId", userId);
      // verify required parameter 'tagId' is not null or undefined
      assertParamExists("editUserTag", "tagId", tagId);
      const localVarPath = `/users/{userId}/tags/{tagId}`
        .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
        .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchUserTagRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetDirectMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDirectMessages: async (
      userId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetDirectMessagesOrderEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("getDirectMessages", "userId", userId);
      const localVarPath = `/users/{userId}/messages`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (since !== undefined) {
        localVarQueryParameter["since"] =
          (since as any) instanceof Date ? (since as any).toISOString() : since;
      }

      if (until !== undefined) {
        localVarQueryParameter["until"] =
          (until as any) instanceof Date ? (until as any).toISOString() : until;
      }

      if (inclusive !== undefined) {
        localVarQueryParameter["inclusive"] = inclusive;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーの詳細情報を取得します。
     * @summary ユーザー詳細情報を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (
      userId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("getUser", "userId", userId);
      const localVarPath = `/users/{userId}`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
     * @summary DMチャンネル情報を取得
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDMChannel: async (
      userId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("getUserDMChannel", "userId", userId);
      const localVarPath = `/users/{userId}/dm-channel`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @summary ユーザーのアイコン画像を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserIcon: async (
      userId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("getUserIcon", "userId", userId);
      const localVarPath = `/users/{userId}/icon`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーの統計情報を取得します。
     * @summary ユーザー統計情報を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserStats: async (
      userId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("getUserStats", "userId", userId);
      const localVarPath = `/users/{userId}/stats`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTags: async (
      userId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("getUserTags", "userId", userId);
      const localVarPath = `/users/{userId}/tags`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ユーザーのリストを取得します。 `include-suspended`を指定しない場合、レスポンスにはユーザーアカウント状態が\"1: 有効\"であるユーザーのみが含まれます。 `include-suspended`と`name`を同時に指定することはできません。
     * @summary ユーザーのリストを取得
     * @param {boolean} [includeSuspended] アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか
     * @param {string} [name] 名前が一致するアカウントのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: async (
      includeSuspended?: boolean,
      name?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (includeSuspended !== undefined) {
        localVarQueryParameter["include-suspended"] = includeSuspended;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDirectMessage: async (
      userId: string,
      postMessageRequest?: PostMessageRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("postDirectMessage", "userId", userId);
      const localVarPath = `/users/{userId}/messages`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postMessageRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserTag: async (
      userId: string,
      tagId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("removeUserTag", "userId", userId);
      // verify required parameter 'tagId' is not null or undefined
      assertParamExists("removeUserTag", "tagId", tagId);
      const localVarPath = `/users/{userId}/tags/{tagId}`
        .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
        .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addUserTag(
      userId: string,
      postUserTagRequest?: PostUserTagRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTag>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addUserTag(
        userId,
        postUserTagRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.addUserTag"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
     * @summary ユーザーのアイコン画像を変更します
     * @param {string} userId ユーザーUUID
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeUserIcon(
      userId: string,
      file: File,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.changeUserIcon(
        userId,
        file,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.changeUserIcon"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
     * @summary ユーザーのパスワードを変更
     * @param {string} userId ユーザーUUID
     * @param {PutUserPasswordRequest} [putUserPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeUserPassword(
      userId: string,
      putUserPasswordRequest?: PutUserPasswordRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.changeUserPassword(
          userId,
          putUserPasswordRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.changeUserPassword"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * ユーザーを登録します。 管理者権限が必要です。
     * @summary ユーザーを登録
     * @param {PostUserRequest} [postUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUser(
      postUserRequest?: PostUserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(
        postUserRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.createUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーの情報を変更します。 管理者権限が必要です。
     * @summary ユーザー情報を変更
     * @param {string} userId ユーザーUUID
     * @param {PatchUserRequest} [patchUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editUser(
      userId: string,
      patchUserRequest?: PatchUserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editUser(
        userId,
        patchUserRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.editUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
     * @summary ユーザーのタグを編集
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editUserTag(
      userId: string,
      tagId: string,
      patchUserTagRequest?: PatchUserTagRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editUserTag(
        userId,
        tagId,
        patchUserTagRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.editUserTag"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetDirectMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDirectMessages(
      userId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetDirectMessagesOrderEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDirectMessages(
          userId,
          limit,
          offset,
          since,
          until,
          inclusive,
          order,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.getDirectMessages"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーの詳細情報を取得します。
     * @summary ユーザー詳細情報を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      userId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(
        userId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.getUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
     * @summary DMチャンネル情報を取得
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserDMChannel(
      userId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DMChannel>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserDMChannel(userId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.getUserDMChannel"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @summary ユーザーのアイコン画像を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserIcon(
      userId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserIcon(
        userId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.getUserIcon"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーの統計情報を取得します。
     * @summary ユーザー統計情報を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserStats(
      userId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStats>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserStats(
        userId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.getUserStats"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserTags(
      userId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserTag>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTags(
        userId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.getUserTags"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * ユーザーのリストを取得します。 `include-suspended`を指定しない場合、レスポンスにはユーザーアカウント状態が\"1: 有効\"であるユーザーのみが含まれます。 `include-suspended`と`name`を同時に指定することはできません。
     * @summary ユーザーのリストを取得
     * @param {boolean} [includeSuspended] アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか
     * @param {string} [name] 名前が一致するアカウントのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsers(
      includeSuspended?: boolean,
      name?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(
        includeSuspended,
        name,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.getUsers"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postDirectMessage(
      userId: string,
      postMessageRequest?: PostMessageRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postDirectMessage(
          userId,
          postMessageRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.postDirectMessage"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserTag(
      userId: string,
      tagId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserTag(
        userId,
        tagId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.removeUserTag"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     * 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserTag(
      userId: string,
      postUserTagRequest?: PostUserTagRequest,
      options?: any,
    ): AxiosPromise<UserTag> {
      return localVarFp
        .addUserTag(userId, postUserTagRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
     * @summary ユーザーのアイコン画像を変更します
     * @param {string} userId ユーザーUUID
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserIcon(
      userId: string,
      file: File,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .changeUserIcon(userId, file, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
     * @summary ユーザーのパスワードを変更
     * @param {string} userId ユーザーUUID
     * @param {PutUserPasswordRequest} [putUserPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserPassword(
      userId: string,
      putUserPasswordRequest?: PutUserPasswordRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .changeUserPassword(userId, putUserPasswordRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ユーザーを登録します。 管理者権限が必要です。
     * @summary ユーザーを登録
     * @param {PostUserRequest} [postUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(
      postUserRequest?: PostUserRequest,
      options?: any,
    ): AxiosPromise<UserDetail> {
      return localVarFp
        .createUser(postUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーの情報を変更します。 管理者権限が必要です。
     * @summary ユーザー情報を変更
     * @param {string} userId ユーザーUUID
     * @param {PatchUserRequest} [patchUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUser(
      userId: string,
      patchUserRequest?: PatchUserRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editUser(userId, patchUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
     * @summary ユーザーのタグを編集
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserTag(
      userId: string,
      tagId: string,
      patchUserTagRequest?: PatchUserTagRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editUserTag(userId, tagId, patchUserTagRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetDirectMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDirectMessages(
      userId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetDirectMessagesOrderEnum,
      options?: any,
    ): AxiosPromise<Array<Message>> {
      return localVarFp
        .getDirectMessages(
          userId,
          limit,
          offset,
          since,
          until,
          inclusive,
          order,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーの詳細情報を取得します。
     * @summary ユーザー詳細情報を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userId: string, options?: any): AxiosPromise<UserDetail> {
      return localVarFp
        .getUser(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
     * @summary DMチャンネル情報を取得
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDMChannel(userId: string, options?: any): AxiosPromise<DMChannel> {
      return localVarFp
        .getUserDMChannel(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @summary ユーザーのアイコン画像を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserIcon(userId: string, options?: any): AxiosPromise<File> {
      return localVarFp
        .getUserIcon(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーの統計情報を取得します。
     * @summary ユーザー統計情報を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserStats(userId: string, options?: any): AxiosPromise<UserStats> {
      return localVarFp
        .getUserStats(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTags(userId: string, options?: any): AxiosPromise<Array<UserTag>> {
      return localVarFp
        .getUserTags(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ユーザーのリストを取得します。 `include-suspended`を指定しない場合、レスポンスにはユーザーアカウント状態が\"1: 有効\"であるユーザーのみが含まれます。 `include-suspended`と`name`を同時に指定することはできません。
     * @summary ユーザーのリストを取得
     * @param {boolean} [includeSuspended] アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか
     * @param {string} [name] 名前が一致するアカウントのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(
      includeSuspended?: boolean,
      name?: string,
      options?: any,
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getUsers(includeSuspended, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDirectMessage(
      userId: string,
      postMessageRequest?: PostMessageRequest,
      options?: any,
    ): AxiosPromise<Message> {
      return localVarFp
        .postDirectMessage(userId, postMessageRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserTag(
      userId: string,
      tagId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .removeUserTag(userId, tagId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   * 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
   * @summary ユーザーにタグを追加
   * @param {string} userId ユーザーUUID
   * @param {PostUserTagRequest} [postUserTagRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public addUserTag(
    userId: string,
    postUserTagRequest?: PostUserTagRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .addUserTag(userId, postUserTagRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
   * @summary ユーザーのアイコン画像を変更します
   * @param {string} userId ユーザーUUID
   * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public changeUserIcon(
    userId: string,
    file: File,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .changeUserIcon(userId, file, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
   * @summary ユーザーのパスワードを変更
   * @param {string} userId ユーザーUUID
   * @param {PutUserPasswordRequest} [putUserPasswordRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public changeUserPassword(
    userId: string,
    putUserPasswordRequest?: PutUserPasswordRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .changeUserPassword(userId, putUserPasswordRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ユーザーを登録します。 管理者権限が必要です。
   * @summary ユーザーを登録
   * @param {PostUserRequest} [postUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public createUser(
    postUserRequest?: PostUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .createUser(postUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーの情報を変更します。 管理者権限が必要です。
   * @summary ユーザー情報を変更
   * @param {string} userId ユーザーUUID
   * @param {PatchUserRequest} [patchUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public editUser(
    userId: string,
    patchUserRequest?: PatchUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .editUser(userId, patchUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
   * @summary ユーザーのタグを編集
   * @param {string} userId ユーザーUUID
   * @param {string} tagId タグUUID
   * @param {PatchUserTagRequest} [patchUserTagRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public editUserTag(
    userId: string,
    tagId: string,
    patchUserTagRequest?: PatchUserTagRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .editUserTag(userId, tagId, patchUserTagRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーとのダイレクトメッセージのリストを取得します。
   * @summary ダイレクトメッセージのリストを取得
   * @param {string} userId ユーザーUUID
   * @param {number} [limit] 取得する件数
   * @param {number} [offset] 取得するオフセット
   * @param {string} [since] 取得する時間範囲の開始日時
   * @param {string} [until] 取得する時間範囲の終了日時
   * @param {boolean} [inclusive] 範囲の端を含めるかどうか
   * @param {GetDirectMessagesOrderEnum} [order] 昇順か降順か
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getDirectMessages(
    userId: string,
    limit?: number,
    offset?: number,
    since?: string,
    until?: string,
    inclusive?: boolean,
    order?: GetDirectMessagesOrderEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .getDirectMessages(
        userId,
        limit,
        offset,
        since,
        until,
        inclusive,
        order,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーの詳細情報を取得します。
   * @summary ユーザー詳細情報を取得
   * @param {string} userId ユーザーUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUser(userId: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUser(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
   * @summary DMチャンネル情報を取得
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserDMChannel(userId: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserDMChannel(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーのアイコン画像を取得します。
   * @summary ユーザーのアイコン画像を取得
   * @param {string} userId ユーザーUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserIcon(userId: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserIcon(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーの統計情報を取得します。
   * @summary ユーザー統計情報を取得
   * @param {string} userId ユーザーUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserStats(userId: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserStats(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーのタグリストを取得します。
   * @summary ユーザーのタグリストを取得
   * @param {string} userId ユーザーUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserTags(userId: string, options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserTags(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ユーザーのリストを取得します。 `include-suspended`を指定しない場合、レスポンスにはユーザーアカウント状態が\"1: 有効\"であるユーザーのみが含まれます。 `include-suspended`と`name`を同時に指定することはできません。
   * @summary ユーザーのリストを取得
   * @param {boolean} [includeSuspended] アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか
   * @param {string} [name] 名前が一致するアカウントのみを取得する
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUsers(
    includeSuspended?: boolean,
    name?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .getUsers(includeSuspended, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーにダイレクトメッセージを送信します。
   * @summary ダイレクトメッセージを送信
   * @param {string} userId ユーザーUUID
   * @param {PostMessageRequest} [postMessageRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public postDirectMessage(
    userId: string,
    postMessageRequest?: PostMessageRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .postDirectMessage(userId, postMessageRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 既に存在しないタグを削除しようとした場合は204を返します。
   * @summary ユーザーからタグを削除します
   * @param {string} userId ユーザーUUID
   * @param {string} tagId タグUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public removeUserTag(
    userId: string,
    tagId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .removeUserTag(userId, tagId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const GetDirectMessagesOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type GetDirectMessagesOrderEnum =
  (typeof GetDirectMessagesOrderEnum)[keyof typeof GetDirectMessagesOrderEnum];
