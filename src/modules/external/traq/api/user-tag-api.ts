/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { PatchUserTagRequest } from "../model";
// @ts-ignore
import { PostUserTagRequest } from "../model";
// @ts-ignore
import { Tag } from "../model";
// @ts-ignore
import { UserTag } from "../model";
/**
 * UserTagApi - axios parameter creator
 * @export
 */
export const UserTagApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 自分に新しくタグを追加します。
     * @summary 自分にタグを追加
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyUserTag: async (
      postUserTagRequest?: PostUserTagRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/tags`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postUserTagRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserTag: async (
      userId: string,
      postUserTagRequest?: PostUserTagRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("addUserTag", "userId", userId);
      const localVarPath = `/users/{userId}/tags`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postUserTagRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分の指定したタグの状態を変更します。
     * @summary 自分のタグを編集
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMyUserTag: async (
      tagId: string,
      patchUserTagRequest?: PatchUserTagRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tagId' is not null or undefined
      assertParamExists("editMyUserTag", "tagId", tagId);
      const localVarPath = `/users/me/tags/{tagId}`.replace(
        `{${"tagId"}}`,
        encodeURIComponent(String(tagId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchUserTagRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
     * @summary ユーザーのタグを編集
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserTag: async (
      userId: string,
      tagId: string,
      patchUserTagRequest?: PatchUserTagRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("editUserTag", "userId", userId);
      // verify required parameter 'tagId' is not null or undefined
      assertParamExists("editUserTag", "tagId", tagId);
      const localVarPath = `/users/{userId}/tags/{tagId}`
        .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
        .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchUserTagRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分に付けられているタグの配列を取得します。
     * @summary 自分のタグリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUserTags: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/tags`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したタグの情報を取得します。
     * @summary タグ情報を取得
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag: async (
      tagId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tagId' is not null or undefined
      assertParamExists("getTag", "tagId", tagId);
      const localVarPath = `/tags/{tagId}`.replace(
        `{${"tagId"}}`,
        encodeURIComponent(String(tagId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTags: async (
      userId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("getUserTags", "userId", userId);
      const localVarPath = `/users/{userId}/tags`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyUserTag: async (
      tagId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tagId' is not null or undefined
      assertParamExists("removeMyUserTag", "tagId", tagId);
      const localVarPath = `/users/me/tags/{tagId}`.replace(
        `{${"tagId"}}`,
        encodeURIComponent(String(tagId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserTag: async (
      userId: string,
      tagId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("removeUserTag", "userId", userId);
      // verify required parameter 'tagId' is not null or undefined
      assertParamExists("removeUserTag", "tagId", tagId);
      const localVarPath = `/users/{userId}/tags/{tagId}`
        .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
        .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserTagApi - functional programming interface
 * @export
 */
export const UserTagApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserTagApiAxiosParamCreator(configuration);
  return {
    /**
     * 自分に新しくタグを追加します。
     * @summary 自分にタグを追加
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addMyUserTag(
      postUserTagRequest?: PostUserTagRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTag>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addMyUserTag(
        postUserTagRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserTagApi.addMyUserTag"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addUserTag(
      userId: string,
      postUserTagRequest?: PostUserTagRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTag>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addUserTag(
        userId,
        postUserTagRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserTagApi.addUserTag"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分の指定したタグの状態を変更します。
     * @summary 自分のタグを編集
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editMyUserTag(
      tagId: string,
      patchUserTagRequest?: PatchUserTagRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editMyUserTag(
        tagId,
        patchUserTagRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserTagApi.editMyUserTag"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
     * @summary ユーザーのタグを編集
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editUserTag(
      userId: string,
      tagId: string,
      patchUserTagRequest?: PatchUserTagRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editUserTag(
        userId,
        tagId,
        patchUserTagRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserTagApi.editUserTag"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分に付けられているタグの配列を取得します。
     * @summary 自分のタグリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyUserTags(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserTag>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyUserTags(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserTagApi.getMyUserTags"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したタグの情報を取得します。
     * @summary タグ情報を取得
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTag(
      tagId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTag(
        tagId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserTagApi.getTag"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserTags(
      userId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserTag>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTags(
        userId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserTagApi.getUserTags"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMyUserTag(
      tagId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMyUserTag(
        tagId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserTagApi.removeMyUserTag"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserTag(
      userId: string,
      tagId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserTag(
        userId,
        tagId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserTagApi.removeUserTag"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UserTagApi - factory interface
 * @export
 */
export const UserTagApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserTagApiFp(configuration);
  return {
    /**
     * 自分に新しくタグを追加します。
     * @summary 自分にタグを追加
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyUserTag(
      postUserTagRequest?: PostUserTagRequest,
      options?: any,
    ): AxiosPromise<UserTag> {
      return localVarFp
        .addMyUserTag(postUserTagRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserTag(
      userId: string,
      postUserTagRequest?: PostUserTagRequest,
      options?: any,
    ): AxiosPromise<UserTag> {
      return localVarFp
        .addUserTag(userId, postUserTagRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分の指定したタグの状態を変更します。
     * @summary 自分のタグを編集
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMyUserTag(
      tagId: string,
      patchUserTagRequest?: PatchUserTagRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editMyUserTag(tagId, patchUserTagRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
     * @summary ユーザーのタグを編集
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserTag(
      userId: string,
      tagId: string,
      patchUserTagRequest?: PatchUserTagRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editUserTag(userId, tagId, patchUserTagRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分に付けられているタグの配列を取得します。
     * @summary 自分のタグリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUserTags(options?: any): AxiosPromise<Array<UserTag>> {
      return localVarFp
        .getMyUserTags(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したタグの情報を取得します。
     * @summary タグ情報を取得
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag(tagId: string, options?: any): AxiosPromise<Tag> {
      return localVarFp
        .getTag(tagId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTags(userId: string, options?: any): AxiosPromise<Array<UserTag>> {
      return localVarFp
        .getUserTags(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyUserTag(tagId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .removeMyUserTag(tagId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserTag(
      userId: string,
      tagId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .removeUserTag(userId, tagId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserTagApi - object-oriented interface
 * @export
 * @class UserTagApi
 * @extends {BaseAPI}
 */
export class UserTagApi extends BaseAPI {
  /**
   * 自分に新しくタグを追加します。
   * @summary 自分にタグを追加
   * @param {PostUserTagRequest} [postUserTagRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserTagApi
   */
  public addMyUserTag(
    postUserTagRequest?: PostUserTagRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserTagApiFp(this.configuration)
      .addMyUserTag(postUserTagRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
   * @summary ユーザーにタグを追加
   * @param {string} userId ユーザーUUID
   * @param {PostUserTagRequest} [postUserTagRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserTagApi
   */
  public addUserTag(
    userId: string,
    postUserTagRequest?: PostUserTagRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserTagApiFp(this.configuration)
      .addUserTag(userId, postUserTagRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分の指定したタグの状態を変更します。
   * @summary 自分のタグを編集
   * @param {string} tagId タグUUID
   * @param {PatchUserTagRequest} [patchUserTagRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserTagApi
   */
  public editMyUserTag(
    tagId: string,
    patchUserTagRequest?: PatchUserTagRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserTagApiFp(this.configuration)
      .editMyUserTag(tagId, patchUserTagRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
   * @summary ユーザーのタグを編集
   * @param {string} userId ユーザーUUID
   * @param {string} tagId タグUUID
   * @param {PatchUserTagRequest} [patchUserTagRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserTagApi
   */
  public editUserTag(
    userId: string,
    tagId: string,
    patchUserTagRequest?: PatchUserTagRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserTagApiFp(this.configuration)
      .editUserTag(userId, tagId, patchUserTagRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分に付けられているタグの配列を取得します。
   * @summary 自分のタグリストを取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserTagApi
   */
  public getMyUserTags(options?: RawAxiosRequestConfig) {
    return UserTagApiFp(this.configuration)
      .getMyUserTags(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したタグの情報を取得します。
   * @summary タグ情報を取得
   * @param {string} tagId タグUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserTagApi
   */
  public getTag(tagId: string, options?: RawAxiosRequestConfig) {
    return UserTagApiFp(this.configuration)
      .getTag(tagId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーのタグリストを取得します。
   * @summary ユーザーのタグリストを取得
   * @param {string} userId ユーザーUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserTagApi
   */
  public getUserTags(userId: string, options?: RawAxiosRequestConfig) {
    return UserTagApiFp(this.configuration)
      .getUserTags(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 既に存在しないタグを削除しようとした場合は204を返します。
   * @summary 自分からタグを削除します
   * @param {string} tagId タグUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserTagApi
   */
  public removeMyUserTag(tagId: string, options?: RawAxiosRequestConfig) {
    return UserTagApiFp(this.configuration)
      .removeMyUserTag(tagId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 既に存在しないタグを削除しようとした場合は204を返します。
   * @summary ユーザーからタグを削除します
   * @param {string} userId ユーザーUUID
   * @param {string} tagId タグUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserTagApi
   */
  public removeUserTag(
    userId: string,
    tagId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return UserTagApiFp(this.configuration)
      .removeUserTag(userId, tagId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
