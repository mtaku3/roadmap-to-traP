/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { BotUser } from "../model";
// @ts-ignore
import { Channel } from "../model";
// @ts-ignore
import { ChannelEvent } from "../model";
// @ts-ignore
import { ChannelList } from "../model";
// @ts-ignore
import { ChannelStats } from "../model";
// @ts-ignore
import { ChannelTopic } from "../model";
// @ts-ignore
import { ChannelViewer } from "../model";
// @ts-ignore
import { DMChannel } from "../model";
// @ts-ignore
import { Message } from "../model";
// @ts-ignore
import { PatchChannelRequest } from "../model";
// @ts-ignore
import { PatchChannelSubscribersRequest } from "../model";
// @ts-ignore
import { Pin } from "../model";
// @ts-ignore
import { PostChannelRequest } from "../model";
// @ts-ignore
import { PostMessageRequest } from "../model";
// @ts-ignore
import { PutChannelSubscribersRequest } from "../model";
// @ts-ignore
import { PutChannelTopicRequest } from "../model";
/**
 * ChannelApi - axios parameter creator
 * @export
 */
export const ChannelApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
     * @summary チャンネルを作成
     * @param {PostChannelRequest} [postChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannel: async (
      postChannelRequest?: PostChannelRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/channels`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postChannelRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、`parent`に`00000000-0000-0000-0000-000000000000`を指定してください。
     * @summary チャンネル情報を変更
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelRequest} [patchChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannel: async (
      channelId: string,
      patchChannelRequest?: PatchChannelRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("editChannel", "channelId", channelId);
      const localVarPath = `/channels/{channelId}`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchChannelRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの通知購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を編集
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelSubscribersRequest} [patchChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannelSubscribers: async (
      channelId: string,
      patchChannelSubscribersRequest?: PatchChannelSubscribersRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("editChannelSubscribers", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/subscribers`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchChannelSubscribersRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルのトピックを編集します。 アーカイブされているチャンネルのトピックは編集できません。
     * @summary チャンネルトピックを編集
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelTopicRequest} [putChannelTopicRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannelTopic: async (
      channelId: string,
      putChannelTopicRequest?: PutChannelTopicRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("editChannelTopic", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/topic`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        putChannelTopicRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルの情報を取得します。
     * @summary チャンネル情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannel: async (
      channelId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("getChannel", "channelId", channelId);
      const localVarPath = `/channels/{channelId}`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelBots: async (
      channelId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("getChannelBots", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/bots`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルのイベントリストを取得します。
     * @summary チャンネルイベントのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetChannelEventsOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelEvents: async (
      channelId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetChannelEventsOrderEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("getChannelEvents", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/events`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (since !== undefined) {
        localVarQueryParameter["since"] =
          (since as any) instanceof Date ? (since as any).toISOString() : since;
      }

      if (until !== undefined) {
        localVarQueryParameter["until"] =
          (until as any) instanceof Date ? (until as any).toISOString() : until;
      }

      if (inclusive !== undefined) {
        localVarQueryParameter["inclusive"] = inclusive;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelPins: async (
      channelId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("getChannelPins", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/pins`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルの統計情報を取得します。
     * @summary チャンネル統計情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelStats: async (
      channelId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("getChannelStats", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/stats`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     * @summary チャンネルの通知購読者のリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelSubscribers: async (
      channelId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("getChannelSubscribers", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/subscribers`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルのトピックを取得します。
     * @summary チャンネルトピックを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelTopic: async (
      channelId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("getChannelTopic", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/topic`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルの閲覧者のリストを取得します。
     * @summary チャンネル閲覧者リストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelViewers: async (
      channelId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("getChannelViewers", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/viewers`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * チャンネルのリストを取得します。
     * @summary チャンネルリストを取得
     * @param {boolean} [includeDm] ダイレクトメッセージチャンネルをレスポンスに含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannels: async (
      includeDm?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/channels`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (includeDm !== undefined) {
        localVarQueryParameter["include-dm"] = includeDm;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages: async (
      channelId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetMessagesOrderEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("getMessages", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/messages`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (since !== undefined) {
        localVarQueryParameter["since"] =
          (since as any) instanceof Date ? (since as any).toISOString() : since;
      }

      if (until !== undefined) {
        localVarQueryParameter["until"] =
          (until as any) instanceof Date ? (until as any).toISOString() : until;
      }

      if (inclusive !== undefined) {
        localVarQueryParameter["inclusive"] = inclusive;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
     * @summary DMチャンネル情報を取得
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDMChannel: async (
      userId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("getUserDMChannel", "userId", userId);
      const localVarPath = `/users/{userId}/dm-channel`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessage: async (
      channelId: string,
      postMessageRequest?: PostMessageRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("postMessage", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/messages`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postMessageRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの通知購読状態はオフになります。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribersRequest} [putChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribers: async (
      channelId: string,
      putChannelSubscribersRequest?: PutChannelSubscribersRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("setChannelSubscribers", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/subscribers`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        putChannelSubscribersRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ChannelApi - functional programming interface
 * @export
 */
export const ChannelApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ChannelApiAxiosParamCreator(configuration);
  return {
    /**
     * チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
     * @summary チャンネルを作成
     * @param {PostChannelRequest} [postChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createChannel(
      postChannelRequest?: PostChannelRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createChannel(
        postChannelRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.createChannel"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、`parent`に`00000000-0000-0000-0000-000000000000`を指定してください。
     * @summary チャンネル情報を変更
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelRequest} [patchChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editChannel(
      channelId: string,
      patchChannelRequest?: PatchChannelRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editChannel(
        channelId,
        patchChannelRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.editChannel"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの通知購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を編集
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelSubscribersRequest} [patchChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editChannelSubscribers(
      channelId: string,
      patchChannelSubscribersRequest?: PatchChannelSubscribersRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.editChannelSubscribers(
          channelId,
          patchChannelSubscribersRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.editChannelSubscribers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルのトピックを編集します。 アーカイブされているチャンネルのトピックは編集できません。
     * @summary チャンネルトピックを編集
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelTopicRequest} [putChannelTopicRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editChannelTopic(
      channelId: string,
      putChannelTopicRequest?: PutChannelTopicRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.editChannelTopic(
          channelId,
          putChannelTopicRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.editChannelTopic"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルの情報を取得します。
     * @summary チャンネル情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChannel(
      channelId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChannel(
        channelId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.getChannel"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChannelBots(
      channelId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BotUser>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelBots(
        channelId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.getChannelBots"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルのイベントリストを取得します。
     * @summary チャンネルイベントのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetChannelEventsOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChannelEvents(
      channelId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetChannelEventsOrderEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ChannelEvent>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getChannelEvents(
          channelId,
          limit,
          offset,
          since,
          until,
          inclusive,
          order,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.getChannelEvents"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChannelPins(
      channelId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pin>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelPins(
        channelId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.getChannelPins"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルの統計情報を取得します。
     * @summary チャンネル統計情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChannelStats(
      channelId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelStats>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelStats(
        channelId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.getChannelStats"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     * @summary チャンネルの通知購読者のリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChannelSubscribers(
      channelId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getChannelSubscribers(
          channelId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.getChannelSubscribers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルのトピックを取得します。
     * @summary チャンネルトピックを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChannelTopic(
      channelId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelTopic>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelTopic(
        channelId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.getChannelTopic"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルの閲覧者のリストを取得します。
     * @summary チャンネル閲覧者リストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChannelViewers(
      channelId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ChannelViewer>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getChannelViewers(channelId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.getChannelViewers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * チャンネルのリストを取得します。
     * @summary チャンネルリストを取得
     * @param {boolean} [includeDm] ダイレクトメッセージチャンネルをレスポンスに含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChannels(
      includeDm?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelList>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChannels(
        includeDm,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.getChannels"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessages(
      channelId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetMessagesOrderEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMessages(
        channelId,
        limit,
        offset,
        since,
        until,
        inclusive,
        order,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.getMessages"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
     * @summary DMチャンネル情報を取得
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserDMChannel(
      userId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DMChannel>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserDMChannel(userId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.getUserDMChannel"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postMessage(
      channelId: string,
      postMessageRequest?: PostMessageRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postMessage(
        channelId,
        postMessageRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.postMessage"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの通知購読状態はオフになります。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribersRequest} [putChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setChannelSubscribers(
      channelId: string,
      putChannelSubscribersRequest?: PutChannelSubscribersRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.setChannelSubscribers(
          channelId,
          putChannelSubscribersRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ChannelApi.setChannelSubscribers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ChannelApi - factory interface
 * @export
 */
export const ChannelApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ChannelApiFp(configuration);
  return {
    /**
     * チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
     * @summary チャンネルを作成
     * @param {PostChannelRequest} [postChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannel(
      postChannelRequest?: PostChannelRequest,
      options?: any,
    ): AxiosPromise<Channel> {
      return localVarFp
        .createChannel(postChannelRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、`parent`に`00000000-0000-0000-0000-000000000000`を指定してください。
     * @summary チャンネル情報を変更
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelRequest} [patchChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannel(
      channelId: string,
      patchChannelRequest?: PatchChannelRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editChannel(channelId, patchChannelRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの通知購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を編集
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelSubscribersRequest} [patchChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannelSubscribers(
      channelId: string,
      patchChannelSubscribersRequest?: PatchChannelSubscribersRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editChannelSubscribers(
          channelId,
          patchChannelSubscribersRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルのトピックを編集します。 アーカイブされているチャンネルのトピックは編集できません。
     * @summary チャンネルトピックを編集
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelTopicRequest} [putChannelTopicRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannelTopic(
      channelId: string,
      putChannelTopicRequest?: PutChannelTopicRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editChannelTopic(channelId, putChannelTopicRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルの情報を取得します。
     * @summary チャンネル情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannel(channelId: string, options?: any): AxiosPromise<Channel> {
      return localVarFp
        .getChannel(channelId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelBots(
      channelId: string,
      options?: any,
    ): AxiosPromise<Array<BotUser>> {
      return localVarFp
        .getChannelBots(channelId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルのイベントリストを取得します。
     * @summary チャンネルイベントのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetChannelEventsOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelEvents(
      channelId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetChannelEventsOrderEnum,
      options?: any,
    ): AxiosPromise<Array<ChannelEvent>> {
      return localVarFp
        .getChannelEvents(
          channelId,
          limit,
          offset,
          since,
          until,
          inclusive,
          order,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelPins(channelId: string, options?: any): AxiosPromise<Array<Pin>> {
      return localVarFp
        .getChannelPins(channelId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルの統計情報を取得します。
     * @summary チャンネル統計情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelStats(
      channelId: string,
      options?: any,
    ): AxiosPromise<ChannelStats> {
      return localVarFp
        .getChannelStats(channelId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     * @summary チャンネルの通知購読者のリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelSubscribers(
      channelId: string,
      options?: any,
    ): AxiosPromise<Array<string>> {
      return localVarFp
        .getChannelSubscribers(channelId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルのトピックを取得します。
     * @summary チャンネルトピックを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelTopic(
      channelId: string,
      options?: any,
    ): AxiosPromise<ChannelTopic> {
      return localVarFp
        .getChannelTopic(channelId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルの閲覧者のリストを取得します。
     * @summary チャンネル閲覧者リストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelViewers(
      channelId: string,
      options?: any,
    ): AxiosPromise<Array<ChannelViewer>> {
      return localVarFp
        .getChannelViewers(channelId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * チャンネルのリストを取得します。
     * @summary チャンネルリストを取得
     * @param {boolean} [includeDm] ダイレクトメッセージチャンネルをレスポンスに含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannels(includeDm?: boolean, options?: any): AxiosPromise<ChannelList> {
      return localVarFp
        .getChannels(includeDm, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages(
      channelId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetMessagesOrderEnum,
      options?: any,
    ): AxiosPromise<Array<Message>> {
      return localVarFp
        .getMessages(
          channelId,
          limit,
          offset,
          since,
          until,
          inclusive,
          order,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
     * @summary DMチャンネル情報を取得
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDMChannel(userId: string, options?: any): AxiosPromise<DMChannel> {
      return localVarFp
        .getUserDMChannel(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessage(
      channelId: string,
      postMessageRequest?: PostMessageRequest,
      options?: any,
    ): AxiosPromise<Message> {
      return localVarFp
        .postMessage(channelId, postMessageRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの通知購読状態はオフになります。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribersRequest} [putChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribers(
      channelId: string,
      putChannelSubscribersRequest?: PutChannelSubscribersRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .setChannelSubscribers(channelId, putChannelSubscribersRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
export class ChannelApi extends BaseAPI {
  /**
   * チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
   * @summary チャンネルを作成
   * @param {PostChannelRequest} [postChannelRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public createChannel(
    postChannelRequest?: PostChannelRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelApiFp(this.configuration)
      .createChannel(postChannelRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、`parent`に`00000000-0000-0000-0000-000000000000`を指定してください。
   * @summary チャンネル情報を変更
   * @param {string} channelId チャンネルUUID
   * @param {PatchChannelRequest} [patchChannelRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public editChannel(
    channelId: string,
    patchChannelRequest?: PatchChannelRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelApiFp(this.configuration)
      .editChannel(channelId, patchChannelRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの通知購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
   * @summary チャンネルの通知購読者を編集
   * @param {string} channelId チャンネルUUID
   * @param {PatchChannelSubscribersRequest} [patchChannelSubscribersRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public editChannelSubscribers(
    channelId: string,
    patchChannelSubscribersRequest?: PatchChannelSubscribersRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelApiFp(this.configuration)
      .editChannelSubscribers(
        channelId,
        patchChannelSubscribersRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルのトピックを編集します。 アーカイブされているチャンネルのトピックは編集できません。
   * @summary チャンネルトピックを編集
   * @param {string} channelId チャンネルUUID
   * @param {PutChannelTopicRequest} [putChannelTopicRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public editChannelTopic(
    channelId: string,
    putChannelTopicRequest?: PutChannelTopicRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelApiFp(this.configuration)
      .editChannelTopic(channelId, putChannelTopicRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルの情報を取得します。
   * @summary チャンネル情報を取得
   * @param {string} channelId チャンネルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public getChannel(channelId: string, options?: RawAxiosRequestConfig) {
    return ChannelApiFp(this.configuration)
      .getChannel(channelId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルに参加しているBOTのリストを取得します。
   * @summary チャンネル参加中のBOTのリストを取得
   * @param {string} channelId チャンネルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public getChannelBots(channelId: string, options?: RawAxiosRequestConfig) {
    return ChannelApiFp(this.configuration)
      .getChannelBots(channelId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルのイベントリストを取得します。
   * @summary チャンネルイベントのリストを取得
   * @param {string} channelId チャンネルUUID
   * @param {number} [limit] 取得する件数
   * @param {number} [offset] 取得するオフセット
   * @param {string} [since] 取得する時間範囲の開始日時
   * @param {string} [until] 取得する時間範囲の終了日時
   * @param {boolean} [inclusive] 範囲の端を含めるかどうか
   * @param {GetChannelEventsOrderEnum} [order] 昇順か降順か
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public getChannelEvents(
    channelId: string,
    limit?: number,
    offset?: number,
    since?: string,
    until?: string,
    inclusive?: boolean,
    order?: GetChannelEventsOrderEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelApiFp(this.configuration)
      .getChannelEvents(
        channelId,
        limit,
        offset,
        since,
        until,
        inclusive,
        order,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
   * @summary チャンネルピンのリストを取得
   * @param {string} channelId チャンネルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public getChannelPins(channelId: string, options?: RawAxiosRequestConfig) {
    return ChannelApiFp(this.configuration)
      .getChannelPins(channelId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルの統計情報を取得します。
   * @summary チャンネル統計情報を取得
   * @param {string} channelId チャンネルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public getChannelStats(channelId: string, options?: RawAxiosRequestConfig) {
    return ChannelApiFp(this.configuration)
      .getChannelStats(channelId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
   * @summary チャンネルの通知購読者のリストを取得
   * @param {string} channelId チャンネルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public getChannelSubscribers(
    channelId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelApiFp(this.configuration)
      .getChannelSubscribers(channelId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルのトピックを取得します。
   * @summary チャンネルトピックを取得
   * @param {string} channelId チャンネルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public getChannelTopic(channelId: string, options?: RawAxiosRequestConfig) {
    return ChannelApiFp(this.configuration)
      .getChannelTopic(channelId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルの閲覧者のリストを取得します。
   * @summary チャンネル閲覧者リストを取得
   * @param {string} channelId チャンネルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public getChannelViewers(channelId: string, options?: RawAxiosRequestConfig) {
    return ChannelApiFp(this.configuration)
      .getChannelViewers(channelId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * チャンネルのリストを取得します。
   * @summary チャンネルリストを取得
   * @param {boolean} [includeDm] ダイレクトメッセージチャンネルをレスポンスに含めるかどうか
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public getChannels(includeDm?: boolean, options?: RawAxiosRequestConfig) {
    return ChannelApiFp(this.configuration)
      .getChannels(includeDm, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルのメッセージのリストを取得します。
   * @summary チャンネルメッセージのリストを取得
   * @param {string} channelId チャンネルUUID
   * @param {number} [limit] 取得する件数
   * @param {number} [offset] 取得するオフセット
   * @param {string} [since] 取得する時間範囲の開始日時
   * @param {string} [until] 取得する時間範囲の終了日時
   * @param {boolean} [inclusive] 範囲の端を含めるかどうか
   * @param {GetMessagesOrderEnum} [order] 昇順か降順か
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public getMessages(
    channelId: string,
    limit?: number,
    offset?: number,
    since?: string,
    until?: string,
    inclusive?: boolean,
    order?: GetMessagesOrderEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelApiFp(this.configuration)
      .getMessages(
        channelId,
        limit,
        offset,
        since,
        until,
        inclusive,
        order,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
   * @summary DMチャンネル情報を取得
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public getUserDMChannel(userId: string, options?: RawAxiosRequestConfig) {
    return ChannelApiFp(this.configuration)
      .getUserDMChannel(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
   * @summary チャンネルにメッセージを投稿
   * @param {string} channelId チャンネルUUID
   * @param {PostMessageRequest} [postMessageRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public postMessage(
    channelId: string,
    postMessageRequest?: PostMessageRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelApiFp(this.configuration)
      .postMessage(channelId, postMessageRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの通知購読状態はオフになります。 また、存在しないユーザーを指定した場合は無視されます。
   * @summary チャンネルの通知購読者を設定
   * @param {string} channelId チャンネルUUID
   * @param {PutChannelSubscribersRequest} [putChannelSubscribersRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelApi
   */
  public setChannelSubscribers(
    channelId: string,
    putChannelSubscribersRequest?: PutChannelSubscribersRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelApiFp(this.configuration)
      .setChannelSubscribers(channelId, putChannelSubscribersRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const GetChannelEventsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type GetChannelEventsOrderEnum =
  (typeof GetChannelEventsOrderEnum)[keyof typeof GetChannelEventsOrderEnum];
/**
 * @export
 */
export const GetMessagesOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type GetMessagesOrderEnum =
  (typeof GetMessagesOrderEnum)[keyof typeof GetMessagesOrderEnum];
