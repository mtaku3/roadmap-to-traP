/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { MessageStamp } from "../model";
// @ts-ignore
import { PatchStampPaletteRequest } from "../model";
// @ts-ignore
import { PatchStampRequest } from "../model";
// @ts-ignore
import { PostMessageStampRequest } from "../model";
// @ts-ignore
import { PostStampPaletteRequest } from "../model";
// @ts-ignore
import { Stamp } from "../model";
// @ts-ignore
import { StampHistoryEntry } from "../model";
// @ts-ignore
import { StampPalette } from "../model";
// @ts-ignore
import { StampStats } from "../model";
// @ts-ignore
import { StampWithThumbnail } from "../model";
/**
 * StampApi - axios parameter creator
 * @export
 */
export const StampApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMessageStamp: async (
      messageId: string,
      stampId: string,
      postMessageStampRequest?: PostMessageStampRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("addMessageStamp", "messageId", messageId);
      // verify required parameter 'stampId' is not null or undefined
      assertParamExists("addMessageStamp", "stampId", stampId);
      const localVarPath = `/messages/{messageId}/stamps/{stampId}`
        .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)))
        .replace(`{${"stampId"}}`, encodeURIComponent(String(stampId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postMessageStampRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したスタンプの画像を変更します。
     * @summary スタンプ画像を変更
     * @param {string} stampId スタンプUUID
     * @param {File} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStampImage: async (
      stampId: string,
      file: File,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'stampId' is not null or undefined
      assertParamExists("changeStampImage", "stampId", stampId);
      // verify required parameter 'file' is not null or undefined
      assertParamExists("changeStampImage", "file", file);
      const localVarPath = `/stamps/{stampId}/image`.replace(
        `{${"stampId"}}`,
        encodeURIComponent(String(stampId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * スタンプを新規作成します。
     * @summary スタンプを作成
     * @param {string} name スタンプ名
     * @param {File} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStamp: async (
      name: string,
      file: File,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("createStamp", "name", name);
      // verify required parameter 'file' is not null or undefined
      assertParamExists("createStamp", "file", file);
      const localVarPath = `/stamps`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (name !== undefined) {
        localVarFormParams.append("name", name as any);
      }

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * スタンプパレットを作成します。
     * @summary スタンプパレットを作成
     * @param {PostStampPaletteRequest} [postStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStampPalette: async (
      postStampPaletteRequest?: PostStampPaletteRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/stamp-palettes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postStampPaletteRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
     * @summary スタンプを削除
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStamp: async (
      stampId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'stampId' is not null or undefined
      assertParamExists("deleteStamp", "stampId", stampId);
      const localVarPath = `/stamps/{stampId}`.replace(
        `{${"stampId"}}`,
        encodeURIComponent(String(stampId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレットを削除
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStampPalette: async (
      paletteId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'paletteId' is not null or undefined
      assertParamExists("deleteStampPalette", "paletteId", paletteId);
      const localVarPath = `/stamp-palettes/{paletteId}`.replace(
        `{${"paletteId"}}`,
        encodeURIComponent(String(paletteId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したスタンプの情報を変更します。
     * @summary スタンプ情報を変更
     * @param {string} stampId スタンプUUID
     * @param {PatchStampRequest} [patchStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStamp: async (
      stampId: string,
      patchStampRequest?: PatchStampRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'stampId' is not null or undefined
      assertParamExists("editStamp", "stampId", stampId);
      const localVarPath = `/stamps/{stampId}`.replace(
        `{${"stampId"}}`,
        encodeURIComponent(String(stampId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchStampRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレットを編集
     * @param {string} paletteId スタンプパレットUUID
     * @param {PatchStampPaletteRequest} [patchStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStampPalette: async (
      paletteId: string,
      patchStampPaletteRequest?: PatchStampPaletteRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'paletteId' is not null or undefined
      assertParamExists("editStampPalette", "paletteId", paletteId);
      const localVarPath = `/stamp-palettes/{paletteId}`.replace(
        `{${"paletteId"}}`,
        encodeURIComponent(String(paletteId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchStampPaletteRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageStamps: async (
      messageId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("getMessageStamps", "messageId", messageId);
      const localVarPath = `/messages/{messageId}/stamps`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStampHistory: async (
      limit?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/stamp-history`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したスタンプの情報を取得します。
     * @summary スタンプ情報を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamp: async (
      stampId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'stampId' is not null or undefined
      assertParamExists("getStamp", "stampId", stampId);
      const localVarPath = `/stamps/{stampId}`.replace(
        `{${"stampId"}}`,
        encodeURIComponent(String(stampId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したIDのスタンプ画像を返します。
     * @summary スタンプ画像を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampImage: async (
      stampId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'stampId' is not null or undefined
      assertParamExists("getStampImage", "stampId", stampId);
      const localVarPath = `/stamps/{stampId}/image`.replace(
        `{${"stampId"}}`,
        encodeURIComponent(String(stampId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したスタンプパレットの情報を取得します。
     * @summary スタンプパレットを取得
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampPalette: async (
      paletteId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'paletteId' is not null or undefined
      assertParamExists("getStampPalette", "paletteId", paletteId);
      const localVarPath = `/stamp-palettes/{paletteId}`.replace(
        `{${"paletteId"}}`,
        encodeURIComponent(String(paletteId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自身が所有しているスタンプパレットのリストを取得します。
     * @summary スタンプパレットのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampPalettes: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/stamp-palettes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したスタンプの統計情報を取得します。
     * @summary スタンプ統計情報を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampStats: async (
      stampId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'stampId' is not null or undefined
      assertParamExists("getStampStats", "stampId", stampId);
      const localVarPath = `/stamps/{stampId}/stats`.replace(
        `{${"stampId"}}`,
        encodeURIComponent(String(stampId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * スタンプのリストを取得します。
     * @summary スタンプリストを取得
     * @param {boolean} [includeUnicode] Unicode絵文字を含ませるかどうか Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください
     * @param {GetStampsTypeEnum} [type] 取得するスタンプの種類
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamps: async (
      includeUnicode?: boolean,
      type?: GetStampsTypeEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/stamps`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (includeUnicode !== undefined) {
        localVarQueryParameter["include-unicode"] = includeUnicode;
      }

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageStamp: async (
      messageId: string,
      stampId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("removeMessageStamp", "messageId", messageId);
      // verify required parameter 'stampId' is not null or undefined
      assertParamExists("removeMessageStamp", "stampId", stampId);
      const localVarPath = `/messages/{messageId}/stamps/{stampId}`
        .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)))
        .replace(`{${"stampId"}}`, encodeURIComponent(String(stampId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * StampApi - functional programming interface
 * @export
 */
export const StampApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StampApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addMessageStamp(
      messageId: string,
      stampId: string,
      postMessageStampRequest?: PostMessageStampRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addMessageStamp(
        messageId,
        stampId,
        postMessageStampRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.addMessageStamp"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したスタンプの画像を変更します。
     * @summary スタンプ画像を変更
     * @param {string} stampId スタンプUUID
     * @param {File} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeStampImage(
      stampId: string,
      file: File,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.changeStampImage(
          stampId,
          file,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.changeStampImage"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * スタンプを新規作成します。
     * @summary スタンプを作成
     * @param {string} name スタンプ名
     * @param {File} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createStamp(
      name: string,
      file: File,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stamp>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createStamp(
        name,
        file,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.createStamp"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * スタンプパレットを作成します。
     * @summary スタンプパレットを作成
     * @param {PostStampPaletteRequest} [postStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createStampPalette(
      postStampPaletteRequest?: PostStampPaletteRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StampPalette>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createStampPalette(
          postStampPaletteRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.createStampPalette"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
     * @summary スタンプを削除
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteStamp(
      stampId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStamp(
        stampId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.deleteStamp"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレットを削除
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteStampPalette(
      paletteId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteStampPalette(paletteId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.deleteStampPalette"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したスタンプの情報を変更します。
     * @summary スタンプ情報を変更
     * @param {string} stampId スタンプUUID
     * @param {PatchStampRequest} [patchStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editStamp(
      stampId: string,
      patchStampRequest?: PatchStampRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editStamp(
        stampId,
        patchStampRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.editStamp"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレットを編集
     * @param {string} paletteId スタンプパレットUUID
     * @param {PatchStampPaletteRequest} [patchStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editStampPalette(
      paletteId: string,
      patchStampPaletteRequest?: PatchStampPaletteRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.editStampPalette(
          paletteId,
          patchStampPaletteRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.editStampPalette"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessageStamps(
      messageId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<MessageStamp>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMessageStamps(messageId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.getMessageStamps"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyStampHistory(
      limit?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<StampHistoryEntry>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyStampHistory(limit, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.getMyStampHistory"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したスタンプの情報を取得します。
     * @summary スタンプ情報を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStamp(
      stampId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stamp>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getStamp(
        stampId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.getStamp"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したIDのスタンプ画像を返します。
     * @summary スタンプ画像を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStampImage(
      stampId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getStampImage(
        stampId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.getStampImage"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したスタンプパレットの情報を取得します。
     * @summary スタンプパレットを取得
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStampPalette(
      paletteId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StampPalette>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getStampPalette(
        paletteId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.getStampPalette"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自身が所有しているスタンプパレットのリストを取得します。
     * @summary スタンプパレットのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStampPalettes(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<StampPalette>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getStampPalettes(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.getStampPalettes"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したスタンプの統計情報を取得します。
     * @summary スタンプ統計情報を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStampStats(
      stampId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StampStats>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getStampStats(
        stampId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.getStampStats"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * スタンプのリストを取得します。
     * @summary スタンプリストを取得
     * @param {boolean} [includeUnicode] Unicode絵文字を含ませるかどうか Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください
     * @param {GetStampsTypeEnum} [type] 取得するスタンプの種類
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getStamps(
      includeUnicode?: boolean,
      type?: GetStampsTypeEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<StampWithThumbnail>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getStamps(
        includeUnicode,
        type,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.getStamps"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMessageStamp(
      messageId: string,
      stampId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.removeMessageStamp(
          messageId,
          stampId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StampApi.removeMessageStamp"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * StampApi - factory interface
 * @export
 */
export const StampApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = StampApiFp(configuration);
  return {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMessageStamp(
      messageId: string,
      stampId: string,
      postMessageStampRequest?: PostMessageStampRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .addMessageStamp(messageId, stampId, postMessageStampRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したスタンプの画像を変更します。
     * @summary スタンプ画像を変更
     * @param {string} stampId スタンプUUID
     * @param {File} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStampImage(
      stampId: string,
      file: File,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .changeStampImage(stampId, file, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * スタンプを新規作成します。
     * @summary スタンプを作成
     * @param {string} name スタンプ名
     * @param {File} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStamp(name: string, file: File, options?: any): AxiosPromise<Stamp> {
      return localVarFp
        .createStamp(name, file, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * スタンプパレットを作成します。
     * @summary スタンプパレットを作成
     * @param {PostStampPaletteRequest} [postStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStampPalette(
      postStampPaletteRequest?: PostStampPaletteRequest,
      options?: any,
    ): AxiosPromise<StampPalette> {
      return localVarFp
        .createStampPalette(postStampPaletteRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
     * @summary スタンプを削除
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStamp(stampId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteStamp(stampId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレットを削除
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStampPalette(paletteId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteStampPalette(paletteId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したスタンプの情報を変更します。
     * @summary スタンプ情報を変更
     * @param {string} stampId スタンプUUID
     * @param {PatchStampRequest} [patchStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStamp(
      stampId: string,
      patchStampRequest?: PatchStampRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editStamp(stampId, patchStampRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレットを編集
     * @param {string} paletteId スタンプパレットUUID
     * @param {PatchStampPaletteRequest} [patchStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStampPalette(
      paletteId: string,
      patchStampPaletteRequest?: PatchStampPaletteRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editStampPalette(paletteId, patchStampPaletteRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageStamps(
      messageId: string,
      options?: any,
    ): AxiosPromise<Array<MessageStamp>> {
      return localVarFp
        .getMessageStamps(messageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStampHistory(
      limit?: number,
      options?: any,
    ): AxiosPromise<Array<StampHistoryEntry>> {
      return localVarFp
        .getMyStampHistory(limit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したスタンプの情報を取得します。
     * @summary スタンプ情報を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamp(stampId: string, options?: any): AxiosPromise<Stamp> {
      return localVarFp
        .getStamp(stampId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したIDのスタンプ画像を返します。
     * @summary スタンプ画像を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampImage(stampId: string, options?: any): AxiosPromise<File> {
      return localVarFp
        .getStampImage(stampId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したスタンプパレットの情報を取得します。
     * @summary スタンプパレットを取得
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampPalette(
      paletteId: string,
      options?: any,
    ): AxiosPromise<StampPalette> {
      return localVarFp
        .getStampPalette(paletteId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自身が所有しているスタンプパレットのリストを取得します。
     * @summary スタンプパレットのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampPalettes(options?: any): AxiosPromise<Array<StampPalette>> {
      return localVarFp
        .getStampPalettes(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したスタンプの統計情報を取得します。
     * @summary スタンプ統計情報を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampStats(stampId: string, options?: any): AxiosPromise<StampStats> {
      return localVarFp
        .getStampStats(stampId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * スタンプのリストを取得します。
     * @summary スタンプリストを取得
     * @param {boolean} [includeUnicode] Unicode絵文字を含ませるかどうか Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください
     * @param {GetStampsTypeEnum} [type] 取得するスタンプの種類
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamps(
      includeUnicode?: boolean,
      type?: GetStampsTypeEnum,
      options?: any,
    ): AxiosPromise<Array<StampWithThumbnail>> {
      return localVarFp
        .getStamps(includeUnicode, type, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageStamp(
      messageId: string,
      stampId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .removeMessageStamp(messageId, stampId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * StampApi - object-oriented interface
 * @export
 * @class StampApi
 * @extends {BaseAPI}
 */
export class StampApi extends BaseAPI {
  /**
   * 指定したメッセージに指定したスタンプを押します。
   * @summary スタンプを押す
   * @param {string} messageId メッセージUUID
   * @param {string} stampId スタンプUUID
   * @param {PostMessageStampRequest} [postMessageStampRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public addMessageStamp(
    messageId: string,
    stampId: string,
    postMessageStampRequest?: PostMessageStampRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return StampApiFp(this.configuration)
      .addMessageStamp(messageId, stampId, postMessageStampRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したスタンプの画像を変更します。
   * @summary スタンプ画像を変更
   * @param {string} stampId スタンプUUID
   * @param {File} file スタンプ画像(1MBまでのpng, jpeg, gif)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public changeStampImage(
    stampId: string,
    file: File,
    options?: RawAxiosRequestConfig,
  ) {
    return StampApiFp(this.configuration)
      .changeStampImage(stampId, file, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * スタンプを新規作成します。
   * @summary スタンプを作成
   * @param {string} name スタンプ名
   * @param {File} file スタンプ画像(1MBまでのpng, jpeg, gif)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public createStamp(
    name: string,
    file: File,
    options?: RawAxiosRequestConfig,
  ) {
    return StampApiFp(this.configuration)
      .createStamp(name, file, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * スタンプパレットを作成します。
   * @summary スタンプパレットを作成
   * @param {PostStampPaletteRequest} [postStampPaletteRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public createStampPalette(
    postStampPaletteRequest?: PostStampPaletteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return StampApiFp(this.configuration)
      .createStampPalette(postStampPaletteRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
   * @summary スタンプを削除
   * @param {string} stampId スタンプUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public deleteStamp(stampId: string, options?: RawAxiosRequestConfig) {
    return StampApiFp(this.configuration)
      .deleteStamp(stampId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
   * @summary スタンプパレットを削除
   * @param {string} paletteId スタンプパレットUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public deleteStampPalette(
    paletteId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return StampApiFp(this.configuration)
      .deleteStampPalette(paletteId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したスタンプの情報を変更します。
   * @summary スタンプ情報を変更
   * @param {string} stampId スタンプUUID
   * @param {PatchStampRequest} [patchStampRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public editStamp(
    stampId: string,
    patchStampRequest?: PatchStampRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return StampApiFp(this.configuration)
      .editStamp(stampId, patchStampRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
   * @summary スタンプパレットを編集
   * @param {string} paletteId スタンプパレットUUID
   * @param {PatchStampPaletteRequest} [patchStampPaletteRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public editStampPalette(
    paletteId: string,
    patchStampPaletteRequest?: PatchStampPaletteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return StampApiFp(this.configuration)
      .editStampPalette(paletteId, patchStampPaletteRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したメッセージに押されているスタンプのリストを取得します。
   * @summary メッセージのスタンプリストを取得
   * @param {string} messageId メッセージUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public getMessageStamps(messageId: string, options?: RawAxiosRequestConfig) {
    return StampApiFp(this.configuration)
      .getMessageStamps(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
   * @summary スタンプ履歴を取得
   * @param {number} [limit] 件数
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public getMyStampHistory(limit?: number, options?: RawAxiosRequestConfig) {
    return StampApiFp(this.configuration)
      .getMyStampHistory(limit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したスタンプの情報を取得します。
   * @summary スタンプ情報を取得
   * @param {string} stampId スタンプUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public getStamp(stampId: string, options?: RawAxiosRequestConfig) {
    return StampApiFp(this.configuration)
      .getStamp(stampId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したIDのスタンプ画像を返します。
   * @summary スタンプ画像を取得
   * @param {string} stampId スタンプUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public getStampImage(stampId: string, options?: RawAxiosRequestConfig) {
    return StampApiFp(this.configuration)
      .getStampImage(stampId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したスタンプパレットの情報を取得します。
   * @summary スタンプパレットを取得
   * @param {string} paletteId スタンプパレットUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public getStampPalette(paletteId: string, options?: RawAxiosRequestConfig) {
    return StampApiFp(this.configuration)
      .getStampPalette(paletteId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自身が所有しているスタンプパレットのリストを取得します。
   * @summary スタンプパレットのリストを取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public getStampPalettes(options?: RawAxiosRequestConfig) {
    return StampApiFp(this.configuration)
      .getStampPalettes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したスタンプの統計情報を取得します。
   * @summary スタンプ統計情報を取得
   * @param {string} stampId スタンプUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public getStampStats(stampId: string, options?: RawAxiosRequestConfig) {
    return StampApiFp(this.configuration)
      .getStampStats(stampId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * スタンプのリストを取得します。
   * @summary スタンプリストを取得
   * @param {boolean} [includeUnicode] Unicode絵文字を含ませるかどうか Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください
   * @param {GetStampsTypeEnum} [type] 取得するスタンプの種類
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public getStamps(
    includeUnicode?: boolean,
    type?: GetStampsTypeEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return StampApiFp(this.configuration)
      .getStamps(includeUnicode, type, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したメッセージから指定した自身が押したスタンプを削除します。
   * @summary スタンプを消す
   * @param {string} messageId メッセージUUID
   * @param {string} stampId スタンプUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StampApi
   */
  public removeMessageStamp(
    messageId: string,
    stampId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return StampApiFp(this.configuration)
      .removeMessageStamp(messageId, stampId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const GetStampsTypeEnum = {
  Unicode: "unicode",
  Original: "original",
} as const;
export type GetStampsTypeEnum =
  (typeof GetStampsTypeEnum)[keyof typeof GetStampsTypeEnum];
