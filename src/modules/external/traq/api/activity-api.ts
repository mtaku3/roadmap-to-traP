/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { ActivityTimelineMessage } from "../model";
/**
 * ActivityApi - axios parameter creator
 * @export
 */
export const ActivityApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * パブリックチャンネルの直近の投稿メッセージを作成日時の降順で取得します。 `all`が`true`でない場合、購読チャンネルのみのタイムラインを取得します
     * @summary アクテビティタイムラインを取得
     * @param {number} [limit] 取得する件数
     * @param {boolean} [all] 全てのチャンネルのタイムラインを取得する
     * @param {boolean} [perChannel] 同じチャンネルのメッセージは最新のもののみ取得するか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityTimeline: async (
      limit?: number,
      all?: boolean,
      perChannel?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/activity/timeline`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (all !== undefined) {
        localVarQueryParameter["all"] = all;
      }

      if (perChannel !== undefined) {
        localVarQueryParameter["per_channel"] = perChannel;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
     * @summary オンラインユーザーリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOnlineUsers: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/activity/onlines`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ActivityApi - functional programming interface
 * @export
 */
export const ActivityApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ActivityApiAxiosParamCreator(configuration);
  return {
    /**
     * パブリックチャンネルの直近の投稿メッセージを作成日時の降順で取得します。 `all`が`true`でない場合、購読チャンネルのみのタイムラインを取得します
     * @summary アクテビティタイムラインを取得
     * @param {number} [limit] 取得する件数
     * @param {boolean} [all] 全てのチャンネルのタイムラインを取得する
     * @param {boolean} [perChannel] 同じチャンネルのメッセージは最新のもののみ取得するか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getActivityTimeline(
      limit?: number,
      all?: boolean,
      perChannel?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ActivityTimelineMessage>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getActivityTimeline(
          limit,
          all,
          perChannel,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ActivityApi.getActivityTimeline"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
     * @summary オンラインユーザーリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOnlineUsers(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getOnlineUsers(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ActivityApi.getOnlineUsers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ActivityApi - factory interface
 * @export
 */
export const ActivityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ActivityApiFp(configuration);
  return {
    /**
     * パブリックチャンネルの直近の投稿メッセージを作成日時の降順で取得します。 `all`が`true`でない場合、購読チャンネルのみのタイムラインを取得します
     * @summary アクテビティタイムラインを取得
     * @param {number} [limit] 取得する件数
     * @param {boolean} [all] 全てのチャンネルのタイムラインを取得する
     * @param {boolean} [perChannel] 同じチャンネルのメッセージは最新のもののみ取得するか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityTimeline(
      limit?: number,
      all?: boolean,
      perChannel?: boolean,
      options?: any,
    ): AxiosPromise<Array<ActivityTimelineMessage>> {
      return localVarFp
        .getActivityTimeline(limit, all, perChannel, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
     * @summary オンラインユーザーリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOnlineUsers(options?: any): AxiosPromise<Array<string>> {
      return localVarFp
        .getOnlineUsers(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ActivityApi - object-oriented interface
 * @export
 * @class ActivityApi
 * @extends {BaseAPI}
 */
export class ActivityApi extends BaseAPI {
  /**
   * パブリックチャンネルの直近の投稿メッセージを作成日時の降順で取得します。 `all`が`true`でない場合、購読チャンネルのみのタイムラインを取得します
   * @summary アクテビティタイムラインを取得
   * @param {number} [limit] 取得する件数
   * @param {boolean} [all] 全てのチャンネルのタイムラインを取得する
   * @param {boolean} [perChannel] 同じチャンネルのメッセージは最新のもののみ取得するか
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ActivityApi
   */
  public getActivityTimeline(
    limit?: number,
    all?: boolean,
    perChannel?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return ActivityApiFp(this.configuration)
      .getActivityTimeline(limit, all, perChannel, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
   * @summary オンラインユーザーリストを取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ActivityApi
   */
  public getOnlineUsers(options?: RawAxiosRequestConfig) {
    return ActivityApiFp(this.configuration)
      .getOnlineUsers(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
