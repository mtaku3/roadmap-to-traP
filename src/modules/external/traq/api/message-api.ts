/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { Message } from "../model";
// @ts-ignore
import { MessageClip } from "../model";
// @ts-ignore
import { MessagePin } from "../model";
// @ts-ignore
import { MessageSearchResult } from "../model";
// @ts-ignore
import { MessageStamp } from "../model";
// @ts-ignore
import { PostMessageRequest } from "../model";
// @ts-ignore
import { PostMessageStampRequest } from "../model";
/**
 * MessageApi - axios parameter creator
 * @export
 */
export const MessageApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMessageStamp: async (
      messageId: string,
      stampId: string,
      postMessageStampRequest?: PostMessageStampRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("addMessageStamp", "messageId", messageId);
      // verify required parameter 'stampId' is not null or undefined
      assertParamExists("addMessageStamp", "stampId", stampId);
      const localVarPath = `/messages/{messageId}/stamps/{stampId}`
        .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)))
        .replace(`{${"stampId"}}`, encodeURIComponent(String(stampId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postMessageStampRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したメッセージをピン留めします。 アーカイブされているチャンネルのメッセージ・存在しないメッセージ・チャンネル当たりの上限数を超えたメッセージのピン留めはできません。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPin: async (
      messageId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("createPin", "messageId", messageId);
      const localVarPath = `/messages/{messageId}/pin`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したメッセージを削除します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
     * @summary メッセージを削除
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage: async (
      messageId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("deleteMessage", "messageId", messageId);
      const localVarPath = `/messages/{messageId}`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したメッセージを編集します。 自身が投稿したメッセージのみ編集することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
     * @summary メッセージを編集
     * @param {string} messageId メッセージUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMessage: async (
      messageId: string,
      postMessageRequest?: PostMessageRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("editMessage", "messageId", messageId);
      const localVarPath = `/messages/{messageId}`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postMessageRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetDirectMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDirectMessages: async (
      userId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetDirectMessagesOrderEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("getDirectMessages", "userId", userId);
      const localVarPath = `/users/{userId}/messages`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (since !== undefined) {
        localVarQueryParameter["since"] =
          (since as any) instanceof Date ? (since as any).toISOString() : since;
      }

      if (until !== undefined) {
        localVarQueryParameter["until"] =
          (until as any) instanceof Date ? (until as any).toISOString() : until;
      }

      if (inclusive !== undefined) {
        localVarQueryParameter["inclusive"] = inclusive;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したメッセージを取得します。
     * @summary メッセージを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage: async (
      messageId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("getMessage", "messageId", messageId);
      const localVarPath = `/messages/{messageId}`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 対象のメッセージの自分のクリップの一覧を返します。
     * @summary 自分のクリップを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageClips: async (
      messageId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("getMessageClips", "messageId", messageId);
      const localVarPath = `/messages/{messageId}/clips`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageStamps: async (
      messageId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("getMessageStamps", "messageId", messageId);
      const localVarPath = `/messages/{messageId}/stamps`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages: async (
      channelId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetMessagesOrderEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("getMessages", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/messages`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (since !== undefined) {
        localVarQueryParameter["since"] =
          (since as any) instanceof Date ? (since as any).toISOString() : since;
      }

      if (until !== undefined) {
        localVarQueryParameter["until"] =
          (until as any) instanceof Date ? (until as any).toISOString() : until;
      }

      if (inclusive !== undefined) {
        localVarQueryParameter["inclusive"] = inclusive;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPin: async (
      messageId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("getPin", "messageId", messageId);
      const localVarPath = `/messages/{messageId}/pin`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDirectMessage: async (
      userId: string,
      postMessageRequest?: PostMessageRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("postDirectMessage", "userId", userId);
      const localVarPath = `/users/{userId}/messages`.replace(
        `{${"userId"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postMessageRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessage: async (
      channelId: string,
      postMessageRequest?: PostMessageRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("postMessage", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/messages`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postMessageRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageStamp: async (
      messageId: string,
      stampId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("removeMessageStamp", "messageId", messageId);
      // verify required parameter 'stampId' is not null or undefined
      assertParamExists("removeMessageStamp", "stampId", stampId);
      const localVarPath = `/messages/{messageId}/stamps/{stampId}`
        .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)))
        .replace(`{${"stampId"}}`, encodeURIComponent(String(stampId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePin: async (
      messageId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("removePin", "messageId", messageId);
      const localVarPath = `/messages/{messageId}/pin`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * メッセージを検索します。
     * @summary メッセージを検索
     * @param {string} [word] 検索ワード Simple-Query-String-Syntaxをパースして検索します
     * @param {string} [after] 投稿日時が指定日時より後
     * @param {string} [before] 投稿日時が指定日時より前
     * @param {string} [_in] メッセージが投稿されたチャンネル
     * @param {string} [to] メンションされたユーザー
     * @param {string} [from] メッセージを投稿したユーザー
     * @param {string} [citation] 引用しているメッセージ
     * @param {boolean} [bot] メッセージを投稿したユーザーがBotかどうか
     * @param {boolean} [hasURL] メッセージがURLを含むか
     * @param {boolean} [hasAttachments] メッセージが添付ファイルを含むか
     * @param {boolean} [hasImage] メッセージが画像を含むか
     * @param {boolean} [hasVideo] メッセージが動画を含むか
     * @param {boolean} [hasAudio] メッセージが音声ファイルを含むか
     * @param {number} [limit] 検索結果から取得するメッセージの最大件数
     * @param {number} [offset] 検索結果から取得するメッセージのオフセット
     * @param {SearchMessagesSortEnum} [sort] ソート順 (作成日時が新しい &#x60;createdAt&#x60;, 作成日時が古い &#x60;-createdAt&#x60;, 更新日時が新しい &#x60;updatedAt&#x60;, 更新日時が古い &#x60;-updatedAt&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMessages: async (
      word?: string,
      after?: string,
      before?: string,
      _in?: string,
      to?: string,
      from?: string,
      citation?: string,
      bot?: boolean,
      hasURL?: boolean,
      hasAttachments?: boolean,
      hasImage?: boolean,
      hasVideo?: boolean,
      hasAudio?: boolean,
      limit?: number,
      offset?: number,
      sort?: SearchMessagesSortEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/messages`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (word !== undefined) {
        localVarQueryParameter["word"] = word;
      }

      if (after !== undefined) {
        localVarQueryParameter["after"] =
          (after as any) instanceof Date ? (after as any).toISOString() : after;
      }

      if (before !== undefined) {
        localVarQueryParameter["before"] =
          (before as any) instanceof Date
            ? (before as any).toISOString()
            : before;
      }

      if (_in !== undefined) {
        localVarQueryParameter["in"] = _in;
      }

      if (to !== undefined) {
        localVarQueryParameter["to"] = to;
      }

      if (from !== undefined) {
        localVarQueryParameter["from"] = from;
      }

      if (citation !== undefined) {
        localVarQueryParameter["citation"] = citation;
      }

      if (bot !== undefined) {
        localVarQueryParameter["bot"] = bot;
      }

      if (hasURL !== undefined) {
        localVarQueryParameter["hasURL"] = hasURL;
      }

      if (hasAttachments !== undefined) {
        localVarQueryParameter["hasAttachments"] = hasAttachments;
      }

      if (hasImage !== undefined) {
        localVarQueryParameter["hasImage"] = hasImage;
      }

      if (hasVideo !== undefined) {
        localVarQueryParameter["hasVideo"] = hasVideo;
      }

      if (hasAudio !== undefined) {
        localVarQueryParameter["hasAudio"] = hasAudio;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MessageApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addMessageStamp(
      messageId: string,
      stampId: string,
      postMessageStampRequest?: PostMessageStampRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addMessageStamp(
        messageId,
        stampId,
        postMessageStampRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.addMessageStamp"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したメッセージをピン留めします。 アーカイブされているチャンネルのメッセージ・存在しないメッセージ・チャンネル当たりの上限数を超えたメッセージのピン留めはできません。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPin(
      messageId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagePin>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPin(
        messageId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.createPin"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したメッセージを削除します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
     * @summary メッセージを削除
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMessage(
      messageId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessage(
        messageId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.deleteMessage"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したメッセージを編集します。 自身が投稿したメッセージのみ編集することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
     * @summary メッセージを編集
     * @param {string} messageId メッセージUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editMessage(
      messageId: string,
      postMessageRequest?: PostMessageRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editMessage(
        messageId,
        postMessageRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.editMessage"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetDirectMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDirectMessages(
      userId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetDirectMessagesOrderEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDirectMessages(
          userId,
          limit,
          offset,
          since,
          until,
          inclusive,
          order,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.getDirectMessages"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したメッセージを取得します。
     * @summary メッセージを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessage(
      messageId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMessage(
        messageId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.getMessage"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 対象のメッセージの自分のクリップの一覧を返します。
     * @summary 自分のクリップを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessageClips(
      messageId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<MessageClip>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageClips(
        messageId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.getMessageClips"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessageStamps(
      messageId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<MessageStamp>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMessageStamps(messageId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.getMessageStamps"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessages(
      channelId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetMessagesOrderEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMessages(
        channelId,
        limit,
        offset,
        since,
        until,
        inclusive,
        order,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.getMessages"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPin(
      messageId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagePin>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPin(
        messageId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.getPin"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postDirectMessage(
      userId: string,
      postMessageRequest?: PostMessageRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postDirectMessage(
          userId,
          postMessageRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.postDirectMessage"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postMessage(
      channelId: string,
      postMessageRequest?: PostMessageRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postMessage(
        channelId,
        postMessageRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.postMessage"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMessageStamp(
      messageId: string,
      stampId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.removeMessageStamp(
          messageId,
          stampId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.removeMessageStamp"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removePin(
      messageId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removePin(
        messageId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.removePin"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * メッセージを検索します。
     * @summary メッセージを検索
     * @param {string} [word] 検索ワード Simple-Query-String-Syntaxをパースして検索します
     * @param {string} [after] 投稿日時が指定日時より後
     * @param {string} [before] 投稿日時が指定日時より前
     * @param {string} [_in] メッセージが投稿されたチャンネル
     * @param {string} [to] メンションされたユーザー
     * @param {string} [from] メッセージを投稿したユーザー
     * @param {string} [citation] 引用しているメッセージ
     * @param {boolean} [bot] メッセージを投稿したユーザーがBotかどうか
     * @param {boolean} [hasURL] メッセージがURLを含むか
     * @param {boolean} [hasAttachments] メッセージが添付ファイルを含むか
     * @param {boolean} [hasImage] メッセージが画像を含むか
     * @param {boolean} [hasVideo] メッセージが動画を含むか
     * @param {boolean} [hasAudio] メッセージが音声ファイルを含むか
     * @param {number} [limit] 検索結果から取得するメッセージの最大件数
     * @param {number} [offset] 検索結果から取得するメッセージのオフセット
     * @param {SearchMessagesSortEnum} [sort] ソート順 (作成日時が新しい &#x60;createdAt&#x60;, 作成日時が古い &#x60;-createdAt&#x60;, 更新日時が新しい &#x60;updatedAt&#x60;, 更新日時が古い &#x60;-updatedAt&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchMessages(
      word?: string,
      after?: string,
      before?: string,
      _in?: string,
      to?: string,
      from?: string,
      citation?: string,
      bot?: boolean,
      hasURL?: boolean,
      hasAttachments?: boolean,
      hasImage?: boolean,
      hasVideo?: boolean,
      hasAudio?: boolean,
      limit?: number,
      offset?: number,
      sort?: SearchMessagesSortEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<MessageSearchResult>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchMessages(
        word,
        after,
        before,
        _in,
        to,
        from,
        citation,
        bot,
        hasURL,
        hasAttachments,
        hasImage,
        hasVideo,
        hasAudio,
        limit,
        offset,
        sort,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageApi.searchMessages"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = MessageApiFp(configuration);
  return {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMessageStamp(
      messageId: string,
      stampId: string,
      postMessageStampRequest?: PostMessageStampRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .addMessageStamp(messageId, stampId, postMessageStampRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したメッセージをピン留めします。 アーカイブされているチャンネルのメッセージ・存在しないメッセージ・チャンネル当たりの上限数を超えたメッセージのピン留めはできません。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPin(messageId: string, options?: any): AxiosPromise<MessagePin> {
      return localVarFp
        .createPin(messageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したメッセージを削除します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
     * @summary メッセージを削除
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage(messageId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteMessage(messageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したメッセージを編集します。 自身が投稿したメッセージのみ編集することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
     * @summary メッセージを編集
     * @param {string} messageId メッセージUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMessage(
      messageId: string,
      postMessageRequest?: PostMessageRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editMessage(messageId, postMessageRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetDirectMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDirectMessages(
      userId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetDirectMessagesOrderEnum,
      options?: any,
    ): AxiosPromise<Array<Message>> {
      return localVarFp
        .getDirectMessages(
          userId,
          limit,
          offset,
          since,
          until,
          inclusive,
          order,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したメッセージを取得します。
     * @summary メッセージを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(messageId: string, options?: any): AxiosPromise<Message> {
      return localVarFp
        .getMessage(messageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 対象のメッセージの自分のクリップの一覧を返します。
     * @summary 自分のクリップを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageClips(
      messageId: string,
      options?: any,
    ): AxiosPromise<Array<MessageClip>> {
      return localVarFp
        .getMessageClips(messageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageStamps(
      messageId: string,
      options?: any,
    ): AxiosPromise<Array<MessageStamp>> {
      return localVarFp
        .getMessageStamps(messageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages(
      channelId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetMessagesOrderEnum,
      options?: any,
    ): AxiosPromise<Array<Message>> {
      return localVarFp
        .getMessages(
          channelId,
          limit,
          offset,
          since,
          until,
          inclusive,
          order,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPin(messageId: string, options?: any): AxiosPromise<MessagePin> {
      return localVarFp
        .getPin(messageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDirectMessage(
      userId: string,
      postMessageRequest?: PostMessageRequest,
      options?: any,
    ): AxiosPromise<Message> {
      return localVarFp
        .postDirectMessage(userId, postMessageRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessage(
      channelId: string,
      postMessageRequest?: PostMessageRequest,
      options?: any,
    ): AxiosPromise<Message> {
      return localVarFp
        .postMessage(channelId, postMessageRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageStamp(
      messageId: string,
      stampId: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .removeMessageStamp(messageId, stampId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePin(messageId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .removePin(messageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * メッセージを検索します。
     * @summary メッセージを検索
     * @param {string} [word] 検索ワード Simple-Query-String-Syntaxをパースして検索します
     * @param {string} [after] 投稿日時が指定日時より後
     * @param {string} [before] 投稿日時が指定日時より前
     * @param {string} [_in] メッセージが投稿されたチャンネル
     * @param {string} [to] メンションされたユーザー
     * @param {string} [from] メッセージを投稿したユーザー
     * @param {string} [citation] 引用しているメッセージ
     * @param {boolean} [bot] メッセージを投稿したユーザーがBotかどうか
     * @param {boolean} [hasURL] メッセージがURLを含むか
     * @param {boolean} [hasAttachments] メッセージが添付ファイルを含むか
     * @param {boolean} [hasImage] メッセージが画像を含むか
     * @param {boolean} [hasVideo] メッセージが動画を含むか
     * @param {boolean} [hasAudio] メッセージが音声ファイルを含むか
     * @param {number} [limit] 検索結果から取得するメッセージの最大件数
     * @param {number} [offset] 検索結果から取得するメッセージのオフセット
     * @param {SearchMessagesSortEnum} [sort] ソート順 (作成日時が新しい &#x60;createdAt&#x60;, 作成日時が古い &#x60;-createdAt&#x60;, 更新日時が新しい &#x60;updatedAt&#x60;, 更新日時が古い &#x60;-updatedAt&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMessages(
      word?: string,
      after?: string,
      before?: string,
      _in?: string,
      to?: string,
      from?: string,
      citation?: string,
      bot?: boolean,
      hasURL?: boolean,
      hasAttachments?: boolean,
      hasImage?: boolean,
      hasVideo?: boolean,
      hasAudio?: boolean,
      limit?: number,
      offset?: number,
      sort?: SearchMessagesSortEnum,
      options?: any,
    ): AxiosPromise<MessageSearchResult> {
      return localVarFp
        .searchMessages(
          word,
          after,
          before,
          _in,
          to,
          from,
          citation,
          bot,
          hasURL,
          hasAttachments,
          hasImage,
          hasVideo,
          hasAudio,
          limit,
          offset,
          sort,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
  /**
   * 指定したメッセージに指定したスタンプを押します。
   * @summary スタンプを押す
   * @param {string} messageId メッセージUUID
   * @param {string} stampId スタンプUUID
   * @param {PostMessageStampRequest} [postMessageStampRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public addMessageStamp(
    messageId: string,
    stampId: string,
    postMessageStampRequest?: PostMessageStampRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageApiFp(this.configuration)
      .addMessageStamp(messageId, stampId, postMessageStampRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したメッセージをピン留めします。 アーカイブされているチャンネルのメッセージ・存在しないメッセージ・チャンネル当たりの上限数を超えたメッセージのピン留めはできません。
   * @summary ピン留めする
   * @param {string} messageId メッセージUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public createPin(messageId: string, options?: RawAxiosRequestConfig) {
    return MessageApiFp(this.configuration)
      .createPin(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したメッセージを削除します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
   * @summary メッセージを削除
   * @param {string} messageId メッセージUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public deleteMessage(messageId: string, options?: RawAxiosRequestConfig) {
    return MessageApiFp(this.configuration)
      .deleteMessage(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したメッセージを編集します。 自身が投稿したメッセージのみ編集することができます。 アーカイブされているチャンネルのメッセージを編集することは出来ません。
   * @summary メッセージを編集
   * @param {string} messageId メッセージUUID
   * @param {PostMessageRequest} [postMessageRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public editMessage(
    messageId: string,
    postMessageRequest?: PostMessageRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageApiFp(this.configuration)
      .editMessage(messageId, postMessageRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーとのダイレクトメッセージのリストを取得します。
   * @summary ダイレクトメッセージのリストを取得
   * @param {string} userId ユーザーUUID
   * @param {number} [limit] 取得する件数
   * @param {number} [offset] 取得するオフセット
   * @param {string} [since] 取得する時間範囲の開始日時
   * @param {string} [until] 取得する時間範囲の終了日時
   * @param {boolean} [inclusive] 範囲の端を含めるかどうか
   * @param {GetDirectMessagesOrderEnum} [order] 昇順か降順か
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public getDirectMessages(
    userId: string,
    limit?: number,
    offset?: number,
    since?: string,
    until?: string,
    inclusive?: boolean,
    order?: GetDirectMessagesOrderEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageApiFp(this.configuration)
      .getDirectMessages(
        userId,
        limit,
        offset,
        since,
        until,
        inclusive,
        order,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したメッセージを取得します。
   * @summary メッセージを取得
   * @param {string} messageId メッセージUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public getMessage(messageId: string, options?: RawAxiosRequestConfig) {
    return MessageApiFp(this.configuration)
      .getMessage(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 対象のメッセージの自分のクリップの一覧を返します。
   * @summary 自分のクリップを取得
   * @param {string} messageId メッセージUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public getMessageClips(messageId: string, options?: RawAxiosRequestConfig) {
    return MessageApiFp(this.configuration)
      .getMessageClips(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したメッセージに押されているスタンプのリストを取得します。
   * @summary メッセージのスタンプリストを取得
   * @param {string} messageId メッセージUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public getMessageStamps(messageId: string, options?: RawAxiosRequestConfig) {
    return MessageApiFp(this.configuration)
      .getMessageStamps(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルのメッセージのリストを取得します。
   * @summary チャンネルメッセージのリストを取得
   * @param {string} channelId チャンネルUUID
   * @param {number} [limit] 取得する件数
   * @param {number} [offset] 取得するオフセット
   * @param {string} [since] 取得する時間範囲の開始日時
   * @param {string} [until] 取得する時間範囲の終了日時
   * @param {boolean} [inclusive] 範囲の端を含めるかどうか
   * @param {GetMessagesOrderEnum} [order] 昇順か降順か
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public getMessages(
    channelId: string,
    limit?: number,
    offset?: number,
    since?: string,
    until?: string,
    inclusive?: boolean,
    order?: GetMessagesOrderEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageApiFp(this.configuration)
      .getMessages(
        channelId,
        limit,
        offset,
        since,
        until,
        inclusive,
        order,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したメッセージのピン留め情報を取得します。
   * @summary ピン留めを取得
   * @param {string} messageId メッセージUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public getPin(messageId: string, options?: RawAxiosRequestConfig) {
    return MessageApiFp(this.configuration)
      .getPin(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したユーザーにダイレクトメッセージを送信します。
   * @summary ダイレクトメッセージを送信
   * @param {string} userId ユーザーUUID
   * @param {PostMessageRequest} [postMessageRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public postDirectMessage(
    userId: string,
    postMessageRequest?: PostMessageRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageApiFp(this.configuration)
      .postDirectMessage(userId, postMessageRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
   * @summary チャンネルにメッセージを投稿
   * @param {string} channelId チャンネルUUID
   * @param {PostMessageRequest} [postMessageRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public postMessage(
    channelId: string,
    postMessageRequest?: PostMessageRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageApiFp(this.configuration)
      .postMessage(channelId, postMessageRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したメッセージから指定した自身が押したスタンプを削除します。
   * @summary スタンプを消す
   * @param {string} messageId メッセージUUID
   * @param {string} stampId スタンプUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public removeMessageStamp(
    messageId: string,
    stampId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageApiFp(this.configuration)
      .removeMessageStamp(messageId, stampId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したメッセージのピン留めを外します。
   * @summary ピン留めを外す
   * @param {string} messageId メッセージUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public removePin(messageId: string, options?: RawAxiosRequestConfig) {
    return MessageApiFp(this.configuration)
      .removePin(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * メッセージを検索します。
   * @summary メッセージを検索
   * @param {string} [word] 検索ワード Simple-Query-String-Syntaxをパースして検索します
   * @param {string} [after] 投稿日時が指定日時より後
   * @param {string} [before] 投稿日時が指定日時より前
   * @param {string} [_in] メッセージが投稿されたチャンネル
   * @param {string} [to] メンションされたユーザー
   * @param {string} [from] メッセージを投稿したユーザー
   * @param {string} [citation] 引用しているメッセージ
   * @param {boolean} [bot] メッセージを投稿したユーザーがBotかどうか
   * @param {boolean} [hasURL] メッセージがURLを含むか
   * @param {boolean} [hasAttachments] メッセージが添付ファイルを含むか
   * @param {boolean} [hasImage] メッセージが画像を含むか
   * @param {boolean} [hasVideo] メッセージが動画を含むか
   * @param {boolean} [hasAudio] メッセージが音声ファイルを含むか
   * @param {number} [limit] 検索結果から取得するメッセージの最大件数
   * @param {number} [offset] 検索結果から取得するメッセージのオフセット
   * @param {SearchMessagesSortEnum} [sort] ソート順 (作成日時が新しい &#x60;createdAt&#x60;, 作成日時が古い &#x60;-createdAt&#x60;, 更新日時が新しい &#x60;updatedAt&#x60;, 更新日時が古い &#x60;-updatedAt&#x60;)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageApi
   */
  public searchMessages(
    word?: string,
    after?: string,
    before?: string,
    _in?: string,
    to?: string,
    from?: string,
    citation?: string,
    bot?: boolean,
    hasURL?: boolean,
    hasAttachments?: boolean,
    hasImage?: boolean,
    hasVideo?: boolean,
    hasAudio?: boolean,
    limit?: number,
    offset?: number,
    sort?: SearchMessagesSortEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageApiFp(this.configuration)
      .searchMessages(
        word,
        after,
        before,
        _in,
        to,
        from,
        citation,
        bot,
        hasURL,
        hasAttachments,
        hasImage,
        hasVideo,
        hasAudio,
        limit,
        offset,
        sort,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const GetDirectMessagesOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type GetDirectMessagesOrderEnum =
  (typeof GetDirectMessagesOrderEnum)[keyof typeof GetDirectMessagesOrderEnum];
/**
 * @export
 */
export const GetMessagesOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type GetMessagesOrderEnum =
  (typeof GetMessagesOrderEnum)[keyof typeof GetMessagesOrderEnum];
/**
 * @export
 */
export const SearchMessagesSortEnum = {
  CreatedAt: "createdAt",
  CreatedAt2: "-createdAt",
  UpdatedAt: "updatedAt",
  UpdatedAt2: "-updatedAt",
} as const;
export type SearchMessagesSortEnum =
  (typeof SearchMessagesSortEnum)[keyof typeof SearchMessagesSortEnum];
