/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { Message } from "../model";
// @ts-ignore
import { PatchWebhookRequest } from "../model";
// @ts-ignore
import { PostWebhookRequest } from "../model";
// @ts-ignore
import { Webhook } from "../model";
/**
 * WebhookApi - axios parameter creator
 * @export
 */
export const WebhookApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 指定したWebhookのアイコン画像を変更します。
     * @summary Webhookのアイコンを変更
     * @param {string} webhookId WebhookUUID
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWebhookIcon: async (
      webhookId: string,
      file: File,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'webhookId' is not null or undefined
      assertParamExists("changeWebhookIcon", "webhookId", webhookId);
      // verify required parameter 'file' is not null or undefined
      assertParamExists("changeWebhookIcon", "file", file);
      const localVarPath = `/webhooks/{webhookId}/icon`.replace(
        `{${"webhookId"}}`,
        encodeURIComponent(String(webhookId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Webhookを新規作成します。 `secret`が空文字の場合、insecureウェブフックが作成されます。
     * @summary Webhookを新規作成
     * @param {PostWebhookRequest} [postWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhook: async (
      postWebhookRequest?: PostWebhookRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/webhooks`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postWebhookRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したWebhookを削除します。 Webhookによって投稿されたメッセージは削除されません。
     * @summary Webhookを削除
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook: async (
      webhookId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'webhookId' is not null or undefined
      assertParamExists("deleteWebhook", "webhookId", webhookId);
      const localVarPath = `/webhooks/{webhookId}`.replace(
        `{${"webhookId"}}`,
        encodeURIComponent(String(webhookId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したWebhookの情報を変更します。
     * @summary Webhook情報を変更
     * @param {string} webhookId WebhookUUID
     * @param {PatchWebhookRequest} [patchWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editWebhook: async (
      webhookId: string,
      patchWebhookRequest?: PatchWebhookRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'webhookId' is not null or undefined
      assertParamExists("editWebhook", "webhookId", webhookId);
      const localVarPath = `/webhooks/{webhookId}`.replace(
        `{${"webhookId"}}`,
        encodeURIComponent(String(webhookId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchWebhookRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したWebhookの詳細を取得します。
     * @summary Webhook情報を取得
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook: async (
      webhookId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'webhookId' is not null or undefined
      assertParamExists("getWebhook", "webhookId", webhookId);
      const localVarPath = `/webhooks/{webhookId}`.replace(
        `{${"webhookId"}}`,
        encodeURIComponent(String(webhookId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したWebhookのアイコン画像を取得します
     * @summary Webhookのアイコンを取得
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookIcon: async (
      webhookId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'webhookId' is not null or undefined
      assertParamExists("getWebhookIcon", "webhookId", webhookId);
      const localVarPath = `/webhooks/{webhookId}/icon`.replace(
        `{${"webhookId"}}`,
        encodeURIComponent(String(webhookId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定されたWebhookが投稿したメッセージのリストを返します。
     * @summary Webhookの投稿メッセージのリストを取得
     * @param {string} webhookId WebhookUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetWebhookMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookMessages: async (
      webhookId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetWebhookMessagesOrderEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'webhookId' is not null or undefined
      assertParamExists("getWebhookMessages", "webhookId", webhookId);
      const localVarPath = `/webhooks/{webhookId}/messages`.replace(
        `{${"webhookId"}}`,
        encodeURIComponent(String(webhookId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (since !== undefined) {
        localVarQueryParameter["since"] =
          (since as any) instanceof Date ? (since as any).toISOString() : since;
      }

      if (until !== undefined) {
        localVarQueryParameter["until"] =
          (until as any) instanceof Date ? (until as any).toISOString() : until;
      }

      if (inclusive !== undefined) {
        localVarQueryParameter["inclusive"] = inclusive;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Webhookのリストを取得します。 allがtrueで無い場合は、自分がオーナーのWebhookのリストを返します。
     * @summary Webhook情報のリストを取得します
     * @param {boolean} [all] 全てのWebhookを取得します。権限が必要です。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks: async (
      all?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/webhooks`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (all !== undefined) {
        localVarQueryParameter["all"] = all;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Webhookにメッセージを投稿します。 secureなウェブフックに対しては`X-TRAQ-Signature`ヘッダーが必須です。 アーカイブされているチャンネルには投稿できません。
     * @summary Webhookを送信
     * @param {string} webhookId WebhookUUID
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ(Secretが設定されている場合は必須)
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {number} [embed] メンション・チャンネルリンクを自動埋め込みする場合に1を指定する
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebhook: async (
      webhookId: string,
      xTRAQSignature?: string,
      xTRAQChannelId?: string,
      embed?: number,
      body?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'webhookId' is not null or undefined
      assertParamExists("postWebhook", "webhookId", webhookId);
      const localVarPath = `/webhooks/{webhookId}`.replace(
        `{${"webhookId"}}`,
        encodeURIComponent(String(webhookId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (embed !== undefined) {
        localVarQueryParameter["embed"] = embed;
      }

      if (xTRAQSignature != null) {
        localVarHeaderParameter["X-TRAQ-Signature"] = String(xTRAQSignature);
      }

      if (xTRAQChannelId != null) {
        localVarHeaderParameter["X-TRAQ-Channel-Id"] = String(xTRAQChannelId);
      }

      localVarHeaderParameter["Content-Type"] = "text/plain";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WebhookApi - functional programming interface
 * @export
 */
export const WebhookApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WebhookApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したWebhookのアイコン画像を変更します。
     * @summary Webhookのアイコンを変更
     * @param {string} webhookId WebhookUUID
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeWebhookIcon(
      webhookId: string,
      file: File,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.changeWebhookIcon(
          webhookId,
          file,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WebhookApi.changeWebhookIcon"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Webhookを新規作成します。 `secret`が空文字の場合、insecureウェブフックが作成されます。
     * @summary Webhookを新規作成
     * @param {PostWebhookRequest} [postWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createWebhook(
      postWebhookRequest?: PostWebhookRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createWebhook(
        postWebhookRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WebhookApi.createWebhook"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したWebhookを削除します。 Webhookによって投稿されたメッセージは削除されません。
     * @summary Webhookを削除
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteWebhook(
      webhookId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhook(
        webhookId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WebhookApi.deleteWebhook"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したWebhookの情報を変更します。
     * @summary Webhook情報を変更
     * @param {string} webhookId WebhookUUID
     * @param {PatchWebhookRequest} [patchWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editWebhook(
      webhookId: string,
      patchWebhookRequest?: PatchWebhookRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editWebhook(
        webhookId,
        patchWebhookRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WebhookApi.editWebhook"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したWebhookの詳細を取得します。
     * @summary Webhook情報を取得
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWebhook(
      webhookId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhook(
        webhookId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WebhookApi.getWebhook"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したWebhookのアイコン画像を取得します
     * @summary Webhookのアイコンを取得
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWebhookIcon(
      webhookId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhookIcon(
        webhookId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WebhookApi.getWebhookIcon"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定されたWebhookが投稿したメッセージのリストを返します。
     * @summary Webhookの投稿メッセージのリストを取得
     * @param {string} webhookId WebhookUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetWebhookMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWebhookMessages(
      webhookId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetWebhookMessagesOrderEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getWebhookMessages(
          webhookId,
          limit,
          offset,
          since,
          until,
          inclusive,
          order,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WebhookApi.getWebhookMessages"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Webhookのリストを取得します。 allがtrueで無い場合は、自分がオーナーのWebhookのリストを返します。
     * @summary Webhook情報のリストを取得します
     * @param {boolean} [all] 全てのWebhookを取得します。権限が必要です。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWebhooks(
      all?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Webhook>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhooks(
        all,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WebhookApi.getWebhooks"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Webhookにメッセージを投稿します。 secureなウェブフックに対しては`X-TRAQ-Signature`ヘッダーが必須です。 アーカイブされているチャンネルには投稿できません。
     * @summary Webhookを送信
     * @param {string} webhookId WebhookUUID
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ(Secretが設定されている場合は必須)
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {number} [embed] メンション・チャンネルリンクを自動埋め込みする場合に1を指定する
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postWebhook(
      webhookId: string,
      xTRAQSignature?: string,
      xTRAQChannelId?: string,
      embed?: number,
      body?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postWebhook(
        webhookId,
        xTRAQSignature,
        xTRAQChannelId,
        embed,
        body,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["WebhookApi.postWebhook"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * WebhookApi - factory interface
 * @export
 */
export const WebhookApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WebhookApiFp(configuration);
  return {
    /**
     * 指定したWebhookのアイコン画像を変更します。
     * @summary Webhookのアイコンを変更
     * @param {string} webhookId WebhookUUID
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWebhookIcon(
      webhookId: string,
      file: File,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .changeWebhookIcon(webhookId, file, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Webhookを新規作成します。 `secret`が空文字の場合、insecureウェブフックが作成されます。
     * @summary Webhookを新規作成
     * @param {PostWebhookRequest} [postWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhook(
      postWebhookRequest?: PostWebhookRequest,
      options?: any,
    ): AxiosPromise<Webhook> {
      return localVarFp
        .createWebhook(postWebhookRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したWebhookを削除します。 Webhookによって投稿されたメッセージは削除されません。
     * @summary Webhookを削除
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook(webhookId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteWebhook(webhookId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したWebhookの情報を変更します。
     * @summary Webhook情報を変更
     * @param {string} webhookId WebhookUUID
     * @param {PatchWebhookRequest} [patchWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editWebhook(
      webhookId: string,
      patchWebhookRequest?: PatchWebhookRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editWebhook(webhookId, patchWebhookRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したWebhookの詳細を取得します。
     * @summary Webhook情報を取得
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook(webhookId: string, options?: any): AxiosPromise<Webhook> {
      return localVarFp
        .getWebhook(webhookId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したWebhookのアイコン画像を取得します
     * @summary Webhookのアイコンを取得
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookIcon(webhookId: string, options?: any): AxiosPromise<File> {
      return localVarFp
        .getWebhookIcon(webhookId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定されたWebhookが投稿したメッセージのリストを返します。
     * @summary Webhookの投稿メッセージのリストを取得
     * @param {string} webhookId WebhookUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetWebhookMessagesOrderEnum} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookMessages(
      webhookId: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetWebhookMessagesOrderEnum,
      options?: any,
    ): AxiosPromise<Array<Message>> {
      return localVarFp
        .getWebhookMessages(
          webhookId,
          limit,
          offset,
          since,
          until,
          inclusive,
          order,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Webhookのリストを取得します。 allがtrueで無い場合は、自分がオーナーのWebhookのリストを返します。
     * @summary Webhook情報のリストを取得します
     * @param {boolean} [all] 全てのWebhookを取得します。権限が必要です。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks(all?: boolean, options?: any): AxiosPromise<Array<Webhook>> {
      return localVarFp
        .getWebhooks(all, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Webhookにメッセージを投稿します。 secureなウェブフックに対しては`X-TRAQ-Signature`ヘッダーが必須です。 アーカイブされているチャンネルには投稿できません。
     * @summary Webhookを送信
     * @param {string} webhookId WebhookUUID
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ(Secretが設定されている場合は必須)
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {number} [embed] メンション・チャンネルリンクを自動埋め込みする場合に1を指定する
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebhook(
      webhookId: string,
      xTRAQSignature?: string,
      xTRAQChannelId?: string,
      embed?: number,
      body?: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .postWebhook(
          webhookId,
          xTRAQSignature,
          xTRAQChannelId,
          embed,
          body,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
export class WebhookApi extends BaseAPI {
  /**
   * 指定したWebhookのアイコン画像を変更します。
   * @summary Webhookのアイコンを変更
   * @param {string} webhookId WebhookUUID
   * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebhookApi
   */
  public changeWebhookIcon(
    webhookId: string,
    file: File,
    options?: RawAxiosRequestConfig,
  ) {
    return WebhookApiFp(this.configuration)
      .changeWebhookIcon(webhookId, file, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Webhookを新規作成します。 `secret`が空文字の場合、insecureウェブフックが作成されます。
   * @summary Webhookを新規作成
   * @param {PostWebhookRequest} [postWebhookRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebhookApi
   */
  public createWebhook(
    postWebhookRequest?: PostWebhookRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return WebhookApiFp(this.configuration)
      .createWebhook(postWebhookRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したWebhookを削除します。 Webhookによって投稿されたメッセージは削除されません。
   * @summary Webhookを削除
   * @param {string} webhookId WebhookUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebhookApi
   */
  public deleteWebhook(webhookId: string, options?: RawAxiosRequestConfig) {
    return WebhookApiFp(this.configuration)
      .deleteWebhook(webhookId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したWebhookの情報を変更します。
   * @summary Webhook情報を変更
   * @param {string} webhookId WebhookUUID
   * @param {PatchWebhookRequest} [patchWebhookRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebhookApi
   */
  public editWebhook(
    webhookId: string,
    patchWebhookRequest?: PatchWebhookRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return WebhookApiFp(this.configuration)
      .editWebhook(webhookId, patchWebhookRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したWebhookの詳細を取得します。
   * @summary Webhook情報を取得
   * @param {string} webhookId WebhookUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebhookApi
   */
  public getWebhook(webhookId: string, options?: RawAxiosRequestConfig) {
    return WebhookApiFp(this.configuration)
      .getWebhook(webhookId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したWebhookのアイコン画像を取得します
   * @summary Webhookのアイコンを取得
   * @param {string} webhookId WebhookUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebhookApi
   */
  public getWebhookIcon(webhookId: string, options?: RawAxiosRequestConfig) {
    return WebhookApiFp(this.configuration)
      .getWebhookIcon(webhookId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定されたWebhookが投稿したメッセージのリストを返します。
   * @summary Webhookの投稿メッセージのリストを取得
   * @param {string} webhookId WebhookUUID
   * @param {number} [limit] 取得する件数
   * @param {number} [offset] 取得するオフセット
   * @param {string} [since] 取得する時間範囲の開始日時
   * @param {string} [until] 取得する時間範囲の終了日時
   * @param {boolean} [inclusive] 範囲の端を含めるかどうか
   * @param {GetWebhookMessagesOrderEnum} [order] 昇順か降順か
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebhookApi
   */
  public getWebhookMessages(
    webhookId: string,
    limit?: number,
    offset?: number,
    since?: string,
    until?: string,
    inclusive?: boolean,
    order?: GetWebhookMessagesOrderEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return WebhookApiFp(this.configuration)
      .getWebhookMessages(
        webhookId,
        limit,
        offset,
        since,
        until,
        inclusive,
        order,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Webhookのリストを取得します。 allがtrueで無い場合は、自分がオーナーのWebhookのリストを返します。
   * @summary Webhook情報のリストを取得します
   * @param {boolean} [all] 全てのWebhookを取得します。権限が必要です。
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebhookApi
   */
  public getWebhooks(all?: boolean, options?: RawAxiosRequestConfig) {
    return WebhookApiFp(this.configuration)
      .getWebhooks(all, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Webhookにメッセージを投稿します。 secureなウェブフックに対しては`X-TRAQ-Signature`ヘッダーが必須です。 アーカイブされているチャンネルには投稿できません。
   * @summary Webhookを送信
   * @param {string} webhookId WebhookUUID
   * @param {string} [xTRAQSignature] リクエストボディシグネチャ(Secretが設定されている場合は必須)
   * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
   * @param {number} [embed] メンション・チャンネルリンクを自動埋め込みする場合に1を指定する
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WebhookApi
   */
  public postWebhook(
    webhookId: string,
    xTRAQSignature?: string,
    xTRAQChannelId?: string,
    embed?: number,
    body?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return WebhookApiFp(this.configuration)
      .postWebhook(
        webhookId,
        xTRAQSignature,
        xTRAQChannelId,
        embed,
        body,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const GetWebhookMessagesOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type GetWebhookMessagesOrderEnum =
  (typeof GetWebhookMessagesOrderEnum)[keyof typeof GetWebhookMessagesOrderEnum];
