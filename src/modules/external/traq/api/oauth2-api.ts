/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { ActiveOAuth2Token } from "../model";
// @ts-ignore
import { GetClient200Response } from "../model";
// @ts-ignore
import { OAuth2Client } from "../model";
// @ts-ignore
import { OAuth2ClientDetail } from "../model";
// @ts-ignore
import { OAuth2Prompt } from "../model";
// @ts-ignore
import { OAuth2ResponseType } from "../model";
// @ts-ignore
import { OAuth2Token } from "../model";
// @ts-ignore
import { PatchClientRequest } from "../model";
// @ts-ignore
import { PostClientRequest } from "../model";
/**
 * Oauth2Api - axios parameter creator
 * @export
 */
export const Oauth2ApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * OAuth2クライアントを作成します。
     * @summary OAuth2クライアントを作成
     * @param {PostClientRequest} [postClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClient: async (
      postClientRequest?: PostClientRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/clients`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postClientRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
     * @summary OAuth2クライアントを削除
     * @param {string} clientId OAuth2クライアントUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClient: async (
      clientId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("deleteClient", "clientId", clientId);
      const localVarPath = `/clients/{clientId}`.replace(
        `{${"clientId"}}`,
        encodeURIComponent(String(clientId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
     * @summary OAuth2クライアント情報を変更
     * @param {string} clientId OAuth2クライアントUUID
     * @param {PatchClientRequest} [patchClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editClient: async (
      clientId: string,
      patchClientRequest?: PatchClientRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("editClient", "clientId", clientId);
      const localVarPath = `/clients/{clientId}`.replace(
        `{${"clientId"}}`,
        encodeURIComponent(String(clientId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchClientRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
     * @summary OAuth2クライアント情報を取得
     * @param {string} clientId OAuth2クライアントUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClient: async (
      clientId: string,
      detail?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("getClient", "clientId", clientId);
      const localVarPath = `/clients/{clientId}`.replace(
        `{${"clientId"}}`,
        encodeURIComponent(String(clientId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (detail !== undefined) {
        localVarQueryParameter["detail"] = detail;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自身が開発者のOAuth2クライアントのリストを取得します。 `all`が`true`の場合、全開発者の全クライアントのリストを返します。
     * @summary OAuth2クライアントのリストを取得
     * @param {boolean} [all] 全てのクライアントを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClients: async (
      all?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/clients`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (all !== undefined) {
        localVarQueryParameter["all"] = all;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 有効な自分に発行されたOAuth2トークンのリストを取得します。
     * @summary 有効トークンのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyTokens: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/tokens`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * OAuth2 認可エンドポイント
     * @summary OAuth2 認可エンドポイント
     * @param {string} clientId
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOAuth2Authorize: async (
      clientId: string,
      responseType?: OAuth2ResponseType,
      redirectUri?: string,
      scope?: string,
      state?: string,
      codeChallenge?: string,
      codeChallengeMethod?: string,
      nonce?: string,
      prompt?: OAuth2Prompt,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("getOAuth2Authorize", "clientId", clientId);
      const localVarPath = `/oauth2/authorize`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (responseType !== undefined) {
        localVarQueryParameter["response_type"] = responseType;
      }

      if (clientId !== undefined) {
        localVarQueryParameter["client_id"] = clientId;
      }

      if (redirectUri !== undefined) {
        localVarQueryParameter["redirect_uri"] = redirectUri;
      }

      if (scope !== undefined) {
        localVarQueryParameter["scope"] = scope;
      }

      if (state !== undefined) {
        localVarQueryParameter["state"] = state;
      }

      if (codeChallenge !== undefined) {
        localVarQueryParameter["code_challenge"] = codeChallenge;
      }

      if (codeChallengeMethod !== undefined) {
        localVarQueryParameter["code_challenge_method"] = codeChallengeMethod;
      }

      if (nonce !== undefined) {
        localVarQueryParameter["nonce"] = nonce;
      }

      if (prompt !== undefined) {
        localVarQueryParameter["prompt"] = prompt;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * OAuth2 認可エンドポイント
     * @summary OAuth2 認可エンドポイント
     * @param {string} clientId
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOAuth2Authorize: async (
      clientId: string,
      responseType?: OAuth2ResponseType,
      redirectUri?: string,
      scope?: string,
      state?: string,
      codeChallenge?: string,
      codeChallengeMethod?: string,
      nonce?: string,
      prompt?: OAuth2Prompt,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'clientId' is not null or undefined
      assertParamExists("postOAuth2Authorize", "clientId", clientId);
      const localVarPath = `/oauth2/authorize`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (responseType !== undefined) {
        localVarFormParams.set("response_type", responseType as any);
      }

      if (clientId !== undefined) {
        localVarFormParams.set("client_id", clientId as any);
      }

      if (redirectUri !== undefined) {
        localVarFormParams.set("redirect_uri", redirectUri as any);
      }

      if (scope !== undefined) {
        localVarFormParams.set("scope", scope as any);
      }

      if (state !== undefined) {
        localVarFormParams.set("state", state as any);
      }

      if (codeChallenge !== undefined) {
        localVarFormParams.set("code_challenge", codeChallenge as any);
      }

      if (codeChallengeMethod !== undefined) {
        localVarFormParams.set(
          "code_challenge_method",
          codeChallengeMethod as any,
        );
      }

      if (nonce !== undefined) {
        localVarFormParams.set("nonce", nonce as any);
      }

      if (prompt !== undefined) {
        localVarFormParams.set("prompt", prompt as any);
      }

      localVarHeaderParameter["Content-Type"] =
        "application/x-www-form-urlencoded";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * OAuth2 認可承諾
     * @summary OAuth2 認可承諾API
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOAuth2AuthorizeDecide: async (
      submit: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'submit' is not null or undefined
      assertParamExists("postOAuth2AuthorizeDecide", "submit", submit);
      const localVarPath = `/oauth2/authorize/decide`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (submit !== undefined) {
        localVarFormParams.set("submit", submit as any);
      }

      localVarHeaderParameter["Content-Type"] =
        "application/x-www-form-urlencoded";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * OAuth2 トークンエンドポイント
     * @summary OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOAuth2Token: async (
      grantType: string,
      code?: string,
      redirectUri?: string,
      clientId?: string,
      codeVerifier?: string,
      username?: string,
      password?: string,
      scope?: string,
      refreshToken?: string,
      clientSecret?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'grantType' is not null or undefined
      assertParamExists("postOAuth2Token", "grantType", grantType);
      const localVarPath = `/oauth2/token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (grantType !== undefined) {
        localVarFormParams.set("grant_type", grantType as any);
      }

      if (code !== undefined) {
        localVarFormParams.set("code", code as any);
      }

      if (redirectUri !== undefined) {
        localVarFormParams.set("redirect_uri", redirectUri as any);
      }

      if (clientId !== undefined) {
        localVarFormParams.set("client_id", clientId as any);
      }

      if (codeVerifier !== undefined) {
        localVarFormParams.set("code_verifier", codeVerifier as any);
      }

      if (username !== undefined) {
        localVarFormParams.set("username", username as any);
      }

      if (password !== undefined) {
        localVarFormParams.set("password", password as any);
      }

      if (scope !== undefined) {
        localVarFormParams.set("scope", scope as any);
      }

      if (refreshToken !== undefined) {
        localVarFormParams.set("refresh_token", refreshToken as any);
      }

      if (clientSecret !== undefined) {
        localVarFormParams.set("client_secret", clientSecret as any);
      }

      localVarHeaderParameter["Content-Type"] =
        "application/x-www-form-urlencoded";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分の指定したトークンの認可を取り消します。
     * @summary トークンの認可を取り消す
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMyToken: async (
      tokenId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tokenId' is not null or undefined
      assertParamExists("revokeMyToken", "tokenId", tokenId);
      const localVarPath = `/users/me/tokens/{tokenId}`.replace(
        `{${"tokenId"}}`,
        encodeURIComponent(String(tokenId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * OAuth2 トークン無効化エンドポイント
     * @summary OAuth2 トークン無効化エンドポイント
     * @param {string} token 無効化するOAuth2トークンまたはOAuth2リフレッシュトークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeOAuth2Token: async (
      token: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'token' is not null or undefined
      assertParamExists("revokeOAuth2Token", "token", token);
      const localVarPath = `/oauth2/revoke`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (token !== undefined) {
        localVarFormParams.set("token", token as any);
      }

      localVarHeaderParameter["Content-Type"] =
        "application/x-www-form-urlencoded";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * Oauth2Api - functional programming interface
 * @export
 */
export const Oauth2ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = Oauth2ApiAxiosParamCreator(configuration);
  return {
    /**
     * OAuth2クライアントを作成します。
     * @summary OAuth2クライアントを作成
     * @param {PostClientRequest} [postClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createClient(
      postClientRequest?: PostClientRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<OAuth2ClientDetail>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createClient(
        postClientRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["Oauth2Api.createClient"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
     * @summary OAuth2クライアントを削除
     * @param {string} clientId OAuth2クライアントUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteClient(
      clientId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClient(
        clientId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["Oauth2Api.deleteClient"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
     * @summary OAuth2クライアント情報を変更
     * @param {string} clientId OAuth2クライアントUUID
     * @param {PatchClientRequest} [patchClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editClient(
      clientId: string,
      patchClientRequest?: PatchClientRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editClient(
        clientId,
        patchClientRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["Oauth2Api.editClient"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
     * @summary OAuth2クライアント情報を取得
     * @param {string} clientId OAuth2クライアントUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getClient(
      clientId: string,
      detail?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetClient200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getClient(
        clientId,
        detail,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["Oauth2Api.getClient"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自身が開発者のOAuth2クライアントのリストを取得します。 `all`が`true`の場合、全開発者の全クライアントのリストを返します。
     * @summary OAuth2クライアントのリストを取得
     * @param {boolean} [all] 全てのクライアントを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getClients(
      all?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<OAuth2Client>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getClients(
        all,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["Oauth2Api.getClients"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 有効な自分に発行されたOAuth2トークンのリストを取得します。
     * @summary 有効トークンのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyTokens(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ActiveOAuth2Token>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyTokens(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["Oauth2Api.getMyTokens"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * OAuth2 認可エンドポイント
     * @summary OAuth2 認可エンドポイント
     * @param {string} clientId
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOAuth2Authorize(
      clientId: string,
      responseType?: OAuth2ResponseType,
      redirectUri?: string,
      scope?: string,
      state?: string,
      codeChallenge?: string,
      codeChallengeMethod?: string,
      nonce?: string,
      prompt?: OAuth2Prompt,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getOAuth2Authorize(
          clientId,
          responseType,
          redirectUri,
          scope,
          state,
          codeChallenge,
          codeChallengeMethod,
          nonce,
          prompt,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["Oauth2Api.getOAuth2Authorize"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * OAuth2 認可エンドポイント
     * @summary OAuth2 認可エンドポイント
     * @param {string} clientId
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postOAuth2Authorize(
      clientId: string,
      responseType?: OAuth2ResponseType,
      redirectUri?: string,
      scope?: string,
      state?: string,
      codeChallenge?: string,
      codeChallengeMethod?: string,
      nonce?: string,
      prompt?: OAuth2Prompt,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postOAuth2Authorize(
          clientId,
          responseType,
          redirectUri,
          scope,
          state,
          codeChallenge,
          codeChallengeMethod,
          nonce,
          prompt,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["Oauth2Api.postOAuth2Authorize"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * OAuth2 認可承諾
     * @summary OAuth2 認可承諾API
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postOAuth2AuthorizeDecide(
      submit: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postOAuth2AuthorizeDecide(
          submit,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["Oauth2Api.postOAuth2AuthorizeDecide"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * OAuth2 トークンエンドポイント
     * @summary OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postOAuth2Token(
      grantType: string,
      code?: string,
      redirectUri?: string,
      clientId?: string,
      codeVerifier?: string,
      username?: string,
      password?: string,
      scope?: string,
      refreshToken?: string,
      clientSecret?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Token>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postOAuth2Token(
        grantType,
        code,
        redirectUri,
        clientId,
        codeVerifier,
        username,
        password,
        scope,
        refreshToken,
        clientSecret,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["Oauth2Api.postOAuth2Token"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分の指定したトークンの認可を取り消します。
     * @summary トークンの認可を取り消す
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async revokeMyToken(
      tokenId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.revokeMyToken(
        tokenId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["Oauth2Api.revokeMyToken"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * OAuth2 トークン無効化エンドポイント
     * @summary OAuth2 トークン無効化エンドポイント
     * @param {string} token 無効化するOAuth2トークンまたはOAuth2リフレッシュトークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async revokeOAuth2Token(
      token: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.revokeOAuth2Token(token, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["Oauth2Api.revokeOAuth2Token"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * Oauth2Api - factory interface
 * @export
 */
export const Oauth2ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = Oauth2ApiFp(configuration);
  return {
    /**
     * OAuth2クライアントを作成します。
     * @summary OAuth2クライアントを作成
     * @param {PostClientRequest} [postClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClient(
      postClientRequest?: PostClientRequest,
      options?: any,
    ): AxiosPromise<OAuth2ClientDetail> {
      return localVarFp
        .createClient(postClientRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
     * @summary OAuth2クライアントを削除
     * @param {string} clientId OAuth2クライアントUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClient(clientId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteClient(clientId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
     * @summary OAuth2クライアント情報を変更
     * @param {string} clientId OAuth2クライアントUUID
     * @param {PatchClientRequest} [patchClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editClient(
      clientId: string,
      patchClientRequest?: PatchClientRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editClient(clientId, patchClientRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
     * @summary OAuth2クライアント情報を取得
     * @param {string} clientId OAuth2クライアントUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClient(
      clientId: string,
      detail?: boolean,
      options?: any,
    ): AxiosPromise<GetClient200Response> {
      return localVarFp
        .getClient(clientId, detail, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自身が開発者のOAuth2クライアントのリストを取得します。 `all`が`true`の場合、全開発者の全クライアントのリストを返します。
     * @summary OAuth2クライアントのリストを取得
     * @param {boolean} [all] 全てのクライアントを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClients(
      all?: boolean,
      options?: any,
    ): AxiosPromise<Array<OAuth2Client>> {
      return localVarFp
        .getClients(all, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 有効な自分に発行されたOAuth2トークンのリストを取得します。
     * @summary 有効トークンのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyTokens(options?: any): AxiosPromise<Array<ActiveOAuth2Token>> {
      return localVarFp
        .getMyTokens(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * OAuth2 認可エンドポイント
     * @summary OAuth2 認可エンドポイント
     * @param {string} clientId
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOAuth2Authorize(
      clientId: string,
      responseType?: OAuth2ResponseType,
      redirectUri?: string,
      scope?: string,
      state?: string,
      codeChallenge?: string,
      codeChallengeMethod?: string,
      nonce?: string,
      prompt?: OAuth2Prompt,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getOAuth2Authorize(
          clientId,
          responseType,
          redirectUri,
          scope,
          state,
          codeChallenge,
          codeChallengeMethod,
          nonce,
          prompt,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * OAuth2 認可エンドポイント
     * @summary OAuth2 認可エンドポイント
     * @param {string} clientId
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOAuth2Authorize(
      clientId: string,
      responseType?: OAuth2ResponseType,
      redirectUri?: string,
      scope?: string,
      state?: string,
      codeChallenge?: string,
      codeChallengeMethod?: string,
      nonce?: string,
      prompt?: OAuth2Prompt,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .postOAuth2Authorize(
          clientId,
          responseType,
          redirectUri,
          scope,
          state,
          codeChallenge,
          codeChallengeMethod,
          nonce,
          prompt,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * OAuth2 認可承諾
     * @summary OAuth2 認可承諾API
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOAuth2AuthorizeDecide(
      submit: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .postOAuth2AuthorizeDecide(submit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * OAuth2 トークンエンドポイント
     * @summary OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOAuth2Token(
      grantType: string,
      code?: string,
      redirectUri?: string,
      clientId?: string,
      codeVerifier?: string,
      username?: string,
      password?: string,
      scope?: string,
      refreshToken?: string,
      clientSecret?: string,
      options?: any,
    ): AxiosPromise<OAuth2Token> {
      return localVarFp
        .postOAuth2Token(
          grantType,
          code,
          redirectUri,
          clientId,
          codeVerifier,
          username,
          password,
          scope,
          refreshToken,
          clientSecret,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分の指定したトークンの認可を取り消します。
     * @summary トークンの認可を取り消す
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMyToken(tokenId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .revokeMyToken(tokenId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * OAuth2 トークン無効化エンドポイント
     * @summary OAuth2 トークン無効化エンドポイント
     * @param {string} token 無効化するOAuth2トークンまたはOAuth2リフレッシュトークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeOAuth2Token(token: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .revokeOAuth2Token(token, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Oauth2Api - object-oriented interface
 * @export
 * @class Oauth2Api
 * @extends {BaseAPI}
 */
export class Oauth2Api extends BaseAPI {
  /**
   * OAuth2クライアントを作成します。
   * @summary OAuth2クライアントを作成
   * @param {PostClientRequest} [postClientRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public createClient(
    postClientRequest?: PostClientRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return Oauth2ApiFp(this.configuration)
      .createClient(postClientRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
   * @summary OAuth2クライアントを削除
   * @param {string} clientId OAuth2クライアントUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public deleteClient(clientId: string, options?: RawAxiosRequestConfig) {
    return Oauth2ApiFp(this.configuration)
      .deleteClient(clientId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
   * @summary OAuth2クライアント情報を変更
   * @param {string} clientId OAuth2クライアントUUID
   * @param {PatchClientRequest} [patchClientRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public editClient(
    clientId: string,
    patchClientRequest?: PatchClientRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return Oauth2ApiFp(this.configuration)
      .editClient(clientId, patchClientRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
   * @summary OAuth2クライアント情報を取得
   * @param {string} clientId OAuth2クライアントUUID
   * @param {boolean} [detail] 詳細情報を含めるかどうか
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public getClient(
    clientId: string,
    detail?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return Oauth2ApiFp(this.configuration)
      .getClient(clientId, detail, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自身が開発者のOAuth2クライアントのリストを取得します。 `all`が`true`の場合、全開発者の全クライアントのリストを返します。
   * @summary OAuth2クライアントのリストを取得
   * @param {boolean} [all] 全てのクライアントを取得するかどうか
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public getClients(all?: boolean, options?: RawAxiosRequestConfig) {
    return Oauth2ApiFp(this.configuration)
      .getClients(all, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 有効な自分に発行されたOAuth2トークンのリストを取得します。
   * @summary 有効トークンのリストを取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public getMyTokens(options?: RawAxiosRequestConfig) {
    return Oauth2ApiFp(this.configuration)
      .getMyTokens(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * OAuth2 認可エンドポイント
   * @summary OAuth2 認可エンドポイント
   * @param {string} clientId
   * @param {OAuth2ResponseType} [responseType]
   * @param {string} [redirectUri]
   * @param {string} [scope]
   * @param {string} [state]
   * @param {string} [codeChallenge]
   * @param {string} [codeChallengeMethod]
   * @param {string} [nonce]
   * @param {OAuth2Prompt} [prompt]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public getOAuth2Authorize(
    clientId: string,
    responseType?: OAuth2ResponseType,
    redirectUri?: string,
    scope?: string,
    state?: string,
    codeChallenge?: string,
    codeChallengeMethod?: string,
    nonce?: string,
    prompt?: OAuth2Prompt,
    options?: RawAxiosRequestConfig,
  ) {
    return Oauth2ApiFp(this.configuration)
      .getOAuth2Authorize(
        clientId,
        responseType,
        redirectUri,
        scope,
        state,
        codeChallenge,
        codeChallengeMethod,
        nonce,
        prompt,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * OAuth2 認可エンドポイント
   * @summary OAuth2 認可エンドポイント
   * @param {string} clientId
   * @param {OAuth2ResponseType} [responseType]
   * @param {string} [redirectUri]
   * @param {string} [scope]
   * @param {string} [state]
   * @param {string} [codeChallenge]
   * @param {string} [codeChallengeMethod]
   * @param {string} [nonce]
   * @param {OAuth2Prompt} [prompt]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public postOAuth2Authorize(
    clientId: string,
    responseType?: OAuth2ResponseType,
    redirectUri?: string,
    scope?: string,
    state?: string,
    codeChallenge?: string,
    codeChallengeMethod?: string,
    nonce?: string,
    prompt?: OAuth2Prompt,
    options?: RawAxiosRequestConfig,
  ) {
    return Oauth2ApiFp(this.configuration)
      .postOAuth2Authorize(
        clientId,
        responseType,
        redirectUri,
        scope,
        state,
        codeChallenge,
        codeChallengeMethod,
        nonce,
        prompt,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * OAuth2 認可承諾
   * @summary OAuth2 認可承諾API
   * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public postOAuth2AuthorizeDecide(
    submit: string,
    options?: RawAxiosRequestConfig,
  ) {
    return Oauth2ApiFp(this.configuration)
      .postOAuth2AuthorizeDecide(submit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * OAuth2 トークンエンドポイント
   * @summary OAuth2 トークンエンドポイント
   * @param {string} grantType
   * @param {string} [code]
   * @param {string} [redirectUri]
   * @param {string} [clientId]
   * @param {string} [codeVerifier]
   * @param {string} [username]
   * @param {string} [password]
   * @param {string} [scope]
   * @param {string} [refreshToken]
   * @param {string} [clientSecret]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public postOAuth2Token(
    grantType: string,
    code?: string,
    redirectUri?: string,
    clientId?: string,
    codeVerifier?: string,
    username?: string,
    password?: string,
    scope?: string,
    refreshToken?: string,
    clientSecret?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return Oauth2ApiFp(this.configuration)
      .postOAuth2Token(
        grantType,
        code,
        redirectUri,
        clientId,
        codeVerifier,
        username,
        password,
        scope,
        refreshToken,
        clientSecret,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分の指定したトークンの認可を取り消します。
   * @summary トークンの認可を取り消す
   * @param {string} tokenId OAuth2トークンUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public revokeMyToken(tokenId: string, options?: RawAxiosRequestConfig) {
    return Oauth2ApiFp(this.configuration)
      .revokeMyToken(tokenId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * OAuth2 トークン無効化エンドポイント
   * @summary OAuth2 トークン無効化エンドポイント
   * @param {string} token 無効化するOAuth2トークンまたはOAuth2リフレッシュトークン
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof Oauth2Api
   */
  public revokeOAuth2Token(token: string, options?: RawAxiosRequestConfig) {
    return Oauth2ApiFp(this.configuration)
      .revokeOAuth2Token(token, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
