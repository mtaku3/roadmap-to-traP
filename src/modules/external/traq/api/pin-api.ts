/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { MessagePin } from "../model";
// @ts-ignore
import { Pin } from "../model";
/**
 * PinApi - axios parameter creator
 * @export
 */
export const PinApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 指定したメッセージをピン留めします。 アーカイブされているチャンネルのメッセージ・存在しないメッセージ・チャンネル当たりの上限数を超えたメッセージのピン留めはできません。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPin: async (
      messageId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("createPin", "messageId", messageId);
      const localVarPath = `/messages/{messageId}/pin`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelPins: async (
      channelId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("getChannelPins", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/pins`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPin: async (
      messageId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("getPin", "messageId", messageId);
      const localVarPath = `/messages/{messageId}/pin`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePin: async (
      messageId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("removePin", "messageId", messageId);
      const localVarPath = `/messages/{messageId}/pin`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PinApi - functional programming interface
 * @export
 */
export const PinApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PinApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したメッセージをピン留めします。 アーカイブされているチャンネルのメッセージ・存在しないメッセージ・チャンネル当たりの上限数を超えたメッセージのピン留めはできません。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPin(
      messageId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagePin>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPin(
        messageId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PinApi.createPin"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChannelPins(
      channelId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pin>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelPins(
        channelId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PinApi.getChannelPins"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPin(
      messageId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagePin>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPin(
        messageId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PinApi.getPin"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removePin(
      messageId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removePin(
        messageId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PinApi.removePin"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PinApi - factory interface
 * @export
 */
export const PinApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PinApiFp(configuration);
  return {
    /**
     * 指定したメッセージをピン留めします。 アーカイブされているチャンネルのメッセージ・存在しないメッセージ・チャンネル当たりの上限数を超えたメッセージのピン留めはできません。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPin(messageId: string, options?: any): AxiosPromise<MessagePin> {
      return localVarFp
        .createPin(messageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelPins(channelId: string, options?: any): AxiosPromise<Array<Pin>> {
      return localVarFp
        .getChannelPins(channelId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPin(messageId: string, options?: any): AxiosPromise<MessagePin> {
      return localVarFp
        .getPin(messageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePin(messageId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .removePin(messageId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PinApi - object-oriented interface
 * @export
 * @class PinApi
 * @extends {BaseAPI}
 */
export class PinApi extends BaseAPI {
  /**
   * 指定したメッセージをピン留めします。 アーカイブされているチャンネルのメッセージ・存在しないメッセージ・チャンネル当たりの上限数を超えたメッセージのピン留めはできません。
   * @summary ピン留めする
   * @param {string} messageId メッセージUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PinApi
   */
  public createPin(messageId: string, options?: RawAxiosRequestConfig) {
    return PinApiFp(this.configuration)
      .createPin(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
   * @summary チャンネルピンのリストを取得
   * @param {string} channelId チャンネルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PinApi
   */
  public getChannelPins(channelId: string, options?: RawAxiosRequestConfig) {
    return PinApiFp(this.configuration)
      .getChannelPins(channelId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したメッセージのピン留め情報を取得します。
   * @summary ピン留めを取得
   * @param {string} messageId メッセージUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PinApi
   */
  public getPin(messageId: string, options?: RawAxiosRequestConfig) {
    return PinApiFp(this.configuration)
      .getPin(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したメッセージのピン留めを外します。
   * @summary ピン留めを外す
   * @param {string} messageId メッセージUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PinApi
   */
  public removePin(messageId: string, options?: RawAxiosRequestConfig) {
    return PinApiFp(this.configuration)
      .removePin(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
