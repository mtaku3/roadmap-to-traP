/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { FileInfo } from "../model";
// @ts-ignore
import { ThumbnailType } from "../model";
/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
     * @summary ファイルを削除
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile: async (
      fileId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileId' is not null or undefined
      assertParamExists("deleteFile", "fileId", fileId);
      const localVarPath = `/files/{fileId}`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルをダウンロード
     * @param {string} fileId ファイルUUID
     * @param {number} [dl] 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile: async (
      fileId: string,
      dl?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileId' is not null or undefined
      assertParamExists("getFile", "fileId", fileId);
      const localVarPath = `/files/{fileId}`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (dl !== undefined) {
        localVarQueryParameter["dl"] = dl;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルメタを取得
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileMeta: async (
      fileId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileId' is not null or undefined
      assertParamExists("getFileMeta", "fileId", fileId);
      const localVarPath = `/files/{fileId}/meta`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ`channelId`, `mine`の少なくともいずれかが必須です。
     * @summary ファイルメタのリストを取得
     * @param {string} [channelId] アップロード先チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetFilesOrderEnum} [order] 昇順か降順か
     * @param {boolean} [mine] アップロード者が自分のファイルのみを取得するか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFiles: async (
      channelId?: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetFilesOrderEnum,
      mine?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/files`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (channelId !== undefined) {
        localVarQueryParameter["channelId"] = channelId;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (since !== undefined) {
        localVarQueryParameter["since"] =
          (since as any) instanceof Date ? (since as any).toISOString() : since;
      }

      if (until !== undefined) {
        localVarQueryParameter["until"] =
          (until as any) instanceof Date ? (until as any).toISOString() : until;
      }

      if (inclusive !== undefined) {
        localVarQueryParameter["inclusive"] = inclusive;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (mine !== undefined) {
        localVarQueryParameter["mine"] = mine;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary サムネイル画像を取得
     * @param {string} fileId ファイルUUID
     * @param {ThumbnailType} [type] 取得するサムネイルのタイプ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getThumbnailImage: async (
      fileId: string,
      type?: ThumbnailType,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileId' is not null or undefined
      assertParamExists("getThumbnailImage", "fileId", fileId);
      const localVarPath = `/files/{fileId}/thumbnail`.replace(
        `{${"fileId"}}`,
        encodeURIComponent(String(fileId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
     * @summary ファイルをアップロード
     * @param {File} file ファイル本体
     * @param {string} channelId アップロード先チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFile: async (
      file: File,
      channelId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'file' is not null or undefined
      assertParamExists("postFile", "file", file);
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("postFile", "channelId", channelId);
      const localVarPath = `/files`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      if (channelId !== undefined) {
        localVarFormParams.append("channelId", channelId as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
     * @summary ファイルを削除
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFile(
      fileId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(
        fileId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FileApi.deleteFile"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルをダウンロード
     * @param {string} fileId ファイルUUID
     * @param {number} [dl] 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFile(
      fileId: string,
      dl?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(
        fileId,
        dl,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FileApi.getFile"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルメタを取得
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFileMeta(
      fileId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFileMeta(
        fileId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FileApi.getFileMeta"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ`channelId`, `mine`の少なくともいずれかが必須です。
     * @summary ファイルメタのリストを取得
     * @param {string} [channelId] アップロード先チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetFilesOrderEnum} [order] 昇順か降順か
     * @param {boolean} [mine] アップロード者が自分のファイルのみを取得するか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFiles(
      channelId?: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetFilesOrderEnum,
      mine?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<FileInfo>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFiles(
        channelId,
        limit,
        offset,
        since,
        until,
        inclusive,
        order,
        mine,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FileApi.getFiles"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary サムネイル画像を取得
     * @param {string} fileId ファイルUUID
     * @param {ThumbnailType} [type] 取得するサムネイルのタイプ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getThumbnailImage(
      fileId: string,
      type?: ThumbnailType,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getThumbnailImage(
          fileId,
          type,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FileApi.getThumbnailImage"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
     * @summary ファイルをアップロード
     * @param {File} file ファイル本体
     * @param {string} channelId アップロード先チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postFile(
      file: File,
      channelId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postFile(
        file,
        channelId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FileApi.postFile"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = FileApiFp(configuration);
  return {
    /**
     * 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
     * @summary ファイルを削除
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(fileId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteFile(fileId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルをダウンロード
     * @param {string} fileId ファイルUUID
     * @param {number} [dl] 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(fileId: string, dl?: number, options?: any): AxiosPromise<File> {
      return localVarFp
        .getFile(fileId, dl, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルメタを取得
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileMeta(fileId: string, options?: any): AxiosPromise<FileInfo> {
      return localVarFp
        .getFileMeta(fileId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ`channelId`, `mine`の少なくともいずれかが必須です。
     * @summary ファイルメタのリストを取得
     * @param {string} [channelId] アップロード先チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {string} [since] 取得する時間範囲の開始日時
     * @param {string} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {GetFilesOrderEnum} [order] 昇順か降順か
     * @param {boolean} [mine] アップロード者が自分のファイルのみを取得するか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFiles(
      channelId?: string,
      limit?: number,
      offset?: number,
      since?: string,
      until?: string,
      inclusive?: boolean,
      order?: GetFilesOrderEnum,
      mine?: boolean,
      options?: any,
    ): AxiosPromise<Array<FileInfo>> {
      return localVarFp
        .getFiles(
          channelId,
          limit,
          offset,
          since,
          until,
          inclusive,
          order,
          mine,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary サムネイル画像を取得
     * @param {string} fileId ファイルUUID
     * @param {ThumbnailType} [type] 取得するサムネイルのタイプ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getThumbnailImage(
      fileId: string,
      type?: ThumbnailType,
      options?: any,
    ): AxiosPromise<File> {
      return localVarFp
        .getThumbnailImage(fileId, type, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
     * @summary ファイルをアップロード
     * @param {File} file ファイル本体
     * @param {string} channelId アップロード先チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFile(
      file: File,
      channelId: string,
      options?: any,
    ): AxiosPromise<FileInfo> {
      return localVarFp
        .postFile(file, channelId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
  /**
   * 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
   * @summary ファイルを削除
   * @param {string} fileId ファイルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApi
   */
  public deleteFile(fileId: string, options?: RawAxiosRequestConfig) {
    return FileApiFp(this.configuration)
      .deleteFile(fileId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
   * @summary ファイルをダウンロード
   * @param {string} fileId ファイルUUID
   * @param {number} [dl] 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApi
   */
  public getFile(fileId: string, dl?: number, options?: RawAxiosRequestConfig) {
    return FileApiFp(this.configuration)
      .getFile(fileId, dl, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
   * @summary ファイルメタを取得
   * @param {string} fileId ファイルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApi
   */
  public getFileMeta(fileId: string, options?: RawAxiosRequestConfig) {
    return FileApiFp(this.configuration)
      .getFileMeta(fileId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ`channelId`, `mine`の少なくともいずれかが必須です。
   * @summary ファイルメタのリストを取得
   * @param {string} [channelId] アップロード先チャンネルUUID
   * @param {number} [limit] 取得する件数
   * @param {number} [offset] 取得するオフセット
   * @param {string} [since] 取得する時間範囲の開始日時
   * @param {string} [until] 取得する時間範囲の終了日時
   * @param {boolean} [inclusive] 範囲の端を含めるかどうか
   * @param {GetFilesOrderEnum} [order] 昇順か降順か
   * @param {boolean} [mine] アップロード者が自分のファイルのみを取得するか
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApi
   */
  public getFiles(
    channelId?: string,
    limit?: number,
    offset?: number,
    since?: string,
    until?: string,
    inclusive?: boolean,
    order?: GetFilesOrderEnum,
    mine?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return FileApiFp(this.configuration)
      .getFiles(
        channelId,
        limit,
        offset,
        since,
        until,
        inclusive,
        order,
        mine,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
   * @summary サムネイル画像を取得
   * @param {string} fileId ファイルUUID
   * @param {ThumbnailType} [type] 取得するサムネイルのタイプ
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApi
   */
  public getThumbnailImage(
    fileId: string,
    type?: ThumbnailType,
    options?: RawAxiosRequestConfig,
  ) {
    return FileApiFp(this.configuration)
      .getThumbnailImage(fileId, type, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
   * @summary ファイルをアップロード
   * @param {File} file ファイル本体
   * @param {string} channelId アップロード先チャンネルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApi
   */
  public postFile(
    file: File,
    channelId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return FileApiFp(this.configuration)
      .postFile(file, channelId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const GetFilesOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type GetFilesOrderEnum =
  (typeof GetFilesOrderEnum)[keyof typeof GetFilesOrderEnum];
