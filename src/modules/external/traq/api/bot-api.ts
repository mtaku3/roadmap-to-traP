/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { Bot } from "../model";
// @ts-ignore
import { BotDetail } from "../model";
// @ts-ignore
import { BotEventLog } from "../model";
// @ts-ignore
import { BotTokens } from "../model";
// @ts-ignore
import { BotUser } from "../model";
// @ts-ignore
import { GetBot200Response } from "../model";
// @ts-ignore
import { PatchBotRequest } from "../model";
// @ts-ignore
import { PostBotActionJoinRequest } from "../model";
// @ts-ignore
import { PostBotActionLeaveRequest } from "../model";
// @ts-ignore
import { PostBotRequest } from "../model";
/**
 * BotApi - axios parameter creator
 * @export
 */
export const BotApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
     * @summary BOTをアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateBot: async (
      botId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'botId' is not null or undefined
      assertParamExists("activateBot", "botId", botId);
      const localVarPath = `/bots/{botId}/actions/activate`.replace(
        `{${"botId"}}`,
        encodeURIComponent(String(botId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
     * @summary BOTのアイコン画像を変更
     * @param {string} botId BOTUUID
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotIcon: async (
      botId: string,
      file: File,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'botId' is not null or undefined
      assertParamExists("changeBotIcon", "botId", botId);
      // verify required parameter 'file' is not null or undefined
      assertParamExists("changeBotIcon", "file", file);
      const localVarPath = `/bots/{botId}/icon`.replace(
        `{${"botId"}}`,
        encodeURIComponent(String(botId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * # BOT WebSocketプロトコル  ## 送信  `コマンド:引数1:引数2:...` のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。  ### `rtcstate`コマンド 自分のWebRTC状態を変更します。 他のコネクションが既に状態を保持している場合、変更することができません。  `rtcstate:{チャンネルID}:({状態}:{セッションID})*`  チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。  `rtcstate:null`, `rtcstate:`, `rtcstate:channelId:null`, `rtcstate:channelId:`  コネクションが切断された場合、自分のWebRTC状態はリセットされます。  ## 受信  TextMessageとして各種イベントが`type`、`reqId`、`body`を持つJSONとして非同期に送られます。 `body`の内容はHTTP Modeの場合のRequest Bodyと同様です。 例外として`ERROR`イベントは`reqId`を持ちません。  例: PINGイベント `{\"type\":\"PING\",\"reqId\":\"requestId\",\"body\":{\"eventTime\":\"2019-05-07T04:50:48.582586882Z\"}}`  ### `ERROR`  コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。 非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。 本番環境ではERRORが送られないようにすることが望ましいです。  `{\"type\":\"ERROR\",\"body\":\"message\"}`
     * @summary WebSocket Mode BOT用通知ストリームに接続します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectBotWS: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/bots/ws`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * BOTを作成します。 作成後に購読イベントの設定を行う必要があります。 さらにHTTP Modeの場合はアクティベーションを行う必要があります。
     * @summary BOTを作成
     * @param {PostBotRequest} [postBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBot: async (
      postBotRequest?: PostBotRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/bots`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postBotRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
     * @summary BOTを削除
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot: async (
      botId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'botId' is not null or undefined
      assertParamExists("deleteBot", "botId", botId);
      const localVarPath = `/bots/{botId}`.replace(
        `{${"botId"}}`,
        encodeURIComponent(String(botId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
     * @summary BOT情報を変更
     * @param {string} botId BOTUUID
     * @param {PatchBotRequest} [patchBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editBot: async (
      botId: string,
      patchBotRequest?: PatchBotRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'botId' is not null or undefined
      assertParamExists("editBot", "botId", botId);
      const localVarPath = `/bots/{botId}`.replace(
        `{${"botId"}}`,
        encodeURIComponent(String(botId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchBotRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
     * @summary BOT情報を取得
     * @param {string} botId BOTUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot: async (
      botId: string,
      detail?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'botId' is not null or undefined
      assertParamExists("getBot", "botId", botId);
      const localVarPath = `/bots/{botId}`.replace(
        `{${"botId"}}`,
        encodeURIComponent(String(botId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (detail !== undefined) {
        localVarQueryParameter["detail"] = detail;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したBOTのアイコン画像を取得を取得します。
     * @summary BOTのアイコン画像を取得
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotIcon: async (
      botId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'botId' is not null or undefined
      assertParamExists("getBotIcon", "botId", botId);
      const localVarPath = `/bots/{botId}/icon`.replace(
        `{${"botId"}}`,
        encodeURIComponent(String(botId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
     * @summary BOTのイベントログを取得
     * @param {string} botId BOTUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotLogs: async (
      botId: string,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'botId' is not null or undefined
      assertParamExists("getBotLogs", "botId", botId);
      const localVarPath = `/bots/{botId}/logs`.replace(
        `{${"botId"}}`,
        encodeURIComponent(String(botId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
     * @summary BOTリストを取得
     * @param {boolean} [all] 全てのBOTを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBots: async (
      all?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/bots`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (all !== undefined) {
        localVarQueryParameter["all"] = all;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelBots: async (
      channelId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("getChannelBots", "channelId", channelId);
      const localVarPath = `/channels/{channelId}/bots`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
     * @summary BOTをインアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inactivateBot: async (
      botId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'botId' is not null or undefined
      assertParamExists("inactivateBot", "botId", botId);
      const localVarPath = `/bots/{botId}/actions/inactivate`.replace(
        `{${"botId"}}`,
        encodeURIComponent(String(botId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルに参加させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionJoinRequest} [postBotActionJoinRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    letBotJoinChannel: async (
      botId: string,
      postBotActionJoinRequest?: PostBotActionJoinRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'botId' is not null or undefined
      assertParamExists("letBotJoinChannel", "botId", botId);
      const localVarPath = `/bots/{botId}/actions/join`.replace(
        `{${"botId"}}`,
        encodeURIComponent(String(botId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postBotActionJoinRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルから退出させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionLeaveRequest} [postBotActionLeaveRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    letBotLeaveChannel: async (
      botId: string,
      postBotActionLeaveRequest?: PostBotActionLeaveRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'botId' is not null or undefined
      assertParamExists("letBotLeaveChannel", "botId", botId);
      const localVarPath = `/bots/{botId}/actions/leave`.replace(
        `{${"botId"}}`,
        encodeURIComponent(String(botId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postBotActionLeaveRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
     * @summary BOTのトークンを再発行
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reissueBot: async (
      botId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'botId' is not null or undefined
      assertParamExists("reissueBot", "botId", botId);
      const localVarPath = `/bots/{botId}/actions/reissue`.replace(
        `{${"botId"}}`,
        encodeURIComponent(String(botId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BotApi - functional programming interface
 * @export
 */
export const BotApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BotApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
     * @summary BOTをアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async activateBot(
      botId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.activateBot(
        botId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.activateBot"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
     * @summary BOTのアイコン画像を変更
     * @param {string} botId BOTUUID
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeBotIcon(
      botId: string,
      file: File,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.changeBotIcon(
        botId,
        file,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.changeBotIcon"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * # BOT WebSocketプロトコル  ## 送信  `コマンド:引数1:引数2:...` のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。  ### `rtcstate`コマンド 自分のWebRTC状態を変更します。 他のコネクションが既に状態を保持している場合、変更することができません。  `rtcstate:{チャンネルID}:({状態}:{セッションID})*`  チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。  `rtcstate:null`, `rtcstate:`, `rtcstate:channelId:null`, `rtcstate:channelId:`  コネクションが切断された場合、自分のWebRTC状態はリセットされます。  ## 受信  TextMessageとして各種イベントが`type`、`reqId`、`body`を持つJSONとして非同期に送られます。 `body`の内容はHTTP Modeの場合のRequest Bodyと同様です。 例外として`ERROR`イベントは`reqId`を持ちません。  例: PINGイベント `{\"type\":\"PING\",\"reqId\":\"requestId\",\"body\":{\"eventTime\":\"2019-05-07T04:50:48.582586882Z\"}}`  ### `ERROR`  コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。 非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。 本番環境ではERRORが送られないようにすることが望ましいです。  `{\"type\":\"ERROR\",\"body\":\"message\"}`
     * @summary WebSocket Mode BOT用通知ストリームに接続します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async connectBotWS(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.connectBotWS(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.connectBotWS"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * BOTを作成します。 作成後に購読イベントの設定を行う必要があります。 さらにHTTP Modeの場合はアクティベーションを行う必要があります。
     * @summary BOTを作成
     * @param {PostBotRequest} [postBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBot(
      postBotRequest?: PostBotRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotDetail>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBot(
        postBotRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.createBot"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
     * @summary BOTを削除
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBot(
      botId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBot(
        botId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.deleteBot"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
     * @summary BOT情報を変更
     * @param {string} botId BOTUUID
     * @param {PatchBotRequest} [patchBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editBot(
      botId: string,
      patchBotRequest?: PatchBotRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editBot(
        botId,
        patchBotRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.editBot"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
     * @summary BOT情報を取得
     * @param {string} botId BOTUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBot(
      botId: string,
      detail?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetBot200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBot(
        botId,
        detail,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.getBot"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したBOTのアイコン画像を取得を取得します。
     * @summary BOTのアイコン画像を取得
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBotIcon(
      botId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBotIcon(
        botId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.getBotIcon"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
     * @summary BOTのイベントログを取得
     * @param {string} botId BOTUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBotLogs(
      botId: string,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<BotEventLog>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBotLogs(
        botId,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.getBotLogs"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
     * @summary BOTリストを取得
     * @param {boolean} [all] 全てのBOTを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBots(
      all?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Bot>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBots(
        all,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.getBots"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChannelBots(
      channelId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BotUser>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelBots(
        channelId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.getChannelBots"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
     * @summary BOTをインアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async inactivateBot(
      botId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.inactivateBot(
        botId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.inactivateBot"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルに参加させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionJoinRequest} [postBotActionJoinRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async letBotJoinChannel(
      botId: string,
      postBotActionJoinRequest?: PostBotActionJoinRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.letBotJoinChannel(
          botId,
          postBotActionJoinRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.letBotJoinChannel"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルから退出させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionLeaveRequest} [postBotActionLeaveRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async letBotLeaveChannel(
      botId: string,
      postBotActionLeaveRequest?: PostBotActionLeaveRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.letBotLeaveChannel(
          botId,
          postBotActionLeaveRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.letBotLeaveChannel"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
     * @summary BOTのトークンを再発行
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reissueBot(
      botId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotTokens>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reissueBot(
        botId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["BotApi.reissueBot"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * BotApi - factory interface
 * @export
 */
export const BotApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = BotApiFp(configuration);
  return {
    /**
     * 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
     * @summary BOTをアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateBot(botId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .activateBot(botId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
     * @summary BOTのアイコン画像を変更
     * @param {string} botId BOTUUID
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotIcon(
      botId: string,
      file: File,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .changeBotIcon(botId, file, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * # BOT WebSocketプロトコル  ## 送信  `コマンド:引数1:引数2:...` のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。  ### `rtcstate`コマンド 自分のWebRTC状態を変更します。 他のコネクションが既に状態を保持している場合、変更することができません。  `rtcstate:{チャンネルID}:({状態}:{セッションID})*`  チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。  `rtcstate:null`, `rtcstate:`, `rtcstate:channelId:null`, `rtcstate:channelId:`  コネクションが切断された場合、自分のWebRTC状態はリセットされます。  ## 受信  TextMessageとして各種イベントが`type`、`reqId`、`body`を持つJSONとして非同期に送られます。 `body`の内容はHTTP Modeの場合のRequest Bodyと同様です。 例外として`ERROR`イベントは`reqId`を持ちません。  例: PINGイベント `{\"type\":\"PING\",\"reqId\":\"requestId\",\"body\":{\"eventTime\":\"2019-05-07T04:50:48.582586882Z\"}}`  ### `ERROR`  コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。 非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。 本番環境ではERRORが送られないようにすることが望ましいです。  `{\"type\":\"ERROR\",\"body\":\"message\"}`
     * @summary WebSocket Mode BOT用通知ストリームに接続します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectBotWS(options?: any): AxiosPromise<void> {
      return localVarFp
        .connectBotWS(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * BOTを作成します。 作成後に購読イベントの設定を行う必要があります。 さらにHTTP Modeの場合はアクティベーションを行う必要があります。
     * @summary BOTを作成
     * @param {PostBotRequest} [postBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBot(
      postBotRequest?: PostBotRequest,
      options?: any,
    ): AxiosPromise<BotDetail> {
      return localVarFp
        .createBot(postBotRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
     * @summary BOTを削除
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot(botId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteBot(botId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
     * @summary BOT情報を変更
     * @param {string} botId BOTUUID
     * @param {PatchBotRequest} [patchBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editBot(
      botId: string,
      patchBotRequest?: PatchBotRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editBot(botId, patchBotRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
     * @summary BOT情報を取得
     * @param {string} botId BOTUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot(
      botId: string,
      detail?: boolean,
      options?: any,
    ): AxiosPromise<GetBot200Response> {
      return localVarFp
        .getBot(botId, detail, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したBOTのアイコン画像を取得を取得します。
     * @summary BOTのアイコン画像を取得
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotIcon(botId: string, options?: any): AxiosPromise<File> {
      return localVarFp
        .getBotIcon(botId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
     * @summary BOTのイベントログを取得
     * @param {string} botId BOTUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotLogs(
      botId: string,
      limit?: number,
      offset?: number,
      options?: any,
    ): AxiosPromise<Array<BotEventLog>> {
      return localVarFp
        .getBotLogs(botId, limit, offset, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
     * @summary BOTリストを取得
     * @param {boolean} [all] 全てのBOTを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBots(all?: boolean, options?: any): AxiosPromise<Array<Bot>> {
      return localVarFp
        .getBots(all, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelBots(
      channelId: string,
      options?: any,
    ): AxiosPromise<Array<BotUser>> {
      return localVarFp
        .getChannelBots(channelId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
     * @summary BOTをインアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inactivateBot(botId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .inactivateBot(botId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルに参加させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionJoinRequest} [postBotActionJoinRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    letBotJoinChannel(
      botId: string,
      postBotActionJoinRequest?: PostBotActionJoinRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .letBotJoinChannel(botId, postBotActionJoinRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルから退出させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionLeaveRequest} [postBotActionLeaveRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    letBotLeaveChannel(
      botId: string,
      postBotActionLeaveRequest?: PostBotActionLeaveRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .letBotLeaveChannel(botId, postBotActionLeaveRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
     * @summary BOTのトークンを再発行
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reissueBot(botId: string, options?: any): AxiosPromise<BotTokens> {
      return localVarFp
        .reissueBot(botId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BotApi - object-oriented interface
 * @export
 * @class BotApi
 * @extends {BaseAPI}
 */
export class BotApi extends BaseAPI {
  /**
   * 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
   * @summary BOTをアクティベート
   * @param {string} botId BOTUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public activateBot(botId: string, options?: RawAxiosRequestConfig) {
    return BotApiFp(this.configuration)
      .activateBot(botId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
   * @summary BOTのアイコン画像を変更
   * @param {string} botId BOTUUID
   * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public changeBotIcon(
    botId: string,
    file: File,
    options?: RawAxiosRequestConfig,
  ) {
    return BotApiFp(this.configuration)
      .changeBotIcon(botId, file, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * # BOT WebSocketプロトコル  ## 送信  `コマンド:引数1:引数2:...` のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。  ### `rtcstate`コマンド 自分のWebRTC状態を変更します。 他のコネクションが既に状態を保持している場合、変更することができません。  `rtcstate:{チャンネルID}:({状態}:{セッションID})*`  チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。  `rtcstate:null`, `rtcstate:`, `rtcstate:channelId:null`, `rtcstate:channelId:`  コネクションが切断された場合、自分のWebRTC状態はリセットされます。  ## 受信  TextMessageとして各種イベントが`type`、`reqId`、`body`を持つJSONとして非同期に送られます。 `body`の内容はHTTP Modeの場合のRequest Bodyと同様です。 例外として`ERROR`イベントは`reqId`を持ちません。  例: PINGイベント `{\"type\":\"PING\",\"reqId\":\"requestId\",\"body\":{\"eventTime\":\"2019-05-07T04:50:48.582586882Z\"}}`  ### `ERROR`  コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。 非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。 本番環境ではERRORが送られないようにすることが望ましいです。  `{\"type\":\"ERROR\",\"body\":\"message\"}`
   * @summary WebSocket Mode BOT用通知ストリームに接続します
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public connectBotWS(options?: RawAxiosRequestConfig) {
    return BotApiFp(this.configuration)
      .connectBotWS(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * BOTを作成します。 作成後に購読イベントの設定を行う必要があります。 さらにHTTP Modeの場合はアクティベーションを行う必要があります。
   * @summary BOTを作成
   * @param {PostBotRequest} [postBotRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public createBot(
    postBotRequest?: PostBotRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return BotApiFp(this.configuration)
      .createBot(postBotRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
   * @summary BOTを削除
   * @param {string} botId BOTUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public deleteBot(botId: string, options?: RawAxiosRequestConfig) {
    return BotApiFp(this.configuration)
      .deleteBot(botId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
   * @summary BOT情報を変更
   * @param {string} botId BOTUUID
   * @param {PatchBotRequest} [patchBotRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public editBot(
    botId: string,
    patchBotRequest?: PatchBotRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return BotApiFp(this.configuration)
      .editBot(botId, patchBotRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
   * @summary BOT情報を取得
   * @param {string} botId BOTUUID
   * @param {boolean} [detail] 詳細情報を含めるかどうか
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public getBot(
    botId: string,
    detail?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return BotApiFp(this.configuration)
      .getBot(botId, detail, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したBOTのアイコン画像を取得を取得します。
   * @summary BOTのアイコン画像を取得
   * @param {string} botId BOTUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public getBotIcon(botId: string, options?: RawAxiosRequestConfig) {
    return BotApiFp(this.configuration)
      .getBotIcon(botId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
   * @summary BOTのイベントログを取得
   * @param {string} botId BOTUUID
   * @param {number} [limit] 取得する件数
   * @param {number} [offset] 取得するオフセット
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public getBotLogs(
    botId: string,
    limit?: number,
    offset?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return BotApiFp(this.configuration)
      .getBotLogs(botId, limit, offset, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
   * @summary BOTリストを取得
   * @param {boolean} [all] 全てのBOTを取得するかどうか
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public getBots(all?: boolean, options?: RawAxiosRequestConfig) {
    return BotApiFp(this.configuration)
      .getBots(all, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したチャンネルに参加しているBOTのリストを取得します。
   * @summary チャンネル参加中のBOTのリストを取得
   * @param {string} channelId チャンネルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public getChannelBots(channelId: string, options?: RawAxiosRequestConfig) {
    return BotApiFp(this.configuration)
      .getChannelBots(channelId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
   * @summary BOTをインアクティベート
   * @param {string} botId BOTUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public inactivateBot(botId: string, options?: RawAxiosRequestConfig) {
    return BotApiFp(this.configuration)
      .inactivateBot(botId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
   * @summary BOTをチャンネルに参加させる
   * @param {string} botId BOTUUID
   * @param {PostBotActionJoinRequest} [postBotActionJoinRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public letBotJoinChannel(
    botId: string,
    postBotActionJoinRequest?: PostBotActionJoinRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return BotApiFp(this.configuration)
      .letBotJoinChannel(botId, postBotActionJoinRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
   * @summary BOTをチャンネルから退出させる
   * @param {string} botId BOTUUID
   * @param {PostBotActionLeaveRequest} [postBotActionLeaveRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public letBotLeaveChannel(
    botId: string,
    postBotActionLeaveRequest?: PostBotActionLeaveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return BotApiFp(this.configuration)
      .letBotLeaveChannel(botId, postBotActionLeaveRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
   * @summary BOTのトークンを再発行
   * @param {string} botId BOTUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BotApi
   */
  public reissueBot(botId: string, options?: RawAxiosRequestConfig) {
    return BotApiFp(this.configuration)
      .reissueBot(botId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
