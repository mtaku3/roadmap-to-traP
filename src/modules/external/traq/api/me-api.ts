/* tslint:disable */
/* eslint-disable */
/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import { ActiveOAuth2Token } from "../model";
// @ts-ignore
import { ExternalProviderUser } from "../model";
// @ts-ignore
import { GetNotifyCitation } from "../model";
// @ts-ignore
import { LoginSession } from "../model";
// @ts-ignore
import { MyChannelViewState } from "../model";
// @ts-ignore
import { MyUserDetail } from "../model";
// @ts-ignore
import { PatchMeRequest } from "../model";
// @ts-ignore
import { PatchUserTagRequest } from "../model";
// @ts-ignore
import { PostLinkExternalAccount } from "../model";
// @ts-ignore
import { PostMyFCMDeviceRequest } from "../model";
// @ts-ignore
import { PostStarRequest } from "../model";
// @ts-ignore
import { PostUnlinkExternalAccount } from "../model";
// @ts-ignore
import { PostUserTagRequest } from "../model";
// @ts-ignore
import { PutChannelSubscribeLevelRequest } from "../model";
// @ts-ignore
import { PutMyPasswordRequest } from "../model";
// @ts-ignore
import { PutNotifyCitationRequest } from "../model";
// @ts-ignore
import { StampHistoryEntry } from "../model";
// @ts-ignore
import { UnreadChannel } from "../model";
// @ts-ignore
import { UserSettings } from "../model";
// @ts-ignore
import { UserSubscribeState } from "../model";
// @ts-ignore
import { UserTag } from "../model";
/**
 * MeApi - axios parameter creator
 * @export
 */
export const MeApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 指定したチャンネルをスターチャンネルに追加します。 スター済みのチャンネルIDを指定した場合、204を返します。 不正なチャンネルIDを指定した場合、400を返します。
     * @summary チャンネルをスターに追加
     * @param {PostStarRequest} [postStarRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyStar: async (
      postStarRequest?: PostStarRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/stars`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postStarRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分に新しくタグを追加します。
     * @summary 自分にタグを追加
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyUserTag: async (
      postUserTagRequest?: PostUserTagRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/tags`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postUserTagRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分のアイコン画像を変更します。
     * @summary 自分のアイコン画像を変更
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyIcon: async (
      file: File,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'file' is not null or undefined
      assertParamExists("changeMyIcon", "file", file);
      const localVarPath = `/users/me/icon`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * メッセージ引用通知の設定情報を変更します
     * @summary メッセージ引用通知の設定情報を変更
     * @param {PutNotifyCitationRequest} [putNotifyCitationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyNotifyCitation: async (
      putNotifyCitationRequest?: PutNotifyCitationRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/settings/notify-citation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        putNotifyCitationRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自身のパスワードを変更します。
     * @summary 自分のパスワードを変更
     * @param {PutMyPasswordRequest} [putMyPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyPassword: async (
      putMyPasswordRequest?: PutMyPasswordRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        putMyPasswordRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自身のユーザー情報を変更します。
     * @summary 自分のユーザー情報を変更
     * @param {PatchMeRequest} [patchMeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMe: async (
      patchMeRequest?: PatchMeRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchMeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分の指定したタグの状態を変更します。
     * @summary 自分のタグを編集
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMyUserTag: async (
      tagId: string,
      patchUserTagRequest?: PatchUserTagRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tagId' is not null or undefined
      assertParamExists("editMyUserTag", "tagId", tagId);
      const localVarPath = `/users/me/tags/{tagId}`.replace(
        `{${"tagId"}}`,
        encodeURIComponent(String(tagId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchUserTagRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自身のユーザー詳細情報を取得します。
     * @summary 自分のユーザー詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自身のチャンネル購読状態を取得します。
     * @summary 自分のチャンネル購読状態を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyChannelSubscriptions: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/subscriptions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分に紐付けられている外部ログインアカウント一覧を取得します。
     * @summary 外部ログインアカウント一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyExternalAccounts: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/ex-accounts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分のアイコン画像を取得します。
     * @summary 自分のアイコン画像を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyIcon: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/icon`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * メッセージ引用通知の設定情報を変更します。
     * @summary メッセージ引用通知の設定情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyNotifyCitation: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/settings/notify-citation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
     * @summary QRコードを取得
     * @param {boolean} [token] 画像でなくトークン文字列で返すかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyQRCode: async (
      token?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/qr-code`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (token !== undefined) {
        localVarQueryParameter["token"] = token;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分のログインセッションのリストを取得します。
     * @summary 自分のログインセッションリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMySessions: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/sessions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStampHistory: async (
      limit?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/stamp-history`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分がスターしているチャンネルのUUIDの配列を取得します。
     * @summary スターチャンネルリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStars: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/stars`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 有効な自分に発行されたOAuth2トークンのリストを取得します。
     * @summary 有効トークンのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyTokens: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/tokens`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分が現在未読のチャンネルの未読情報を取得します。
     * @summary 未読チャンネルを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUnreadChannels: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/unread`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分に付けられているタグの配列を取得します。
     * @summary 自分のタグリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUserTags: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/tags`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自身のチャンネル閲覧状態一覧を取得します。
     * @summary 自身のチャンネル閲覧状態一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyViewStates: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/view-states`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * ユーザー設定を取得します。
     * @summary ユーザー設定を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSettings: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/settings`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分に外部ログインアカウントを紐付けます。 指定した`providerName`がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
     * @summary 外部ログインアカウントを紐付ける
     * @param {PostLinkExternalAccount} [postLinkExternalAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkExternalAccount: async (
      postLinkExternalAccount?: PostLinkExternalAccount,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/ex-accounts/link`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postLinkExternalAccount,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分が未読のチャンネルを既読にします。
     * @summary チャンネルを既読にする
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readChannel: async (
      channelId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("readChannel", "channelId", channelId);
      const localVarPath = `/users/me/unread/{channelId}`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自身のFCMデバイスを登録します。
     * @summary FCMデバイスを登録
     * @param {PostMyFCMDeviceRequest} [postMyFCMDeviceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerFCMDevice: async (
      postMyFCMDeviceRequest?: PostMyFCMDeviceRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/fcm-device`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postMyFCMDeviceRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 既にスターから削除されているチャンネルを指定した場合は204を返します。
     * @summary チャンネルをスターから削除します
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyStar: async (
      channelId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("removeMyStar", "channelId", channelId);
      const localVarPath = `/users/me/stars/{channelId}`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyUserTag: async (
      tagId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tagId' is not null or undefined
      assertParamExists("removeMyUserTag", "tagId", tagId);
      const localVarPath = `/users/me/tags/{tagId}`.replace(
        `{${"tagId"}}`,
        encodeURIComponent(String(tagId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も`204`を返します。
     * @summary セッションを無効化
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMySession: async (
      sessionId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists("revokeMySession", "sessionId", sessionId);
      const localVarPath = `/users/me/sessions/{sessionId}`.replace(
        `{${"sessionId"}}`,
        encodeURIComponent(String(sessionId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分の指定したトークンの認可を取り消します。
     * @summary トークンの認可を取り消す
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMyToken: async (
      tokenId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tokenId' is not null or undefined
      assertParamExists("revokeMyToken", "tokenId", tokenId);
      const localVarPath = `/users/me/tokens/{tokenId}`.replace(
        `{${"tokenId"}}`,
        encodeURIComponent(String(tokenId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自身の指定したチャンネルの購読レベルを設定します。
     * @summary チャンネル購読レベルを設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribeLevelRequest} [putChannelSubscribeLevelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribeLevel: async (
      channelId: string,
      putChannelSubscribeLevelRequest?: PutChannelSubscribeLevelRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'channelId' is not null or undefined
      assertParamExists("setChannelSubscribeLevel", "channelId", channelId);
      const localVarPath = `/users/me/subscriptions/{channelId}`.replace(
        `{${"channelId"}}`,
        encodeURIComponent(String(channelId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        putChannelSubscribeLevelRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
     * @summary 外部ログインアカウントの紐付けを解除
     * @param {PostUnlinkExternalAccount} [postUnlinkExternalAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkExternalAccount: async (
      postUnlinkExternalAccount?: PostUnlinkExternalAccount,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/ex-accounts/unlink`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2",
        [],
        configuration,
      );

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postUnlinkExternalAccount,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MeApi - functional programming interface
 * @export
 */
export const MeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MeApiAxiosParamCreator(configuration);
  return {
    /**
     * 指定したチャンネルをスターチャンネルに追加します。 スター済みのチャンネルIDを指定した場合、204を返します。 不正なチャンネルIDを指定した場合、400を返します。
     * @summary チャンネルをスターに追加
     * @param {PostStarRequest} [postStarRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addMyStar(
      postStarRequest?: PostStarRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addMyStar(
        postStarRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.addMyStar"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分に新しくタグを追加します。
     * @summary 自分にタグを追加
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addMyUserTag(
      postUserTagRequest?: PostUserTagRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTag>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addMyUserTag(
        postUserTagRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.addMyUserTag"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分のアイコン画像を変更します。
     * @summary 自分のアイコン画像を変更
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeMyIcon(
      file: File,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.changeMyIcon(
        file,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.changeMyIcon"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * メッセージ引用通知の設定情報を変更します
     * @summary メッセージ引用通知の設定情報を変更
     * @param {PutNotifyCitationRequest} [putNotifyCitationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeMyNotifyCitation(
      putNotifyCitationRequest?: PutNotifyCitationRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.changeMyNotifyCitation(
          putNotifyCitationRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.changeMyNotifyCitation"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自身のパスワードを変更します。
     * @summary 自分のパスワードを変更
     * @param {PutMyPasswordRequest} [putMyPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeMyPassword(
      putMyPasswordRequest?: PutMyPasswordRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.changeMyPassword(
          putMyPasswordRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.changeMyPassword"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自身のユーザー情報を変更します。
     * @summary 自分のユーザー情報を変更
     * @param {PatchMeRequest} [patchMeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editMe(
      patchMeRequest?: PatchMeRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editMe(
        patchMeRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.editMe"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分の指定したタグの状態を変更します。
     * @summary 自分のタグを編集
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editMyUserTag(
      tagId: string,
      patchUserTagRequest?: PatchUserTagRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.editMyUserTag(
        tagId,
        patchUserTagRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.editMyUserTag"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自身のユーザー詳細情報を取得します。
     * @summary 自分のユーザー詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMe(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MyUserDetail>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getMe"]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自身のチャンネル購読状態を取得します。
     * @summary 自分のチャンネル購読状態を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyChannelSubscriptions(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<UserSubscribeState>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyChannelSubscriptions(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getMyChannelSubscriptions"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分に紐付けられている外部ログインアカウント一覧を取得します。
     * @summary 外部ログインアカウント一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyExternalAccounts(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ExternalProviderUser>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyExternalAccounts(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getMyExternalAccounts"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分のアイコン画像を取得します。
     * @summary 自分のアイコン画像を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyIcon(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyIcon(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getMyIcon"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * メッセージ引用通知の設定情報を変更します。
     * @summary メッセージ引用通知の設定情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyNotifyCitation(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetNotifyCitation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyNotifyCitation(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getMyNotifyCitation"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
     * @summary QRコードを取得
     * @param {boolean} [token] 画像でなくトークン文字列で返すかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyQRCode(
      token?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMyQRCode(
        token,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getMyQRCode"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分のログインセッションのリストを取得します。
     * @summary 自分のログインセッションリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMySessions(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<LoginSession>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMySessions(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getMySessions"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyStampHistory(
      limit?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<StampHistoryEntry>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyStampHistory(limit, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getMyStampHistory"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分がスターしているチャンネルのUUIDの配列を取得します。
     * @summary スターチャンネルリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyStars(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyStars(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getMyStars"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 有効な自分に発行されたOAuth2トークンのリストを取得します。
     * @summary 有効トークンのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyTokens(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ActiveOAuth2Token>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyTokens(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getMyTokens"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分が現在未読のチャンネルの未読情報を取得します。
     * @summary 未読チャンネルを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyUnreadChannels(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<UnreadChannel>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyUnreadChannels(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getMyUnreadChannels"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分に付けられているタグの配列を取得します。
     * @summary 自分のタグリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyUserTags(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserTag>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyUserTags(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getMyUserTags"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自身のチャンネル閲覧状態一覧を取得します。
     * @summary 自身のチャンネル閲覧状態一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMyViewStates(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<MyChannelViewState>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMyViewStates(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getMyViewStates"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * ユーザー設定を取得します。
     * @summary ユーザー設定を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserSettings(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSettings>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserSettings(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.getUserSettings"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分に外部ログインアカウントを紐付けます。 指定した`providerName`がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
     * @summary 外部ログインアカウントを紐付ける
     * @param {PostLinkExternalAccount} [postLinkExternalAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async linkExternalAccount(
      postLinkExternalAccount?: PostLinkExternalAccount,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.linkExternalAccount(
          postLinkExternalAccount,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.linkExternalAccount"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分が未読のチャンネルを既読にします。
     * @summary チャンネルを既読にする
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readChannel(
      channelId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.readChannel(
        channelId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.readChannel"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自身のFCMデバイスを登録します。
     * @summary FCMデバイスを登録
     * @param {PostMyFCMDeviceRequest} [postMyFCMDeviceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async registerFCMDevice(
      postMyFCMDeviceRequest?: PostMyFCMDeviceRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.registerFCMDevice(
          postMyFCMDeviceRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.registerFCMDevice"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 既にスターから削除されているチャンネルを指定した場合は204を返します。
     * @summary チャンネルをスターから削除します
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMyStar(
      channelId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMyStar(
        channelId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.removeMyStar"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMyUserTag(
      tagId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMyUserTag(
        tagId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.removeMyUserTag"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も`204`を返します。
     * @summary セッションを無効化
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async revokeMySession(
      sessionId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.revokeMySession(
        sessionId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.revokeMySession"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分の指定したトークンの認可を取り消します。
     * @summary トークンの認可を取り消す
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async revokeMyToken(
      tokenId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.revokeMyToken(
        tokenId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.revokeMyToken"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自身の指定したチャンネルの購読レベルを設定します。
     * @summary チャンネル購読レベルを設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribeLevelRequest} [putChannelSubscribeLevelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setChannelSubscribeLevel(
      channelId: string,
      putChannelSubscribeLevelRequest?: PutChannelSubscribeLevelRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.setChannelSubscribeLevel(
          channelId,
          putChannelSubscribeLevelRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.setChannelSubscribeLevel"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
     * @summary 外部ログインアカウントの紐付けを解除
     * @param {PostUnlinkExternalAccount} [postUnlinkExternalAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unlinkExternalAccount(
      postUnlinkExternalAccount?: PostUnlinkExternalAccount,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.unlinkExternalAccount(
          postUnlinkExternalAccount,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MeApi.unlinkExternalAccount"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * MeApi - factory interface
 * @export
 */
export const MeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = MeApiFp(configuration);
  return {
    /**
     * 指定したチャンネルをスターチャンネルに追加します。 スター済みのチャンネルIDを指定した場合、204を返します。 不正なチャンネルIDを指定した場合、400を返します。
     * @summary チャンネルをスターに追加
     * @param {PostStarRequest} [postStarRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyStar(
      postStarRequest?: PostStarRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .addMyStar(postStarRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分に新しくタグを追加します。
     * @summary 自分にタグを追加
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyUserTag(
      postUserTagRequest?: PostUserTagRequest,
      options?: any,
    ): AxiosPromise<UserTag> {
      return localVarFp
        .addMyUserTag(postUserTagRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分のアイコン画像を変更します。
     * @summary 自分のアイコン画像を変更
     * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyIcon(file: File, options?: any): AxiosPromise<void> {
      return localVarFp
        .changeMyIcon(file, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * メッセージ引用通知の設定情報を変更します
     * @summary メッセージ引用通知の設定情報を変更
     * @param {PutNotifyCitationRequest} [putNotifyCitationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyNotifyCitation(
      putNotifyCitationRequest?: PutNotifyCitationRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .changeMyNotifyCitation(putNotifyCitationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自身のパスワードを変更します。
     * @summary 自分のパスワードを変更
     * @param {PutMyPasswordRequest} [putMyPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyPassword(
      putMyPasswordRequest?: PutMyPasswordRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .changeMyPassword(putMyPasswordRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自身のユーザー情報を変更します。
     * @summary 自分のユーザー情報を変更
     * @param {PatchMeRequest} [patchMeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMe(patchMeRequest?: PatchMeRequest, options?: any): AxiosPromise<void> {
      return localVarFp
        .editMe(patchMeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分の指定したタグの状態を変更します。
     * @summary 自分のタグを編集
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMyUserTag(
      tagId: string,
      patchUserTagRequest?: PatchUserTagRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .editMyUserTag(tagId, patchUserTagRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自身のユーザー詳細情報を取得します。
     * @summary 自分のユーザー詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): AxiosPromise<MyUserDetail> {
      return localVarFp
        .getMe(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自身のチャンネル購読状態を取得します。
     * @summary 自分のチャンネル購読状態を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyChannelSubscriptions(
      options?: any,
    ): AxiosPromise<Array<UserSubscribeState>> {
      return localVarFp
        .getMyChannelSubscriptions(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分に紐付けられている外部ログインアカウント一覧を取得します。
     * @summary 外部ログインアカウント一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyExternalAccounts(
      options?: any,
    ): AxiosPromise<Array<ExternalProviderUser>> {
      return localVarFp
        .getMyExternalAccounts(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分のアイコン画像を取得します。
     * @summary 自分のアイコン画像を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyIcon(options?: any): AxiosPromise<File> {
      return localVarFp
        .getMyIcon(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * メッセージ引用通知の設定情報を変更します。
     * @summary メッセージ引用通知の設定情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyNotifyCitation(options?: any): AxiosPromise<GetNotifyCitation> {
      return localVarFp
        .getMyNotifyCitation(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
     * @summary QRコードを取得
     * @param {boolean} [token] 画像でなくトークン文字列で返すかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyQRCode(token?: boolean, options?: any): AxiosPromise<File> {
      return localVarFp
        .getMyQRCode(token, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分のログインセッションのリストを取得します。
     * @summary 自分のログインセッションリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMySessions(options?: any): AxiosPromise<Array<LoginSession>> {
      return localVarFp
        .getMySessions(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStampHistory(
      limit?: number,
      options?: any,
    ): AxiosPromise<Array<StampHistoryEntry>> {
      return localVarFp
        .getMyStampHistory(limit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分がスターしているチャンネルのUUIDの配列を取得します。
     * @summary スターチャンネルリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStars(options?: any): AxiosPromise<Array<string>> {
      return localVarFp
        .getMyStars(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 有効な自分に発行されたOAuth2トークンのリストを取得します。
     * @summary 有効トークンのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyTokens(options?: any): AxiosPromise<Array<ActiveOAuth2Token>> {
      return localVarFp
        .getMyTokens(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分が現在未読のチャンネルの未読情報を取得します。
     * @summary 未読チャンネルを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUnreadChannels(options?: any): AxiosPromise<Array<UnreadChannel>> {
      return localVarFp
        .getMyUnreadChannels(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分に付けられているタグの配列を取得します。
     * @summary 自分のタグリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUserTags(options?: any): AxiosPromise<Array<UserTag>> {
      return localVarFp
        .getMyUserTags(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自身のチャンネル閲覧状態一覧を取得します。
     * @summary 自身のチャンネル閲覧状態一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyViewStates(options?: any): AxiosPromise<Array<MyChannelViewState>> {
      return localVarFp
        .getMyViewStates(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * ユーザー設定を取得します。
     * @summary ユーザー設定を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSettings(options?: any): AxiosPromise<UserSettings> {
      return localVarFp
        .getUserSettings(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分に外部ログインアカウントを紐付けます。 指定した`providerName`がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
     * @summary 外部ログインアカウントを紐付ける
     * @param {PostLinkExternalAccount} [postLinkExternalAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkExternalAccount(
      postLinkExternalAccount?: PostLinkExternalAccount,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .linkExternalAccount(postLinkExternalAccount, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分が未読のチャンネルを既読にします。
     * @summary チャンネルを既読にする
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readChannel(channelId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .readChannel(channelId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自身のFCMデバイスを登録します。
     * @summary FCMデバイスを登録
     * @param {PostMyFCMDeviceRequest} [postMyFCMDeviceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerFCMDevice(
      postMyFCMDeviceRequest?: PostMyFCMDeviceRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .registerFCMDevice(postMyFCMDeviceRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 既にスターから削除されているチャンネルを指定した場合は204を返します。
     * @summary チャンネルをスターから削除します
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyStar(channelId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .removeMyStar(channelId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyUserTag(tagId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .removeMyUserTag(tagId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も`204`を返します。
     * @summary セッションを無効化
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMySession(sessionId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .revokeMySession(sessionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分の指定したトークンの認可を取り消します。
     * @summary トークンの認可を取り消す
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMyToken(tokenId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .revokeMyToken(tokenId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 自身の指定したチャンネルの購読レベルを設定します。
     * @summary チャンネル購読レベルを設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribeLevelRequest} [putChannelSubscribeLevelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribeLevel(
      channelId: string,
      putChannelSubscribeLevelRequest?: PutChannelSubscribeLevelRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .setChannelSubscribeLevel(
          channelId,
          putChannelSubscribeLevelRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
     * @summary 外部ログインアカウントの紐付けを解除
     * @param {PostUnlinkExternalAccount} [postUnlinkExternalAccount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkExternalAccount(
      postUnlinkExternalAccount?: PostUnlinkExternalAccount,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .unlinkExternalAccount(postUnlinkExternalAccount, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MeApi - object-oriented interface
 * @export
 * @class MeApi
 * @extends {BaseAPI}
 */
export class MeApi extends BaseAPI {
  /**
   * 指定したチャンネルをスターチャンネルに追加します。 スター済みのチャンネルIDを指定した場合、204を返します。 不正なチャンネルIDを指定した場合、400を返します。
   * @summary チャンネルをスターに追加
   * @param {PostStarRequest} [postStarRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public addMyStar(
    postStarRequest?: PostStarRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MeApiFp(this.configuration)
      .addMyStar(postStarRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分に新しくタグを追加します。
   * @summary 自分にタグを追加
   * @param {PostUserTagRequest} [postUserTagRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public addMyUserTag(
    postUserTagRequest?: PostUserTagRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MeApiFp(this.configuration)
      .addMyUserTag(postUserTagRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分のアイコン画像を変更します。
   * @summary 自分のアイコン画像を変更
   * @param {File} file アイコン画像(1MBまでのpng, jpeg, gif)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public changeMyIcon(file: File, options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .changeMyIcon(file, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * メッセージ引用通知の設定情報を変更します
   * @summary メッセージ引用通知の設定情報を変更
   * @param {PutNotifyCitationRequest} [putNotifyCitationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public changeMyNotifyCitation(
    putNotifyCitationRequest?: PutNotifyCitationRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MeApiFp(this.configuration)
      .changeMyNotifyCitation(putNotifyCitationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自身のパスワードを変更します。
   * @summary 自分のパスワードを変更
   * @param {PutMyPasswordRequest} [putMyPasswordRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public changeMyPassword(
    putMyPasswordRequest?: PutMyPasswordRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MeApiFp(this.configuration)
      .changeMyPassword(putMyPasswordRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自身のユーザー情報を変更します。
   * @summary 自分のユーザー情報を変更
   * @param {PatchMeRequest} [patchMeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public editMe(
    patchMeRequest?: PatchMeRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MeApiFp(this.configuration)
      .editMe(patchMeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分の指定したタグの状態を変更します。
   * @summary 自分のタグを編集
   * @param {string} tagId タグUUID
   * @param {PatchUserTagRequest} [patchUserTagRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public editMyUserTag(
    tagId: string,
    patchUserTagRequest?: PatchUserTagRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MeApiFp(this.configuration)
      .editMyUserTag(tagId, patchUserTagRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自身のユーザー詳細情報を取得します。
   * @summary 自分のユーザー詳細を取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getMe(options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getMe(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自身のチャンネル購読状態を取得します。
   * @summary 自分のチャンネル購読状態を取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getMyChannelSubscriptions(options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getMyChannelSubscriptions(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分に紐付けられている外部ログインアカウント一覧を取得します。
   * @summary 外部ログインアカウント一覧を取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getMyExternalAccounts(options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getMyExternalAccounts(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分のアイコン画像を取得します。
   * @summary 自分のアイコン画像を取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getMyIcon(options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getMyIcon(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * メッセージ引用通知の設定情報を変更します。
   * @summary メッセージ引用通知の設定情報を取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getMyNotifyCitation(options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getMyNotifyCitation(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
   * @summary QRコードを取得
   * @param {boolean} [token] 画像でなくトークン文字列で返すかどうか
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getMyQRCode(token?: boolean, options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getMyQRCode(token, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分のログインセッションのリストを取得します。
   * @summary 自分のログインセッションリストを取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getMySessions(options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getMySessions(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
   * @summary スタンプ履歴を取得
   * @param {number} [limit] 件数
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getMyStampHistory(limit?: number, options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getMyStampHistory(limit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分がスターしているチャンネルのUUIDの配列を取得します。
   * @summary スターチャンネルリストを取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getMyStars(options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getMyStars(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 有効な自分に発行されたOAuth2トークンのリストを取得します。
   * @summary 有効トークンのリストを取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getMyTokens(options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getMyTokens(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分が現在未読のチャンネルの未読情報を取得します。
   * @summary 未読チャンネルを取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getMyUnreadChannels(options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getMyUnreadChannels(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分に付けられているタグの配列を取得します。
   * @summary 自分のタグリストを取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getMyUserTags(options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getMyUserTags(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自身のチャンネル閲覧状態一覧を取得します。
   * @summary 自身のチャンネル閲覧状態一覧を取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getMyViewStates(options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getMyViewStates(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * ユーザー設定を取得します。
   * @summary ユーザー設定を取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public getUserSettings(options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .getUserSettings(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分に外部ログインアカウントを紐付けます。 指定した`providerName`がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
   * @summary 外部ログインアカウントを紐付ける
   * @param {PostLinkExternalAccount} [postLinkExternalAccount]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public linkExternalAccount(
    postLinkExternalAccount?: PostLinkExternalAccount,
    options?: RawAxiosRequestConfig,
  ) {
    return MeApiFp(this.configuration)
      .linkExternalAccount(postLinkExternalAccount, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分が未読のチャンネルを既読にします。
   * @summary チャンネルを既読にする
   * @param {string} channelId チャンネルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public readChannel(channelId: string, options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .readChannel(channelId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自身のFCMデバイスを登録します。
   * @summary FCMデバイスを登録
   * @param {PostMyFCMDeviceRequest} [postMyFCMDeviceRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public registerFCMDevice(
    postMyFCMDeviceRequest?: PostMyFCMDeviceRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MeApiFp(this.configuration)
      .registerFCMDevice(postMyFCMDeviceRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 既にスターから削除されているチャンネルを指定した場合は204を返します。
   * @summary チャンネルをスターから削除します
   * @param {string} channelId チャンネルUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public removeMyStar(channelId: string, options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .removeMyStar(channelId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 既に存在しないタグを削除しようとした場合は204を返します。
   * @summary 自分からタグを削除します
   * @param {string} tagId タグUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public removeMyUserTag(tagId: string, options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .removeMyUserTag(tagId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も`204`を返します。
   * @summary セッションを無効化
   * @param {string} sessionId セッションUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public revokeMySession(sessionId: string, options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .revokeMySession(sessionId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分の指定したトークンの認可を取り消します。
   * @summary トークンの認可を取り消す
   * @param {string} tokenId OAuth2トークンUUID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public revokeMyToken(tokenId: string, options?: RawAxiosRequestConfig) {
    return MeApiFp(this.configuration)
      .revokeMyToken(tokenId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自身の指定したチャンネルの購読レベルを設定します。
   * @summary チャンネル購読レベルを設定
   * @param {string} channelId チャンネルUUID
   * @param {PutChannelSubscribeLevelRequest} [putChannelSubscribeLevelRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public setChannelSubscribeLevel(
    channelId: string,
    putChannelSubscribeLevelRequest?: PutChannelSubscribeLevelRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return MeApiFp(this.configuration)
      .setChannelSubscribeLevel(
        channelId,
        putChannelSubscribeLevelRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
   * @summary 外部ログインアカウントの紐付けを解除
   * @param {PostUnlinkExternalAccount} [postUnlinkExternalAccount]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeApi
   */
  public unlinkExternalAccount(
    postUnlinkExternalAccount?: PostUnlinkExternalAccount,
    options?: RawAxiosRequestConfig,
  ) {
    return MeApiFp(this.configuration)
      .unlinkExternalAccount(postUnlinkExternalAccount, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
