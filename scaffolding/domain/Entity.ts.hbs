import { Entity } from "@/modules/core/Entity";
{{#if isEntity}}
{{/if}}
{{#if isAggregateRoot}}
import { AggregateRoot } from "@/modules/core/AggregateRoot";
{{/if}}
import { {{{Name}}}Id } from "./Identifier";

export interface {{{Name}}}Props {
{{#each props}}
  {{{name}}}{{#if isNullable}}?{{/if}}: {{{typeWithoutUndefined}}};
{{/each}}
}

export class {{{Name}}} extends {{{type}}}<{{{Name}}}Props, {{{Name}}}Id> {
  static create(
{{#each props}}
    {{{name}}}: {{{type}}},
{{/each}}
  ) {
    return new {{{Name}}}(
      {
{{#each props}}
        {{{name}}},
{{/each}}
      },
      {{{Name}}}Id.next(),
    );
  }

{{#each props}}
{{#if isArray}}
  get {{{name}}}(): {{{type}}} {
    return this._props{{#if isNullable}}?{{/if}}.{{{name}}} != null ? [...this._props.{{{name}}}] : this._props{{#if isNullable}}?{{/if}}.{{{name}}};
  }

{{else}}
  get {{{name}}}(): {{{type}}} {
    return this._props{{#if isNullable}}?{{/if}}.{{{name}}};
  }

{{/if}}
{{/each}}

{{#each props}}
{{#if isArray}}

  add{{{singularize Name}}}({{{singularize name}}}: {{{arrayElementType}}}) {
    {{#if isNullable}}
    if (this._props{{#if isNullable}}?{{/if}}.{{{name}}} == null) {
      this._props.{{{name}}} = [{{{singularize name}}}];
    } else {
      this._props.{{{name}}}.push({{{singularize name}}});
    }
    {{else}}
    this._props.{{{name}}}.push({{{singularize name}}});
    {{/if}}
  }

  remove{{{singularize Name}}}({{{singularize name}}}: {{{arrayElementType}}}) {
    {{#if isNullable}}
    if (this._props{{#if isNullable}}?{{/if}}.{{{name}}} == null) {
      return;
    }
    this._props.{{{name}}} = this._props.{{{name}}}.filter((x) => x instanceof {{{singularize Name}}} ? x.id.equalsTo({{{singularize name}}}.id) : x !== {{{singularize name}}});
    {{else}}
    this._props.{{{name}}} = this._props.{{{name}}}.filter((x) => x instanceof {{{singularize Name}}} ? x.id.equalsTo({{{singularize name}}}.id) : x !== {{{singularize name}}});
    {{/if}}
  }
{{else}}

  set{{{Name}}}({{{name}}}: {{{type}}}) {
    this._props.{{{name}}} = {{{name}}};
  }
{{/if}}
{{/each}}
}

